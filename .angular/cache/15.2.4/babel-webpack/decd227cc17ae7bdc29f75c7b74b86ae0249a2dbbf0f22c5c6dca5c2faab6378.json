{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, Optional, SkipSelf, Output, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Shallow-extends a stylesheet object with another stylesheet-like object.\r\n * Note that the keys in `source` have to be dash-cased.\r\n * @docs-private\r\n */\nfunction extendStyles(dest, source, importantProperties) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      const value = source[key];\n      if (value) {\n        dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n      } else {\n        dest.removeProperty(key);\n      }\n    }\n  }\n  return dest;\n}\n/**\r\n * Toggles whether the native drag interactions should be enabled for an element.\r\n * @param element Element on which to toggle the drag interactions.\r\n * @param enable Whether the drag interactions should be enabled.\r\n * @docs-private\r\n */\nfunction toggleNativeDragInteractions(element, enable) {\n  const userSelect = enable ? '' : 'none';\n  extendStyles(element.style, {\n    'touch-action': enable ? '' : 'none',\n    '-webkit-user-drag': enable ? '' : 'none',\n    '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n    'user-select': userSelect,\n    '-ms-user-select': userSelect,\n    '-webkit-user-select': userSelect,\n    '-moz-user-select': userSelect\n  });\n}\n/**\r\n * Toggles whether an element is visible while preserving its dimensions.\r\n * @param element Element whose visibility to toggle\r\n * @param enable Whether the element should be visible.\r\n * @param importantProperties Properties to be set as `!important`.\r\n * @docs-private\r\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n  extendStyles(element.style, {\n    position: enable ? '' : 'fixed',\n    top: enable ? '' : '0',\n    opacity: enable ? '' : '0',\n    left: enable ? '' : '-999em'\n  }, importantProperties);\n}\n/**\r\n * Combines a transform string with an optional other transform\r\n * that exited before the base transform was applied.\r\n */\nfunction combineTransforms(transform, initialTransform) {\n  return initialTransform && initialTransform != 'none' ? transform + ' ' + initialTransform : transform;\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n  const clientRect = element.getBoundingClientRect();\n  // We need to clone the `clientRect` here, because all the values on it are readonly\n  // and we need to be able to update them. Also we can't use a spread here, because\n  // the values on a `ClientRect` aren't own properties. See:\n  // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n  return {\n    top: clientRect.top,\n    right: clientRect.right,\n    bottom: clientRect.bottom,\n    left: clientRect.left,\n    width: clientRect.width,\n    height: clientRect.height,\n    x: clientRect.x,\n    y: clientRect.y\n  };\n}\n/**\r\n * Checks whether some coordinates are within a `ClientRect`.\r\n * @param clientRect ClientRect that is being checked.\r\n * @param x Coordinates along the X axis.\r\n * @param y Coordinates along the Y axis.\r\n */\nfunction isInsideClientRect(clientRect, x, y) {\n  const {\n    top,\n    bottom,\n    left,\n    right\n  } = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\r\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\r\n * @param clientRect `ClientRect` that should be updated.\r\n * @param top Amount to add to the `top` position.\r\n * @param left Amount to add to the `left` position.\r\n */\nfunction adjustClientRect(clientRect, top, left) {\n  clientRect.top += top;\n  clientRect.bottom = clientRect.top + clientRect.height;\n  clientRect.left += left;\n  clientRect.right = clientRect.left + clientRect.width;\n}\n/**\r\n * Checks whether the pointer coordinates are close to a ClientRect.\r\n * @param rect ClientRect to check against.\r\n * @param threshold Threshold around the ClientRect.\r\n * @param pointerX Coordinates along the X axis.\r\n * @param pointerY Coordinates along the Y axis.\r\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n  const {\n    top,\n    right,\n    bottom,\n    left,\n    width,\n    height\n  } = rect;\n  const xThreshold = width * threshold;\n  const yThreshold = height * threshold;\n  return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n  constructor(_document) {\n    this._document = _document;\n    /** Cached positions of the scrollable parent elements. */\n    this.positions = new Map();\n  }\n  /** Clears the cached positions. */\n  clear() {\n    this.positions.clear();\n  }\n  /** Caches the positions. Should be called at the beginning of a drag sequence. */\n  cache(elements) {\n    this.clear();\n    this.positions.set(this._document, {\n      scrollPosition: this.getViewportScrollPosition()\n    });\n    elements.forEach(element => {\n      this.positions.set(element, {\n        scrollPosition: {\n          top: element.scrollTop,\n          left: element.scrollLeft\n        },\n        clientRect: getMutableClientRect(element)\n      });\n    });\n  }\n  /** Handles scrolling while a drag is taking place. */\n  handleScroll(event) {\n    const target = _getEventTarget(event);\n    const cachedPosition = this.positions.get(target);\n    if (!cachedPosition) {\n      return null;\n    }\n    const scrollPosition = cachedPosition.scrollPosition;\n    let newTop;\n    let newLeft;\n    if (target === this._document) {\n      const viewportScrollPosition = this.getViewportScrollPosition();\n      newTop = viewportScrollPosition.top;\n      newLeft = viewportScrollPosition.left;\n    } else {\n      newTop = target.scrollTop;\n      newLeft = target.scrollLeft;\n    }\n    const topDifference = scrollPosition.top - newTop;\n    const leftDifference = scrollPosition.left - newLeft;\n    // Go through and update the cached positions of the scroll\n    // parents that are inside the element that was scrolled.\n    this.positions.forEach((position, node) => {\n      if (position.clientRect && target !== node && target.contains(node)) {\n        adjustClientRect(position.clientRect, topDifference, leftDifference);\n      }\n    });\n    scrollPosition.top = newTop;\n    scrollPosition.left = newLeft;\n    return {\n      top: topDifference,\n      left: leftDifference\n    };\n  }\n  /**\r\n   * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\r\n   * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\r\n   * the top/left offset of the `document.documentElement` which works for most cases, but breaks\r\n   * if the element is offset by something like the `BlockScrollStrategy`.\r\n   */\n  getViewportScrollPosition() {\n    return {\n      top: window.scrollY,\n      left: window.scrollX\n    };\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n  const clone = node.cloneNode(true);\n  const descendantsWithId = clone.querySelectorAll('[id]');\n  const nodeName = node.nodeName.toLowerCase();\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  for (let i = 0; i < descendantsWithId.length; i++) {\n    descendantsWithId[i].removeAttribute('id');\n  }\n  if (nodeName === 'canvas') {\n    transferCanvasData(node, clone);\n  } else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n    transferInputData(node, clone);\n  }\n  transferData('canvas', node, clone, transferCanvasData);\n  transferData('input, textarea, select', node, clone, transferInputData);\n  return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n  const descendantElements = node.querySelectorAll(selector);\n  if (descendantElements.length) {\n    const cloneElements = clone.querySelectorAll(selector);\n    for (let i = 0; i < descendantElements.length; i++) {\n      callback(descendantElements[i], cloneElements[i]);\n    }\n  }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n  // Browsers throw an error when assigning the value of a file input programmatically.\n  if (clone.type !== 'file') {\n    clone.value = source.value;\n  }\n  // Radio button `name` attributes must be unique for radio button groups\n  // otherwise original radio buttons can lose their checked state\n  // once the clone is inserted in the DOM.\n  if (clone.type === 'radio' && clone.name) {\n    clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n  }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n  const context = clone.getContext('2d');\n  if (context) {\n    // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n    // We can't do much about it so just ignore the error.\n    try {\n      context.drawImage(source, 0, 0);\n    } catch {}\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n});\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({\n  passive: false\n});\n/**\r\n * Time in milliseconds for which to ignore mouse events, after\r\n * receiving a touch event. Used to avoid doing double work for\r\n * touch devices where the browser fires fake mouse events, in\r\n * addition to touch events.\r\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n// Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n'position']);\n/**\r\n * Reference to a draggable item. Used to manipulate or dispose of the item.\r\n */\nclass DragRef {\n  /** Whether starting to drag this element is disabled. */\n  get disabled() {\n    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n  }\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._toggleNativeDragInteractions();\n      this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n    }\n  }\n  constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    this._config = _config;\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n    /**\r\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\r\n     * passive transform in order for the dragged element to retain its new position\r\n     * after the user has stopped dragging and because we need to know the relative\r\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\r\n     */\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * Whether the dragging sequence has been started. Doesn't\r\n     * necessarily mean that the element has been moved.\r\n     */\n    this._hasStartedDragging = false;\n    /** Emits when the item is being moved. */\n    this._moveEvents = new Subject();\n    /** Subscription to pointer movement events. */\n    this._pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n    this._pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n    this._scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n    this._resizeSubscription = Subscription.EMPTY;\n    /** Cached reference to the boundary element. */\n    this._boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n    this._nativeInteractionsEnabled = true;\n    /** Elements that can be used to drag the draggable item. */\n    this._handles = [];\n    /** Registered handles that are currently disabled. */\n    this._disabledHandles = new Set();\n    /** Layout direction of the item. */\n    this._direction = 'ltr';\n    /**\r\n     * Amount of milliseconds to wait after the user has put their\r\n     * pointer down before starting to drag the element.\r\n     */\n    this.dragStartDelay = 0;\n    this._disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n    this.beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n    this.started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    this.released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n    this.ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n    this.entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    this.exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n    this.dropped = new Subject();\n    /**\r\n     * Emits as the user is dragging the item. Use with caution,\r\n     * because this event will fire for every pixel that the user has dragged.\r\n     */\n    this.moved = this._moveEvents;\n    /** Handler for the `mousedown`/`touchstart` events. */\n    this._pointerDown = event => {\n      this.beforeStarted.next();\n      // Delegate the event based on whether it started from a handle or the element itself.\n      if (this._handles.length) {\n        const targetHandle = this._getTargetHandle(event);\n        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n          this._initializeDragSequence(targetHandle, event);\n        }\n      } else if (!this.disabled) {\n        this._initializeDragSequence(this._rootElement, event);\n      }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n    this._pointerMove = event => {\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      if (!this._hasStartedDragging) {\n        const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n        const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n        const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n        // Only start dragging after the user has moved more than the minimum distance in either\n        // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n        // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n        // per pixel of movement (e.g. if the user moves their pointer quickly).\n        if (isOverThreshold) {\n          const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n          const container = this._dropContainer;\n          if (!isDelayElapsed) {\n            this._endDragSequence(event);\n            return;\n          }\n          // Prevent other drag sequences from starting while something in the container is still\n          // being dragged. This can happen while we're waiting for the drop animation to finish\n          // and can cause errors, because some elements might still be moving around.\n          if (!container || !container.isDragging() && !container.isReceiving()) {\n            // Prevent the default action as soon as the dragging sequence is considered as\n            // \"started\" since waiting for the next event can allow the device to begin scrolling.\n            event.preventDefault();\n            this._hasStartedDragging = true;\n            this._ngZone.run(() => this._startDragSequence(event));\n          }\n        }\n        return;\n      }\n      // We prevent the default action down here so that we know that dragging has started. This is\n      // important for touch devices where doing this too early can unnecessarily block scrolling,\n      // if there's a dragging delay.\n      event.preventDefault();\n      const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n      this._hasMoved = true;\n      this._lastKnownPointerPosition = pointerPosition;\n      this._updatePointerDirectionDelta(constrainedPointerPosition);\n      if (this._dropContainer) {\n        this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n      } else {\n        // If there's a position constraint function, we want the element's top/left to be at the\n        // specific position on the page. Use the initial position as a reference if that's the case.\n        const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n        const activeTransform = this._activeTransform;\n        activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n        activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n        this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n      }\n      // Since this event gets fired for every pixel while dragging, we only\n      // want to fire it if the consumer opted into it. Also we have to\n      // re-enter the zone because we run all of the events on the outside.\n      if (this._moveEvents.observers.length) {\n        this._ngZone.run(() => {\n          this._moveEvents.next({\n            source: this,\n            pointerPosition: constrainedPointerPosition,\n            event,\n            distance: this._getDragDistance(constrainedPointerPosition),\n            delta: this._pointerDirectionDelta\n          });\n        });\n      }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n    this._pointerUp = event => {\n      this._endDragSequence(event);\n    };\n    /** Handles a native `dragstart` event. */\n    this._nativeDragStart = event => {\n      if (this._handles.length) {\n        const targetHandle = this._getTargetHandle(event);\n        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n          event.preventDefault();\n        }\n      } else if (!this.disabled) {\n        // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n        // but some cases like dragging of links can slip through (see #24403).\n        event.preventDefault();\n      }\n    };\n    this.withRootElement(element).withParent(_config.parentDragRef || null);\n    this._parentPositions = new ParentPositionTracker(_document);\n    _dragDropRegistry.registerDragItem(this);\n  }\n  /**\r\n   * Returns the element that is being used as a placeholder\r\n   * while the current element is being dragged.\r\n   */\n  getPlaceholderElement() {\n    return this._placeholder;\n  }\n  /** Returns the root draggable element. */\n  getRootElement() {\n    return this._rootElement;\n  }\n  /**\r\n   * Gets the currently-visible element that represents the drag item.\r\n   * While dragging this is the placeholder, otherwise it's the root element.\r\n   */\n  getVisibleElement() {\n    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n  }\n  /** Registers the handles that can be used to drag the element. */\n  withHandles(handles) {\n    this._handles = handles.map(handle => coerceElement(handle));\n    this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n    this._toggleNativeDragInteractions();\n    // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n    // the set, rather than iterate over it and filter out the destroyed handles, because while\n    // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n    // use an array internally which may throw an error.\n    const disabledHandles = new Set();\n    this._disabledHandles.forEach(handle => {\n      if (this._handles.indexOf(handle) > -1) {\n        disabledHandles.add(handle);\n      }\n    });\n    this._disabledHandles = disabledHandles;\n    return this;\n  }\n  /**\r\n   * Registers the template that should be used for the drag preview.\r\n   * @param template Template that from which to stamp out the preview.\r\n   */\n  withPreviewTemplate(template) {\n    this._previewTemplate = template;\n    return this;\n  }\n  /**\r\n   * Registers the template that should be used for the drag placeholder.\r\n   * @param template Template that from which to stamp out the placeholder.\r\n   */\n  withPlaceholderTemplate(template) {\n    this._placeholderTemplate = template;\n    return this;\n  }\n  /**\r\n   * Sets an alternate drag root element. The root element is the element that will be moved as\r\n   * the user is dragging. Passing an alternate root element is useful when trying to enable\r\n   * dragging on an element that you might not have access to.\r\n   */\n  withRootElement(rootElement) {\n    const element = coerceElement(rootElement);\n    if (element !== this._rootElement) {\n      if (this._rootElement) {\n        this._removeRootElementListeners(this._rootElement);\n      }\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n      });\n      this._initialTransform = undefined;\n      this._rootElement = element;\n    }\n    if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n      this._ownerSVGElement = this._rootElement.ownerSVGElement;\n    }\n    return this;\n  }\n  /**\r\n   * Element to which the draggable's position will be constrained.\r\n   */\n  withBoundaryElement(boundaryElement) {\n    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n    this._resizeSubscription.unsubscribe();\n    if (boundaryElement) {\n      this._resizeSubscription = this._viewportRuler.change(10).subscribe(() => this._containInsideBoundaryOnResize());\n    }\n    return this;\n  }\n  /** Sets the parent ref that the ref is nested in.  */\n  withParent(parent) {\n    this._parentDragRef = parent;\n    return this;\n  }\n  /** Removes the dragging functionality from the DOM element. */\n  dispose() {\n    this._removeRootElementListeners(this._rootElement);\n    // Do this check before removing from the registry since it'll\n    // stop being considered as dragged once it is removed.\n    if (this.isDragging()) {\n      // Since we move out the element to the end of the body while it's being\n      // dragged, we have to make sure that it's removed if it gets destroyed.\n      this._rootElement?.remove();\n    }\n    this._anchor?.remove();\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this.beforeStarted.complete();\n    this.started.complete();\n    this.released.complete();\n    this.ended.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this._moveEvents.complete();\n    this._handles = [];\n    this._disabledHandles.clear();\n    this._dropContainer = undefined;\n    this._resizeSubscription.unsubscribe();\n    this._parentPositions.clear();\n    this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate = this._previewTemplate = this._anchor = this._parentDragRef = null;\n  }\n  /** Checks whether the element is currently being dragged. */\n  isDragging() {\n    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n  }\n  /** Resets a standalone drag item to its initial position. */\n  reset() {\n    this._rootElement.style.transform = this._initialTransform || '';\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform = {\n      x: 0,\n      y: 0\n    };\n  }\n  /**\r\n   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\r\n   * @param handle Handle element that should be disabled.\r\n   */\n  disableHandle(handle) {\n    if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n      this._disabledHandles.add(handle);\n      toggleNativeDragInteractions(handle, true);\n    }\n  }\n  /**\r\n   * Enables a handle, if it has been disabled.\r\n   * @param handle Handle element to be enabled.\r\n   */\n  enableHandle(handle) {\n    if (this._disabledHandles.has(handle)) {\n      this._disabledHandles.delete(handle);\n      toggleNativeDragInteractions(handle, this.disabled);\n    }\n  }\n  /** Sets the layout direction of the draggable item. */\n  withDirection(direction) {\n    this._direction = direction;\n    return this;\n  }\n  /** Sets the container that the item is part of. */\n  _withDropContainer(container) {\n    this._dropContainer = container;\n  }\n  /**\r\n   * Gets the current position in pixels the draggable outside of a drop container.\r\n   */\n  getFreeDragPosition() {\n    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n    return {\n      x: position.x,\n      y: position.y\n    };\n  }\n  /**\r\n   * Sets the current position in pixels the draggable outside of a drop container.\r\n   * @param value New position to be set.\r\n   */\n  setFreeDragPosition(value) {\n    this._activeTransform = {\n      x: 0,\n      y: 0\n    };\n    this._passiveTransform.x = value.x;\n    this._passiveTransform.y = value.y;\n    if (!this._dropContainer) {\n      this._applyRootElementTransform(value.x, value.y);\n    }\n    return this;\n  }\n  /**\r\n   * Sets the container into which to insert the preview element.\r\n   * @param value Container into which to insert the preview.\r\n   */\n  withPreviewContainer(value) {\n    this._previewContainer = value;\n    return this;\n  }\n  /** Updates the item's sort order based on the last-known pointer position. */\n  _sortFromLastPointerPosition() {\n    const position = this._lastKnownPointerPosition;\n    if (position && this._dropContainer) {\n      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n    }\n  }\n  /** Unsubscribes from the global subscriptions. */\n  _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n    this._scrollSubscription.unsubscribe();\n  }\n  /** Destroys the preview element and its ViewRef. */\n  _destroyPreview() {\n    this._preview?.remove();\n    this._previewRef?.destroy();\n    this._preview = this._previewRef = null;\n  }\n  /** Destroys the placeholder element and its ViewRef. */\n  _destroyPlaceholder() {\n    this._placeholder?.remove();\n    this._placeholderRef?.destroy();\n    this._placeholder = this._placeholderRef = null;\n  }\n  /**\r\n   * Clears subscriptions and stops the dragging sequence.\r\n   * @param event Browser event object that ended the sequence.\r\n   */\n  _endDragSequence(event) {\n    // Note that here we use `isDragging` from the service, rather than from `this`.\n    // The difference is that the one from the service reflects whether a dragging sequence\n    // has been initiated, whereas the one on `this` includes whether the user has passed\n    // the minimum dragging threshold.\n    if (!this._dragDropRegistry.isDragging(this)) {\n      return;\n    }\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n    this._toggleNativeDragInteractions();\n    if (this._handles) {\n      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n    }\n    if (!this._hasStartedDragging) {\n      return;\n    }\n    this.released.next({\n      source: this,\n      event\n    });\n    if (this._dropContainer) {\n      // Stop scrolling immediately, instead of waiting for the animation to finish.\n      this._dropContainer._stopScrolling();\n      this._animatePreviewToPlaceholder().then(() => {\n        this._cleanupDragArtifacts(event);\n        this._cleanupCachedDimensions();\n        this._dragDropRegistry.stopDragging(this);\n      });\n    } else {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => {\n        this.ended.next({\n          source: this,\n          distance: this._getDragDistance(pointerPosition),\n          dropPoint: pointerPosition,\n          event\n        });\n      });\n      this._cleanupCachedDimensions();\n      this._dragDropRegistry.stopDragging(this);\n    }\n  }\n  /** Starts the dragging sequence. */\n  _startDragSequence(event) {\n    if (isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n    this._toggleNativeDragInteractions();\n    const dropContainer = this._dropContainer;\n    if (dropContainer) {\n      const element = this._rootElement;\n      const parent = element.parentNode;\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n      const anchor = this._anchor = this._anchor || this._document.createComment('');\n      // Needs to happen before the root element is moved.\n      const shadowRoot = this._getShadowRoot();\n      // Insert an anchor node so that we can restore the element's position in the DOM.\n      parent.insertBefore(anchor, element);\n      // There's no risk of transforms stacking when inside a drop container so\n      // we can keep the initial transform up to date any time dragging starts.\n      this._initialTransform = element.style.transform || '';\n      // Create the preview after the initial transform has\n      // been cached, because it can be affected by the transform.\n      this._preview = this._createPreviewElement();\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      toggleVisibility(element, false, dragImportantProperties);\n      this._document.body.appendChild(parent.replaceChild(placeholder, element));\n      this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n      this.started.next({\n        source: this,\n        event\n      }); // Emit before notifying the container.\n      dropContainer.start();\n      this._initialContainer = dropContainer;\n      this._initialIndex = dropContainer.getItemIndex(this);\n    } else {\n      this.started.next({\n        source: this,\n        event\n      });\n      this._initialContainer = this._initialIndex = undefined;\n    }\n    // Important to run after we've called `start` on the parent container\n    // so that it has had time to resolve its scrollable parents.\n    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n  }\n  /**\r\n   * Sets up the different variables and subscriptions\r\n   * that will be necessary for the dragging sequence.\r\n   * @param referenceElement Element that started the drag sequence.\r\n   * @param event Browser event object that started the sequence.\r\n   */\n  _initializeDragSequence(referenceElement, event) {\n    // Stop propagation if the item is inside another\n    // draggable so we don't start multiple drag sequences.\n    if (this._parentDragRef) {\n      event.stopPropagation();\n    }\n    const isDragging = this.isDragging();\n    const isTouchSequence = isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n    const rootElement = this._rootElement;\n    const target = _getEventTarget(event);\n    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n    const isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) : isFakeMousedownFromScreenReader(event);\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (target && target.draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n      return;\n    }\n    // If we've got handles, we need to disable the tap highlight on the entire root element,\n    // otherwise iOS will still add it, even though all the drag interactions on the handle\n    // are disabled.\n    if (this._handles.length) {\n      const rootStyles = rootElement.style;\n      this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n      rootStyles.webkitTapHighlightColor = 'transparent';\n    }\n    this._hasStartedDragging = this._hasMoved = false;\n    // Avoid multiple subscriptions and memory leaks when multi touch\n    // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n    this._removeSubscriptions();\n    this._initialClientRect = this._rootElement.getBoundingClientRect();\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n    if (this._boundaryElement) {\n      this._boundaryRect = getMutableClientRect(this._boundaryElement);\n    }\n    // If we have a custom preview we can't know ahead of time how large it'll be so we position\n    // it next to the cursor. The exception is when the consumer has opted into making the preview\n    // the same size as the root element, in which case we do know the size.\n    const previewTemplate = this._previewTemplate;\n    this._pickupPositionInElement = previewTemplate && previewTemplate.template && !previewTemplate.matchSize ? {\n      x: 0,\n      y: 0\n    } : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {\n      x: 0,\n      y: 0\n    };\n    this._pointerPositionAtLastDirectionChange = {\n      x: pointerPosition.x,\n      y: pointerPosition.y\n    };\n    this._dragStartTime = Date.now();\n    this._dragDropRegistry.startDragging(this, event);\n  }\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  _cleanupDragArtifacts(event) {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    toggleVisibility(this._rootElement, true, dragImportantProperties);\n    this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._initialClientRect = this._boundaryRect = this._previewRect = this._initialTransform = undefined;\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const container = this._dropContainer;\n      const currentIndex = container.getItemIndex(this);\n      const pointerPosition = this._getPointerPositionOnPage(event);\n      const distance = this._getDragDistance(pointerPosition);\n      const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n      this.ended.next({\n        source: this,\n        distance,\n        dropPoint: pointerPosition,\n        event\n      });\n      this.dropped.next({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialIndex,\n        container: container,\n        previousContainer: this._initialContainer,\n        isPointerOverContainer,\n        distance,\n        dropPoint: pointerPosition,\n        event\n      });\n      container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n      this._dropContainer = this._initialContainer;\n    });\n  }\n  /**\r\n   * Updates the item's position in its drop container, or moves it\r\n   * into a new one, depending on its current drag position.\r\n   */\n  _updateActiveDropContainer({\n    x,\n    y\n  }, {\n    x: rawX,\n    y: rawY\n  }) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n    // If we couldn't find a new container to move the item into, and the item has left its\n    // initial container, check whether the it's over the initial container. This handles the\n    // case where two containers are connected one way and the user tries to undo dragging an\n    // item into a new container.\n    if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x, y)) {\n      newContainer = this._initialContainer;\n    }\n    if (newContainer && newContainer !== this._dropContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.next({\n          item: this,\n          container: this._dropContainer\n        });\n        this._dropContainer.exit(this);\n        // Notify the new container that the item has entered.\n        this._dropContainer = newContainer;\n        this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n        // If we're re-entering the initial container and sorting is disabled,\n        // put item the into its starting index to begin with.\n        newContainer.sortingDisabled ? this._initialIndex : undefined);\n        this.entered.next({\n          item: this,\n          container: newContainer,\n          currentIndex: newContainer.getItemIndex(this)\n        });\n      });\n    }\n    // Dragging may have been interrupted as a result of the events above.\n    if (this.isDragging()) {\n      this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n      this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n      if (this.constrainPosition) {\n        this._applyPreviewTransform(x, y);\n      } else {\n        this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n      }\n    }\n  }\n  /**\r\n   * Creates the element that will be rendered next to the user's pointer\r\n   * and will be used as a preview of the element that is being dragged.\r\n   */\n  _createPreviewElement() {\n    const previewConfig = this._previewTemplate;\n    const previewClass = this.previewClass;\n    const previewTemplate = previewConfig ? previewConfig.template : null;\n    let preview;\n    if (previewTemplate && previewConfig) {\n      // Measure the element before we've inserted the preview\n      // since the insertion could throw off the measurement.\n      const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n      const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n      viewRef.detectChanges();\n      preview = getRootNode(viewRef, this._document);\n      this._previewRef = viewRef;\n      if (previewConfig.matchSize) {\n        matchElementSize(preview, rootRect);\n      } else {\n        preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n      }\n    } else {\n      preview = deepCloneNode(this._rootElement);\n      matchElementSize(preview, this._initialClientRect);\n      if (this._initialTransform) {\n        preview.style.transform = this._initialTransform;\n      }\n    }\n    extendStyles(preview.style, {\n      // It's important that we disable the pointer events on the preview, because\n      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n      'pointer-events': 'none',\n      // We have to reset the margin, because it can throw off positioning relative to the viewport.\n      'margin': '0',\n      'position': 'fixed',\n      'top': '0',\n      'left': '0',\n      'z-index': `${this._config.zIndex || 1000}`\n    }, dragImportantProperties);\n    toggleNativeDragInteractions(preview, false);\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._direction);\n    if (previewClass) {\n      if (Array.isArray(previewClass)) {\n        previewClass.forEach(className => preview.classList.add(className));\n      } else {\n        preview.classList.add(previewClass);\n      }\n    }\n    return preview;\n  }\n  /**\r\n   * Animates the preview element from its current position to the location of the drop placeholder.\r\n   * @returns Promise that resolves when the animation completes.\r\n   */\n  _animatePreviewToPlaceholder() {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n    // Move the preview to the placeholder position.\n    this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = event => {\n          if (!event || _getEventTarget(event) === this._preview && event.propertyName === 'transform') {\n            this._preview?.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        };\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  _createPlaceholderElement() {\n    const placeholderConfig = this._placeholderTemplate;\n    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n    let placeholder;\n    if (placeholderTemplate) {\n      this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n      this._placeholderRef.detectChanges();\n      placeholder = getRootNode(this._placeholderRef, this._document);\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n    // Stop pointer events on the preview so the user can't\n    // interact with it while the preview is animating.\n    placeholder.style.pointerEvents = 'none';\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n  /**\r\n   * Figures out the coordinates at which an element was picked up.\r\n   * @param referenceElement Element that initiated the dragging.\r\n   * @param event Event that initiated the dragging.\r\n   */\n  _getPointerPositionInElement(elementRect, referenceElement, event) {\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n    const scrollPosition = this._getViewportScrollPosition();\n    const x = point.pageX - referenceRect.left - scrollPosition.left;\n    const y = point.pageY - referenceRect.top - scrollPosition.top;\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n  /** Determines the point of the page that was touched by the user. */\n  _getPointerPositionOnPage(event) {\n    const scrollPosition = this._getViewportScrollPosition();\n    const point = isTouchEvent(event) ?\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n    // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n    // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n    // throwing an error. The value returned here will be incorrect, but since this only\n    // breaks inside a developer tool and the value is only used for secondary information,\n    // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n    event.touches[0] || event.changedTouches[0] || {\n      pageX: 0,\n      pageY: 0\n    } : event;\n    const x = point.pageX - scrollPosition.left;\n    const y = point.pageY - scrollPosition.top;\n    // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n    // coordinate system\n    if (this._ownerSVGElement) {\n      const svgMatrix = this._ownerSVGElement.getScreenCTM();\n      if (svgMatrix) {\n        const svgPoint = this._ownerSVGElement.createSVGPoint();\n        svgPoint.x = x;\n        svgPoint.y = y;\n        return svgPoint.matrixTransform(svgMatrix.inverse());\n      }\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  _getConstrainedPointerPosition(point) {\n    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n    let {\n      x,\n      y\n    } = this.constrainPosition ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement) : point;\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      x = this._pickupPositionOnPage.x;\n    }\n    if (this._boundaryRect) {\n      const {\n        x: pickupX,\n        y: pickupY\n      } = this._pickupPositionInElement;\n      const boundaryRect = this._boundaryRect;\n      const {\n        width: previewWidth,\n        height: previewHeight\n      } = this._getPreviewRect();\n      const minY = boundaryRect.top + pickupY;\n      const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n      const minX = boundaryRect.left + pickupX;\n      const maxX = boundaryRect.right - (previewWidth - pickupX);\n      x = clamp$1(x, minX, maxX);\n      y = clamp$1(y, minY, maxY);\n    }\n    return {\n      x,\n      y\n    };\n  }\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  _updatePointerDirectionDelta(pointerPositionOnPage) {\n    const {\n      x,\n      y\n    } = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n    return delta;\n  }\n  /** Toggles the native drag interactions, based on how many handles are registered. */\n  _toggleNativeDragInteractions() {\n    if (!this._rootElement || !this._handles) {\n      return;\n    }\n    const shouldEnable = this._handles.length > 0 || !this.isDragging();\n    if (shouldEnable !== this._nativeInteractionsEnabled) {\n      this._nativeInteractionsEnabled = shouldEnable;\n      toggleNativeDragInteractions(this._rootElement, shouldEnable);\n    }\n  }\n  /** Removes the manually-added event listeners from the root element. */\n  _removeRootElementListeners(element) {\n    element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n    element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n  }\n  /**\r\n   * Applies a `transform` to the root element, taking into account any existing transforms on it.\r\n   * @param x New transform value along the X axis.\r\n   * @param y New transform value along the Y axis.\r\n   */\n  _applyRootElementTransform(x, y) {\n    const transform = getTransform(x, y);\n    const styles = this._rootElement.style;\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    // Should be excluded none because none + translate3d(x, y, x) is invalid css\n    if (this._initialTransform == null) {\n      this._initialTransform = styles.transform && styles.transform != 'none' ? styles.transform : '';\n    }\n    // Preserve the previous `transform` value, if there was one. Note that we apply our own\n    // transform before the user's, because things like rotation can affect which direction\n    // the element will be translated towards.\n    styles.transform = combineTransforms(transform, this._initialTransform);\n  }\n  /**\r\n   * Applies a `transform` to the preview, taking into account any existing transforms on it.\r\n   * @param x New transform value along the X axis.\r\n   * @param y New transform value along the Y axis.\r\n   */\n  _applyPreviewTransform(x, y) {\n    // Only apply the initial transform if the preview is a clone of the original element, otherwise\n    // it could be completely different and the transform might not make sense anymore.\n    const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n    const transform = getTransform(x, y);\n    this._preview.style.transform = combineTransforms(transform, initialTransform);\n  }\n  /**\r\n   * Gets the distance that the user has dragged during the current drag sequence.\r\n   * @param currentPosition Current position of the user's pointer.\r\n   */\n  _getDragDistance(currentPosition) {\n    const pickupPosition = this._pickupPositionOnPage;\n    if (pickupPosition) {\n      return {\n        x: currentPosition.x - pickupPosition.x,\n        y: currentPosition.y - pickupPosition.y\n      };\n    }\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n  _cleanupCachedDimensions() {\n    this._boundaryRect = this._previewRect = undefined;\n    this._parentPositions.clear();\n  }\n  /**\r\n   * Checks whether the element is still inside its boundary after the viewport has been resized.\r\n   * If not, the position is adjusted so that the element fits again.\r\n   */\n  _containInsideBoundaryOnResize() {\n    let {\n      x,\n      y\n    } = this._passiveTransform;\n    if (x === 0 && y === 0 || this.isDragging() || !this._boundaryElement) {\n      return;\n    }\n    // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const boundaryRect = this._boundaryElement.getBoundingClientRect();\n    // It's possible that the element got hidden away after dragging (e.g. by switching to a\n    // different tab). Don't do anything in this case so we don't clear the user's position.\n    if (boundaryRect.width === 0 && boundaryRect.height === 0 || elementRect.width === 0 && elementRect.height === 0) {\n      return;\n    }\n    const leftOverflow = boundaryRect.left - elementRect.left;\n    const rightOverflow = elementRect.right - boundaryRect.right;\n    const topOverflow = boundaryRect.top - elementRect.top;\n    const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n    // If the element has become wider than the boundary, we can't\n    // do much to make it fit so we just anchor it to the left.\n    if (boundaryRect.width > elementRect.width) {\n      if (leftOverflow > 0) {\n        x += leftOverflow;\n      }\n      if (rightOverflow > 0) {\n        x -= rightOverflow;\n      }\n    } else {\n      x = 0;\n    }\n    // If the element has become taller than the boundary, we can't\n    // do much to make it fit so we just anchor it to the top.\n    if (boundaryRect.height > elementRect.height) {\n      if (topOverflow > 0) {\n        y += topOverflow;\n      }\n      if (bottomOverflow > 0) {\n        y -= bottomOverflow;\n      }\n    } else {\n      y = 0;\n    }\n    if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n      this.setFreeDragPosition({\n        y,\n        x\n      });\n    }\n  }\n  /** Gets the drag start delay, based on the event type. */\n  _getDragStartDelay(event) {\n    const value = this.dragStartDelay;\n    if (typeof value === 'number') {\n      return value;\n    } else if (isTouchEvent(event)) {\n      return value.touch;\n    }\n    return value ? value.mouse : 0;\n  }\n  /** Updates the internal state of the draggable element when scrolling has occurred. */\n  _updateOnScroll(event) {\n    const scrollDifference = this._parentPositions.handleScroll(event);\n    if (scrollDifference) {\n      const target = _getEventTarget(event);\n      // ClientRect dimensions are based on the scroll position of the page and its parent\n      // node so we have to update the cached boundary ClientRect if the user has scrolled.\n      if (this._boundaryRect && target !== this._boundaryElement && target.contains(this._boundaryElement)) {\n        adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n      }\n      this._pickupPositionOnPage.x += scrollDifference.left;\n      this._pickupPositionOnPage.y += scrollDifference.top;\n      // If we're in free drag mode, we have to update the active transform, because\n      // it isn't relative to the viewport like the preview inside a drop list.\n      if (!this._dropContainer) {\n        this._activeTransform.x -= scrollDifference.left;\n        this._activeTransform.y -= scrollDifference.top;\n        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n      }\n    }\n  }\n  /** Gets the scroll position of the viewport. */\n  _getViewportScrollPosition() {\n    return this._parentPositions.positions.get(this._document)?.scrollPosition || this._parentPositions.getViewportScrollPosition();\n  }\n  /**\r\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\r\n   * than saving it in property directly on init, because we want to resolve it as late as possible\r\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\r\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\r\n   */\n  _getShadowRoot() {\n    if (this._cachedShadowRoot === undefined) {\n      this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n    }\n    return this._cachedShadowRoot;\n  }\n  /** Gets the element into which the drag preview should be inserted. */\n  _getPreviewInsertionPoint(initialParent, shadowRoot) {\n    const previewContainer = this._previewContainer || 'global';\n    if (previewContainer === 'parent') {\n      return initialParent;\n    }\n    if (previewContainer === 'global') {\n      const documentRef = this._document;\n      // We can't use the body if the user is in fullscreen mode,\n      // because the preview will render under the fullscreen element.\n      // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n      return shadowRoot || documentRef.fullscreenElement || documentRef.webkitFullscreenElement || documentRef.mozFullScreenElement || documentRef.msFullscreenElement || documentRef.body;\n    }\n    return coerceElement(previewContainer);\n  }\n  /** Lazily resolves and returns the dimensions of the preview. */\n  _getPreviewRect() {\n    // Cache the preview element rect if we haven't cached it already or if\n    // we cached it too early before the element dimensions were computed.\n    if (!this._previewRect || !this._previewRect.width && !this._previewRect.height) {\n      this._previewRect = this._preview ? this._preview.getBoundingClientRect() : this._initialClientRect;\n    }\n    return this._previewRect;\n  }\n  /** Gets a handle that is the target of an event. */\n  _getTargetHandle(event) {\n    return this._handles.find(handle => {\n      return event.target && (event.target === handle || handle.contains(event.target));\n    });\n  }\n}\n/**\r\n * Gets a 3d `transform` that can be applied to an element.\r\n * @param x Desired position of the element along the X axis.\r\n * @param y Desired position of the element along the Y axis.\r\n */\nfunction getTransform(x, y) {\n  // Round the transforms since some browsers will\n  // blur the elements for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n  // This function is called for every pixel that the user has dragged so we need it to be\n  // as fast as possible. Since we only bind mouse events and touch events, we can assume\n  // that if the event's name starts with `t`, it's a touch event.\n  return event.type[0] === 't';\n}\n/**\r\n * Gets the root HTML element of an embedded view.\r\n * If the root is not an HTML element it gets wrapped in one.\r\n */\nfunction getRootNode(viewRef, _document) {\n  const rootNodes = viewRef.rootNodes;\n  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n    return rootNodes[0];\n  }\n  const wrapper = _document.createElement('div');\n  rootNodes.forEach(node => wrapper.appendChild(node));\n  return wrapper;\n}\n/**\r\n * Matches the target element's size to the source's size.\r\n * @param target Element that needs to be resized.\r\n * @param sourceRect Dimensions of the source element.\r\n */\nfunction matchElementSize(target, sourceRect) {\n  target.style.width = `${sourceRect.width}px`;\n  target.style.height = `${sourceRect.height}px`;\n  target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Moves an item one index in an array to another.\r\n * @param array Array in which to move the item.\r\n * @param fromIndex Starting index of the item.\r\n * @param toIndex Index to which the item should be moved.\r\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n  if (from === to) {\n    return;\n  }\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n  array[to] = target;\n}\n/**\r\n * Moves an item from one array to another.\r\n * @param currentArray Array from which to transfer the item.\r\n * @param targetArray Array into which to put the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n/**\r\n * Copies an item from one array to another, leaving it in its\r\n * original position in current array.\r\n * @param currentArray Array from which to copy the item.\r\n * @param targetArray Array into which is copy the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n *\r\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n  const to = clamp(targetIndex, targetArray.length);\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n  return Math.max(0, Math.min(max, value));\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Strategy that only supports sorting along a single axis.\r\n * Items are reordered using CSS transforms which allows for sorting to be animated.\r\n * @docs-private\r\n */\nclass SingleAxisSortStrategy {\n  constructor(_element, _dragDropRegistry) {\n    this._element = _element;\n    this._dragDropRegistry = _dragDropRegistry;\n    /** Cache of the dimensions of all the items inside the container. */\n    this._itemPositions = [];\n    /** Direction in which the list is oriented. */\n    this.orientation = 'vertical';\n    /**\r\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\r\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\r\n     * overlap with the swapped item after the swapping occurred.\r\n     */\n    this._previousSwap = {\n      drag: null,\n      delta: 0,\n      overlaps: false\n    };\n  }\n  /**\r\n   * To be called when the drag sequence starts.\r\n   * @param items Items that are currently in the list.\r\n   */\n  start(items) {\n    this.withItems(items);\n  }\n  /**\r\n   * To be called when an item is being sorted.\r\n   * @param item Item to be sorted.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\r\n   */\n  sort(item, pointerX, pointerY, pointerDelta) {\n    const siblings = this._itemPositions;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n    if (newIndex === -1 && siblings.length > 0) {\n      return null;\n    }\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement();\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n        adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n        adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n    // Note that it's important that we do this after the client rects have been adjusted.\n    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    return {\n      previousIndex: currentIndex,\n      currentIndex: newIndex\n    };\n  }\n  /**\r\n   * Called when an item is being moved into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\r\n   *   out automatically.\r\n   */\n  enter(item, pointerX, pointerY, index) {\n    const newIndex = index == null || index < 0 ?\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    this._getItemIndexFromPointerPosition(item, pointerX, pointerY) : index;\n    const activeDraggables = this._activeDraggables;\n    const currentIndex = activeDraggables.indexOf(item);\n    const placeholder = item.getPlaceholderElement();\n    let newPositionReference = activeDraggables[newIndex];\n    // If the item at the new position is the same as the item that is being dragged,\n    // it means that we're trying to restore the item to its initial position. In this\n    // case we should use the next item from the list as the reference.\n    if (newPositionReference === item) {\n      newPositionReference = activeDraggables[newIndex + 1];\n    }\n    // If we didn't find a new position reference, it means that either the item didn't start off\n    // in this container, or that the item requested to be inserted at the end of the list.\n    if (!newPositionReference && (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) && this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n      newPositionReference = activeDraggables[0];\n    }\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      activeDraggables.splice(currentIndex, 1);\n    }\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement.insertBefore(placeholder, element);\n      activeDraggables.splice(newIndex, 0, item);\n    } else {\n      coerceElement(this._element).appendChild(placeholder);\n      activeDraggables.push(item);\n    }\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n    // Note that usually `start` is called together with `enter` when an item goes into a new\n    // container. This will cache item positions, but we need to refresh them since the amount\n    // of items has changed.\n    this._cacheItemPositions();\n  }\n  /** Sets the items that are currently part of the list. */\n  withItems(items) {\n    this._activeDraggables = items.slice();\n    this._cacheItemPositions();\n  }\n  /** Assigns a sort predicate to the strategy. */\n  withSortPredicate(predicate) {\n    this._sortPredicate = predicate;\n  }\n  /** Resets the strategy to its initial state before dragging was started. */\n  reset() {\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => {\n      const rootElement = item.getRootElement();\n      if (rootElement) {\n        const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n        rootElement.style.transform = initialTransform || '';\n      }\n    });\n    this._itemPositions = [];\n    this._activeDraggables = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n    this._previousSwap.overlaps = false;\n  }\n  /**\r\n   * Gets a snapshot of items currently in the list.\r\n   * Can include items that we dragged in from another list.\r\n   */\n  getActiveItemsSnapshot() {\n    return this._activeDraggables;\n  }\n  /** Gets the index of a specific item. */\n  getItemIndex(item) {\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this.orientation === 'horizontal' && this.direction === 'rtl' ? this._itemPositions.slice().reverse() : this._itemPositions;\n    return items.findIndex(currentItem => currentItem.drag === item);\n  }\n  /** Used to notify the strategy that the scroll position has changed. */\n  updateOnScroll(topDifference, leftDifference) {\n    // Since we know the amount that the user has scrolled we can shift all of the\n    // client rectangles ourselves. This is cheaper than re-measuring everything and\n    // we can avoid inconsistent behavior where we might be measuring the element before\n    // its position has changed.\n    this._itemPositions.forEach(({\n      clientRect\n    }) => {\n      adjustClientRect(clientRect, topDifference, leftDifference);\n    });\n    // We need two loops for this, because we want all of the cached\n    // positions to be up-to-date before we re-sort the item.\n    this._itemPositions.forEach(({\n      drag\n    }) => {\n      if (this._dragDropRegistry.isDragging(drag)) {\n        // We need to re-sort the item manually, because the pointer move\n        // events won't be dispatched while the user is scrolling.\n        drag._sortFromLastPointerPosition();\n      }\n    });\n  }\n  /** Refreshes the position cache of the items and sibling containers. */\n  _cacheItemPositions() {\n    const isHorizontal = this.orientation === 'horizontal';\n    this._itemPositions = this._activeDraggables.map(drag => {\n      const elementToMeasure = drag.getVisibleElement();\n      return {\n        drag,\n        offset: 0,\n        initialTransform: elementToMeasure.style.transform || '',\n        clientRect: getMutableClientRect(elementToMeasure)\n      };\n    }).sort((a, b) => {\n      return isHorizontal ? a.clientRect.left - b.clientRect.left : a.clientRect.top - b.clientRect.top;\n    });\n  }\n  /**\r\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\r\n   * @param currentPosition Current position of the item.\r\n   * @param newPosition Position of the item where the current item should be moved.\r\n   * @param delta Direction in which the user is moving.\r\n   */\n  _getItemOffsetPx(currentPosition, newPosition, delta) {\n    const isHorizontal = this.orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top;\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;\n    }\n    return itemOffset;\n  }\n  /**\r\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\r\n   * @param currentIndex Index of the item currently being dragged.\r\n   * @param siblings All of the items in the list.\r\n   * @param delta Direction in which the user is moving.\r\n   */\n  _getSiblingOffsetPx(currentIndex, siblings, delta) {\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n    return siblingOffset;\n  }\n  /**\r\n   * Checks if pointer is entering in the first position\r\n   * @param pointerX Position of the user's pointer along the X axis.\r\n   * @param pointerY Position of the user's pointer along the Y axis.\r\n   */\n  _shouldEnterAsFirstChild(pointerX, pointerY) {\n    if (!this._activeDraggables.length) {\n      return false;\n    }\n    const itemPositions = this._itemPositions;\n    const isHorizontal = this.orientation === 'horizontal';\n    // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n    // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n    const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n    if (reversed) {\n      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n    } else {\n      const firstItemRect = itemPositions[0].clientRect;\n      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n    }\n  }\n  /**\r\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\r\n   * @param item Item that is being sorted.\r\n   * @param pointerX Position of the user's pointer along the X axis.\r\n   * @param pointerY Position of the user's pointer along the Y axis.\r\n   * @param delta Direction in which the user is moving their pointer.\r\n   */\n  _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n    const isHorizontal = this.orientation === 'horizontal';\n    const index = this._itemPositions.findIndex(({\n      drag,\n      clientRect\n    }) => {\n      // Skip the item itself.\n      if (drag === item) {\n        return false;\n      }\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n        // If the user is still hovering over the same item as last time, their cursor hasn't left\n        // the item after we made the swap, and they didn't change the direction in which they're\n        // dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && this._previousSwap.overlaps && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n      return isHorizontal ?\n      // Round these down since most browsers report client rects with\n      // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n      pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n    });\n    return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Proximity, as a ratio to width/height, at which a\r\n * dragged item will affect the drop container.\r\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\r\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\r\n * viewport. The value comes from trying it out manually until it feels right.\r\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\r\n * Reference to a drop list. Used to manipulate or dispose of the container.\r\n */\nclass DropListRef {\n  constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n    this._dragDropRegistry = _dragDropRegistry;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    this.disabled = false;\n    /** Whether sorting items within the list is disabled. */\n    this.sortingDisabled = false;\n    /**\r\n     * Whether auto-scrolling the view when the user\r\n     * moves their pointer close to the edges is disabled.\r\n     */\n    this.autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    this.autoScrollStep = 2;\n    /**\r\n     * Function that is used to determine whether an item\r\n     * is allowed to be moved into a drop container.\r\n     */\n    this.enterPredicate = () => true;\n    /** Function that is used to determine whether an item can be sorted into a particular index. */\n    this.sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n    this.beforeStarted = new Subject();\n    /**\r\n     * Emits when the user has moved a new drag item into this container.\r\n     */\n    this.entered = new Subject();\n    /**\r\n     * Emits when the user removes an item from the container\r\n     * by dragging it into another container.\r\n     */\n    this.exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n    this.dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n    this.sorted = new Subject();\n    /** Emits when a dragging sequence is started in a list connected to the current one. */\n    this.receivingStarted = new Subject();\n    /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n    this.receivingStopped = new Subject();\n    /** Whether an item in the list is being dragged. */\n    this._isDragging = false;\n    /** Draggable items in the container. */\n    this._draggables = [];\n    /** Drop lists that are connected to the current one. */\n    this._siblings = [];\n    /** Connected siblings that currently have a dragged item. */\n    this._activeSiblings = new Set();\n    /** Subscription to the window being scrolled. */\n    this._viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n    this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    /** Horizontal direction in which the list is currently scrolling. */\n    this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n    this._stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n    this._cachedShadowRoot = null;\n    /** Starts the interval that'll auto-scroll the element. */\n    this._startScrollInterval = () => {\n      this._stopScrolling();\n      interval(0, animationFrameScheduler).pipe(takeUntil(this._stopScrollTimers)).subscribe(() => {\n        const node = this._scrollNode;\n        const scrollStep = this.autoScrollStep;\n        if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\n          node.scrollBy(0, -scrollStep);\n        } else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\n          node.scrollBy(0, scrollStep);\n        }\n        if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n          node.scrollBy(-scrollStep, 0);\n        } else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\n          node.scrollBy(scrollStep, 0);\n        }\n      });\n    };\n    this.element = coerceElement(element);\n    this._document = _document;\n    this.withScrollableParents([this.element]);\n    _dragDropRegistry.registerDropContainer(this);\n    this._parentPositions = new ParentPositionTracker(_document);\n    this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n    this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n  }\n  /** Removes the drop list functionality from the DOM element. */\n  dispose() {\n    this._stopScrolling();\n    this._stopScrollTimers.complete();\n    this._viewportScrollSubscription.unsubscribe();\n    this.beforeStarted.complete();\n    this.entered.complete();\n    this.exited.complete();\n    this.dropped.complete();\n    this.sorted.complete();\n    this.receivingStarted.complete();\n    this.receivingStopped.complete();\n    this._activeSiblings.clear();\n    this._scrollNode = null;\n    this._parentPositions.clear();\n    this._dragDropRegistry.removeDropContainer(this);\n  }\n  /** Whether an item from this list is currently being dragged. */\n  isDragging() {\n    return this._isDragging;\n  }\n  /** Starts dragging an item. */\n  start() {\n    this._draggingStarted();\n    this._notifyReceivingSiblings();\n  }\n  /**\r\n   * Attempts to move an item into the container.\r\n   * @param item Item that was moved into the container.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   * @param index Index at which the item entered. If omitted, the container will try to figure it\r\n   *   out automatically.\r\n   */\n  enter(item, pointerX, pointerY, index) {\n    this._draggingStarted();\n    // If sorting is disabled, we want the item to return to its starting\n    // position if the user is returning it to its initial container.\n    if (index == null && this.sortingDisabled) {\n      index = this._draggables.indexOf(item);\n    }\n    this._sortStrategy.enter(item, pointerX, pointerY, index);\n    // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n    // can change when the sort strategy moves the item around inside `enter`.\n    this._cacheParentPositions();\n    // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n    this._notifyReceivingSiblings();\n    this.entered.next({\n      item,\n      container: this,\n      currentIndex: this.getItemIndex(item)\n    });\n  }\n  /**\r\n   * Removes an item from the container after it was dragged into another container by the user.\r\n   * @param item Item that was dragged out.\r\n   */\n  exit(item) {\n    this._reset();\n    this.exited.next({\n      item,\n      container: this\n    });\n  }\n  /**\r\n   * Drops an item into this container.\r\n   * @param item Item being dropped into the container.\r\n   * @param currentIndex Index at which the item should be inserted.\r\n   * @param previousIndex Index of the item when dragging started.\r\n   * @param previousContainer Container from which the item got dragged in.\r\n   * @param isPointerOverContainer Whether the user's pointer was over the\r\n   *    container when the item was dropped.\r\n   * @param distance Distance the user has dragged since the start of the dragging sequence.\r\n   * @param event Event that triggered the dropping sequence.\r\n   *\r\n   * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\r\n   */\n  drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n    this._reset();\n    this.dropped.next({\n      item,\n      currentIndex,\n      previousIndex,\n      container: this,\n      previousContainer,\n      isPointerOverContainer,\n      distance,\n      dropPoint,\n      event\n    });\n  }\n  /**\r\n   * Sets the draggable items that are a part of this list.\r\n   * @param items Items that are a part of this list.\r\n   */\n  withItems(items) {\n    const previousItems = this._draggables;\n    this._draggables = items;\n    items.forEach(item => item._withDropContainer(this));\n    if (this.isDragging()) {\n      const draggedItems = previousItems.filter(item => item.isDragging());\n      // If all of the items being dragged were removed\n      // from the list, abort the current drag sequence.\n      if (draggedItems.every(item => items.indexOf(item) === -1)) {\n        this._reset();\n      } else {\n        this._sortStrategy.withItems(this._draggables);\n      }\n    }\n    return this;\n  }\n  /** Sets the layout direction of the drop list. */\n  withDirection(direction) {\n    this._sortStrategy.direction = direction;\n    return this;\n  }\n  /**\r\n   * Sets the containers that are connected to this one. When two or more containers are\r\n   * connected, the user will be allowed to transfer items between them.\r\n   * @param connectedTo Other containers that the current containers should be connected to.\r\n   */\n  connectedTo(connectedTo) {\n    this._siblings = connectedTo.slice();\n    return this;\n  }\n  /**\r\n   * Sets the orientation of the container.\r\n   * @param orientation New orientation for the container.\r\n   */\n  withOrientation(orientation) {\n    // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n    // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n    this._sortStrategy.orientation = orientation;\n    return this;\n  }\n  /**\r\n   * Sets which parent elements are can be scrolled while the user is dragging.\r\n   * @param elements Elements that can be scrolled.\r\n   */\n  withScrollableParents(elements) {\n    const element = coerceElement(this.element);\n    // We always allow the current element to be scrollable\n    // so we need to ensure that it's in the array.\n    this._scrollableElements = elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n    return this;\n  }\n  /** Gets the scrollable parents that are registered with this drop container. */\n  getScrollableParents() {\n    return this._scrollableElements;\n  }\n  /**\r\n   * Figures out the index of an item in the container.\r\n   * @param item Item whose index should be determined.\r\n   */\n  getItemIndex(item) {\n    return this._isDragging ? this._sortStrategy.getItemIndex(item) : this._draggables.indexOf(item);\n  }\n  /**\r\n   * Whether the list is able to receive the item that\r\n   * is currently being dragged inside a connected drop list.\r\n   */\n  isReceiving() {\n    return this._activeSiblings.size > 0;\n  }\n  /**\r\n   * Sorts an item inside the container based on its position.\r\n   * @param item Item to be sorted.\r\n   * @param pointerX Position of the item along the X axis.\r\n   * @param pointerY Position of the item along the Y axis.\r\n   * @param pointerDelta Direction in which the pointer is moving along each axis.\r\n   */\n  _sortItem(item, pointerX, pointerY, pointerDelta) {\n    // Don't sort the item if sorting is disabled or it's out of range.\n    if (this.sortingDisabled || !this._clientRect || !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n      return;\n    }\n    const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n    if (result) {\n      this.sorted.next({\n        previousIndex: result.previousIndex,\n        currentIndex: result.currentIndex,\n        container: this,\n        item\n      });\n    }\n  }\n  /**\r\n   * Checks whether the user's pointer is close to the edges of either the\r\n   * viewport or the drop list and starts the auto-scroll sequence.\r\n   * @param pointerX User's pointer position along the x axis.\r\n   * @param pointerY User's pointer position along the y axis.\r\n   */\n  _startScrollingIfNecessary(pointerX, pointerY) {\n    if (this.autoScrollDisabled) {\n      return;\n    }\n    let scrollNode;\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    // Check whether we should start scrolling any of the parent containers.\n    this._parentPositions.positions.forEach((position, element) => {\n      // We have special handling for the `document` below. Also this would be\n      // nicer with a  for...of loop, but it requires changing a compiler flag.\n      if (element === this._document || !position.clientRect || scrollNode) {\n        return;\n      }\n      if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n        if (verticalScrollDirection || horizontalScrollDirection) {\n          scrollNode = element;\n        }\n      }\n    });\n    // Otherwise check if we can start scrolling the viewport.\n    if (!verticalScrollDirection && !horizontalScrollDirection) {\n      const {\n        width,\n        height\n      } = this._viewportRuler.getViewportSize();\n      const clientRect = {\n        width,\n        height,\n        top: 0,\n        right: width,\n        bottom: height,\n        left: 0\n      };\n      verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n      horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n      scrollNode = window;\n    }\n    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection || horizontalScrollDirection !== this._horizontalScrollDirection || scrollNode !== this._scrollNode)) {\n      this._verticalScrollDirection = verticalScrollDirection;\n      this._horizontalScrollDirection = horizontalScrollDirection;\n      this._scrollNode = scrollNode;\n      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n        this._ngZone.runOutsideAngular(this._startScrollInterval);\n      } else {\n        this._stopScrolling();\n      }\n    }\n  }\n  /** Stops any currently-running auto-scroll sequences. */\n  _stopScrolling() {\n    this._stopScrollTimers.next();\n  }\n  /** Starts the dragging sequence within the list. */\n  _draggingStarted() {\n    const styles = coerceElement(this.element).style;\n    this.beforeStarted.next();\n    this._isDragging = true;\n    // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n    // scrolling. The browser seems to round the value based on the snapping points which means\n    // that we can't increment/decrement the scroll position.\n    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n    styles.scrollSnapType = styles.msScrollSnapType = 'none';\n    this._sortStrategy.start(this._draggables);\n    this._cacheParentPositions();\n    this._viewportScrollSubscription.unsubscribe();\n    this._listenToScrollEvents();\n  }\n  /** Caches the positions of the configured scrollable parents. */\n  _cacheParentPositions() {\n    const element = coerceElement(this.element);\n    this._parentPositions.cache(this._scrollableElements);\n    // The list element is always in the `scrollableElements`\n    // so we can take advantage of the cached `ClientRect`.\n    this._clientRect = this._parentPositions.positions.get(element).clientRect;\n  }\n  /** Resets the container to its initial state. */\n  _reset() {\n    this._isDragging = false;\n    const styles = coerceElement(this.element).style;\n    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n    this._siblings.forEach(sibling => sibling._stopReceiving(this));\n    this._sortStrategy.reset();\n    this._stopScrolling();\n    this._viewportScrollSubscription.unsubscribe();\n    this._parentPositions.clear();\n  }\n  /**\r\n   * Checks whether the user's pointer is positioned over the container.\r\n   * @param x Pointer position along the X axis.\r\n   * @param y Pointer position along the Y axis.\r\n   */\n  _isOverContainer(x, y) {\n    return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n  }\n  /**\r\n   * Figures out whether an item should be moved into a sibling\r\n   * drop container, based on its current position.\r\n   * @param item Drag item that is being moved.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\n  _getSiblingContainerFromPosition(item, x, y) {\n    return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n  }\n  /**\r\n   * Checks whether the drop list can receive the passed-in item.\r\n   * @param item Item that is being dragged into the list.\r\n   * @param x Position of the item along the X axis.\r\n   * @param y Position of the item along the Y axis.\r\n   */\n  _canReceive(item, x, y) {\n    if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n      return false;\n    }\n    const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n    // If there's no element at the pointer position, then\n    // the client rect is probably scrolled out of the view.\n    if (!elementFromPoint) {\n      return false;\n    }\n    const nativeElement = coerceElement(this.element);\n    // The `ClientRect`, that we're using to find the container over which the user is\n    // hovering, doesn't give us any information on whether the element has been scrolled\n    // out of the view or whether it's overlapping with other containers. This means that\n    // we could end up transferring the item into a container that's invisible or is positioned\n    // below another one. We use the result from `elementFromPoint` to get the top-most element\n    // at the pointer position and to find whether it's one of the intersecting drop containers.\n    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n  }\n  /**\r\n   * Called by one of the connected drop lists when a dragging sequence has started.\r\n   * @param sibling Sibling in which dragging has started.\r\n   */\n  _startReceiving(sibling, items) {\n    const activeSiblings = this._activeSiblings;\n    if (!activeSiblings.has(sibling) && items.every(item => {\n      // Note that we have to add an exception to the `enterPredicate` for items that started off\n      // in this drop list. The drag ref has logic that allows an item to return to its initial\n      // container, if it has left the initial container and none of the connected containers\n      // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n      return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n    })) {\n      activeSiblings.add(sibling);\n      this._cacheParentPositions();\n      this._listenToScrollEvents();\n      this.receivingStarted.next({\n        initiator: sibling,\n        receiver: this,\n        items\n      });\n    }\n  }\n  /**\r\n   * Called by a connected drop list when dragging has stopped.\r\n   * @param sibling Sibling whose dragging has stopped.\r\n   */\n  _stopReceiving(sibling) {\n    this._activeSiblings.delete(sibling);\n    this._viewportScrollSubscription.unsubscribe();\n    this.receivingStopped.next({\n      initiator: sibling,\n      receiver: this\n    });\n  }\n  /**\r\n   * Starts listening to scroll events on the viewport.\r\n   * Used for updating the internal state of the list.\r\n   */\n  _listenToScrollEvents() {\n    this._viewportScrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(event => {\n      if (this.isDragging()) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n          this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n        }\n      } else if (this.isReceiving()) {\n        this._cacheParentPositions();\n      }\n    });\n  }\n  /**\r\n   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\r\n   * than saving it in property directly on init, because we want to resolve it as late as possible\r\n   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\r\n   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\r\n   */\n  _getShadowRoot() {\n    if (!this._cachedShadowRoot) {\n      const shadowRoot = _getShadowRoot(coerceElement(this.element));\n      this._cachedShadowRoot = shadowRoot || this._document;\n    }\n    return this._cachedShadowRoot;\n  }\n  /** Notifies any siblings that may potentially receive the item. */\n  _notifyReceivingSiblings() {\n    const draggedItems = this._sortStrategy.getActiveItemsSnapshot().filter(item => item.isDragging());\n    this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n  }\n}\n/**\r\n * Gets whether the vertical auto-scroll direction of a node.\r\n * @param clientRect Dimensions of the node.\r\n * @param pointerY Position of the user's pointer along the y axis.\r\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n  const {\n    top,\n    bottom,\n    height\n  } = clientRect;\n  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n    return 1 /* AutoScrollVerticalDirection.UP */;\n  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n    return 2 /* AutoScrollVerticalDirection.DOWN */;\n  }\n\n  return 0 /* AutoScrollVerticalDirection.NONE */;\n}\n/**\r\n * Gets whether the horizontal auto-scroll direction of a node.\r\n * @param clientRect Dimensions of the node.\r\n * @param pointerX Position of the user's pointer along the x axis.\r\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n  const {\n    left,\n    right,\n    width\n  } = clientRect;\n  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n    return 1 /* AutoScrollHorizontalDirection.LEFT */;\n  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n    return 2 /* AutoScrollHorizontalDirection.RIGHT */;\n  }\n\n  return 0 /* AutoScrollHorizontalDirection.NONE */;\n}\n/**\r\n * Gets the directions in which an element node should be scrolled,\r\n * assuming that the user's pointer is already within it scrollable region.\r\n * @param element Element for which we should calculate the scroll direction.\r\n * @param clientRect Bounding client rectangle of the element.\r\n * @param pointerX Position of the user's pointer along the x axis.\r\n * @param pointerY Position of the user's pointer along the y axis.\r\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n  let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n  let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n  // Note that we here we do some extra checks for whether the element is actually scrollable in\n  // a certain direction and we only assign the scroll direction if it is. We do this so that we\n  // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n  // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n  if (computedVertical) {\n    const scrollTop = element.scrollTop;\n    if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\n      if (scrollTop > 0) {\n        verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\n      }\n    } else if (element.scrollHeight - scrollTop > element.clientHeight) {\n      verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\n    }\n  }\n\n  if (computedHorizontal) {\n    const scrollLeft = element.scrollLeft;\n    if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n      if (scrollLeft > 0) {\n        horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\n      }\n    } else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n      horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\n    }\n  }\n\n  return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * @docs-private\r\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n  constructor(_ngZone, _document) {\n    this._ngZone = _ngZone;\n    /** Registered drop container instances. */\n    this._dropInstances = new Set();\n    /** Registered drag item instances. */\n    this._dragInstances = new Set();\n    /** Drag item instances that are currently being dragged. */\n    this._activeDragInstances = [];\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n    this._globalListeners = new Map();\n    /**\r\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\r\n     * because it'll be called a lot and we don't want to create a new function every time.\r\n     */\n    this._draggingPredicate = item => item.isDragging();\n    /**\r\n     * Emits the `touchmove` or `mousemove` events that are dispatched\r\n     * while the user is dragging a drag item instance.\r\n     */\n    this.pointerMove = new Subject();\n    /**\r\n     * Emits the `touchend` or `mouseup` events that are dispatched\r\n     * while the user is dragging a drag item instance.\r\n     */\n    this.pointerUp = new Subject();\n    /**\r\n     * Emits when the viewport has been scrolled while the user is dragging an item.\r\n     * @deprecated To be turned into a private member. Use the `scrolled` method instead.\r\n     * @breaking-change 13.0.0\r\n     */\n    this.scroll = new Subject();\n    /**\r\n     * Event listener that will prevent the default browser action while the user is dragging.\r\n     * @param event Event whose default action should be prevented.\r\n     */\n    this._preventDefaultWhileDragging = event => {\n      if (this._activeDragInstances.length > 0) {\n        event.preventDefault();\n      }\n    };\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n    this._persistentTouchmoveListener = event => {\n      if (this._activeDragInstances.length > 0) {\n        // Note that we only want to prevent the default action after dragging has actually started.\n        // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n        // but it could be pushed back if the user has set up a drag delay or threshold.\n        if (this._activeDragInstances.some(this._draggingPredicate)) {\n          event.preventDefault();\n        }\n        this.pointerMove.next(event);\n      }\n    };\n    this._document = _document;\n  }\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop) {\n    if (!this._dropInstances.has(drop)) {\n      this._dropInstances.add(drop);\n    }\n  }\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag) {\n    this._dragInstances.add(drag);\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n      });\n    }\n  }\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop) {\n    this._dropInstances.delete(drop);\n  }\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n    }\n  }\n  /**\r\n   * Starts the dragging sequence for a drag instance.\r\n   * @param drag Drag instance which is being dragged.\r\n   * @param event Event that initiated the dragging.\r\n   */\n  startDragging(drag, event) {\n    // Do not process the same drag twice to avoid memory leaks and redundant listeners\n    if (this._activeDragInstances.indexOf(drag) > -1) {\n      return;\n    }\n    this._activeDragInstances.push(drag);\n    if (this._activeDragInstances.length === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners.set(isTouchEvent ? 'touchend' : 'mouseup', {\n        handler: e => this.pointerUp.next(e),\n        options: true\n      }).set('scroll', {\n        handler: e => this.scroll.next(e),\n        // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n        // the document. See https://github.com/angular/components/issues/17144.\n        options: true\n      })\n      // Preventing the default action on `mousemove` isn't enough to disable text selection\n      // on Safari so we need to prevent the selection event as well. Alternatively this can\n      // be done by setting `user-select: none` on the `body`, however it has causes a style\n      // recalculation which can be expensive on pages with a lot of elements.\n      .set('selectstart', {\n        handler: this._preventDefaultWhileDragging,\n        options: activeCapturingEventOptions\n      });\n      // We don't have to bind a move event for touch drag sequences, because\n      // we already have a persistent global one bound from `registerDragItem`.\n      if (!isTouchEvent) {\n        this._globalListeners.set('mousemove', {\n          handler: e => this.pointerMove.next(e),\n          options: activeCapturingEventOptions\n        });\n      }\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag) {\n    const index = this._activeDragInstances.indexOf(drag);\n    if (index > -1) {\n      this._activeDragInstances.splice(index, 1);\n      if (this._activeDragInstances.length === 0) {\n        this._clearGlobalListeners();\n      }\n    }\n  }\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag) {\n    return this._activeDragInstances.indexOf(drag) > -1;\n  }\n  /**\r\n   * Gets a stream that will emit when any element on the page is scrolled while an item is being\r\n   * dragged.\r\n   * @param shadowRoot Optional shadow root that the current dragging sequence started from.\r\n   *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\r\n   *   be used to include an additional top-level listener at the shadow root level.\r\n   */\n  scrolled(shadowRoot) {\n    const streams = [this.scroll];\n    if (shadowRoot && shadowRoot !== this._document) {\n      // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n      // because we want to guarantee that the event is bound outside of the `NgZone`. With\n      // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n      streams.push(new Observable(observer => {\n        return this._ngZone.runOutsideAngular(() => {\n          const eventOptions = true;\n          const callback = event => {\n            if (this._activeDragInstances.length) {\n              observer.next(event);\n            }\n          };\n          shadowRoot.addEventListener('scroll', callback, eventOptions);\n          return () => {\n            shadowRoot.removeEventListener('scroll', callback, eventOptions);\n          };\n        });\n      }));\n    }\n    return merge(...streams);\n  }\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n  /** Clears out the global event listeners from the `document`. */\n  _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n    this._globalListeners.clear();\n  }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) {\n  return new (t || DragDropRegistry)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(DOCUMENT));\n};\nDragDropRegistry.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DragDropRegistry,\n  factory: DragDropRegistry.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragDropRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n  dragStartThreshold: 5,\n  pointerDirectionChangeThreshold: 5\n};\n/**\r\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\r\n */\nclass DragDrop {\n  constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._viewportRuler = _viewportRuler;\n    this._dragDropRegistry = _dragDropRegistry;\n  }\n  /**\r\n   * Turns an element into a draggable item.\r\n   * @param element Element to which to attach the dragging functionality.\r\n   * @param config Object used to configure the dragging behavior.\r\n   */\n  createDrag(element, config = DEFAULT_CONFIG) {\n    return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n  }\n  /**\r\n   * Turns an element into a drop list.\r\n   * @param element Element to which to attach the drop list functionality.\r\n   */\n  createDropList(element) {\n    return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n  }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) {\n  return new (t || DragDrop)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ViewportRuler), i0.ɵɵinject(DragDropRegistry));\n};\nDragDrop.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DragDrop,\n  factory: DragDrop.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragDrop, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1.ViewportRuler\n    }, {\n      type: DragDropRegistry\n    }];\n  }, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\r\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\r\n * to avoid circular imports.\r\n * @docs-private\r\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\r\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\r\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\r\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\r\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\r\n * from `cdkDropList`.\r\n */\nclass CdkDropListGroup {\n  constructor() {\n    /** Drop lists registered inside the group. */\n    this._items = new Set();\n    this._disabled = false;\n  }\n  /** Whether starting a dragging sequence from inside this group is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) {\n  return new (t || CdkDropListGroup)();\n};\nCdkDropListGroup.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDropListGroup,\n  selectors: [[\"\", \"cdkDropListGroup\", \"\"]],\n  inputs: {\n    disabled: [\"cdkDropListGroupDisabled\", \"disabled\"]\n  },\n  exportAs: [\"cdkDropListGroup\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DROP_LIST_GROUP,\n    useExisting: CdkDropListGroup\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDropListGroup, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDropListGroup]',\n      exportAs: 'cdkDropListGroup',\n      standalone: true,\n      providers: [{\n        provide: CDK_DROP_LIST_GROUP,\n        useExisting: CdkDropListGroup\n      }]\n    }]\n  }], null, {\n    disabled: [{\n      type: Input,\n      args: ['cdkDropListGroupDisabled']\n    }]\n  });\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Injection token that can be used to configure the\r\n * behavior of the drag&drop-related components.\r\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Asserts that a particular node is an element.\r\n * @param node Node to be checked.\r\n * @param name Name to attach to the error message.\r\n */\nfunction assertElementNode(node, name) {\n  if (node.nodeType !== 1) {\n    throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\r\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\r\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n  /** Whether starting a dragging sequence from this container is disabled. */\n  get disabled() {\n    return this._disabled || !!this._group && this._group.disabled;\n  }\n  set disabled(value) {\n    // Usually we sync the directive and ref state right before dragging starts, in order to have\n    // a single point of failure and to avoid having to use setters for everything. `disabled` is\n    // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n    // the user in a disabled state, so we also need to sync it as it's being set.\n    this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n  }\n  constructor( /** Element that the drop list is attached to. */\n  element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n    this.element = element;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._scrollDispatcher = _scrollDispatcher;\n    this._dir = _dir;\n    this._group = _group;\n    /** Emits when the list has been destroyed. */\n    this._destroyed = new Subject();\n    /**\r\n     * Other draggable containers that this container is connected to and into which the\r\n     * container's items can be transferred. Can either be references to other drop containers,\r\n     * or their unique IDs.\r\n     */\n    this.connectedTo = [];\n    /**\r\n     * Unique ID for the drop zone. Can be used as a reference\r\n     * in the `connectedTo` of another `CdkDropList`.\r\n     */\n    this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n    /**\r\n     * Function that is used to determine whether an item\r\n     * is allowed to be moved into a drop container.\r\n     */\n    this.enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n    this.sortPredicate = () => true;\n    /** Emits when the user drops an item inside the container. */\n    this.dropped = new EventEmitter();\n    /**\r\n     * Emits when the user has moved a new drag item into this container.\r\n     */\n    this.entered = new EventEmitter();\n    /**\r\n     * Emits when the user removes an item from the container\r\n     * by dragging it into another container.\r\n     */\n    this.exited = new EventEmitter();\n    /** Emits as the user is swapping items while actively dragging. */\n    this.sorted = new EventEmitter();\n    /**\r\n     * Keeps track of the items that are registered with this container. Historically we used to\r\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\r\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\r\n     * correctly. What we do instead is to have the items register themselves with the container\r\n     * and then we sort them based on their position in the DOM.\r\n     */\n    this._unsortedItems = new Set();\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(element.nativeElement, 'cdkDropList');\n    }\n    this._dropListRef = dragDrop.createDropList(element);\n    this._dropListRef.data = this;\n    if (config) {\n      this._assignDefaults(config);\n    }\n    this._dropListRef.enterPredicate = (drag, drop) => {\n      return this.enterPredicate(drag.data, drop.data);\n    };\n    this._dropListRef.sortPredicate = (index, drag, drop) => {\n      return this.sortPredicate(index, drag.data, drop.data);\n    };\n    this._setupInputSyncSubscription(this._dropListRef);\n    this._handleEvents(this._dropListRef);\n    CdkDropList._dropLists.push(this);\n    if (_group) {\n      _group._items.add(this);\n    }\n  }\n  /** Registers an items with the drop list. */\n  addItem(item) {\n    this._unsortedItems.add(item);\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef();\n    }\n  }\n  /** Removes an item from the drop list. */\n  removeItem(item) {\n    this._unsortedItems.delete(item);\n    if (this._dropListRef.isDragging()) {\n      this._syncItemsWithRef();\n    }\n  }\n  /** Gets the registered items in the list, sorted by their position in the DOM. */\n  getSortedItems() {\n    return Array.from(this._unsortedItems).sort((a, b) => {\n      const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n      // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n      // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n      // tslint:disable-next-line:no-bitwise\n      return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n    });\n  }\n  ngOnDestroy() {\n    const index = CdkDropList._dropLists.indexOf(this);\n    if (index > -1) {\n      CdkDropList._dropLists.splice(index, 1);\n    }\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n    this._unsortedItems.clear();\n    this._dropListRef.dispose();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n  _setupInputSyncSubscription(ref) {\n    if (this._dir) {\n      this._dir.change.pipe(startWith(this._dir.value), takeUntil(this._destroyed)).subscribe(value => ref.withDirection(value));\n    }\n    ref.beforeStarted.subscribe(() => {\n      const siblings = coerceArray(this.connectedTo).map(drop => {\n        if (typeof drop === 'string') {\n          const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n          if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n          }\n          return correspondingDropList;\n        }\n        return drop;\n      });\n      if (this._group) {\n        this._group._items.forEach(drop => {\n          if (siblings.indexOf(drop) === -1) {\n            siblings.push(drop);\n          }\n        });\n      }\n      // Note that we resolve the scrollable parents here so that we delay the resolution\n      // as long as possible, ensuring that the element is in its final place in the DOM.\n      if (!this._scrollableParentsResolved) {\n        const scrollableParents = this._scrollDispatcher.getAncestorScrollContainers(this.element).map(scrollable => scrollable.getElementRef().nativeElement);\n        this._dropListRef.withScrollableParents(scrollableParents);\n        // Only do this once since it involves traversing the DOM and the parents\n        // shouldn't be able to change without the drop list being destroyed.\n        this._scrollableParentsResolved = true;\n      }\n      ref.disabled = this.disabled;\n      ref.lockAxis = this.lockAxis;\n      ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n      ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n      ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n      ref.connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef)).withOrientation(this.orientation);\n    });\n  }\n  /** Handles events from the underlying DropListRef. */\n  _handleEvents(ref) {\n    ref.beforeStarted.subscribe(() => {\n      this._syncItemsWithRef();\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.entered.subscribe(event => {\n      this.entered.emit({\n        container: this,\n        item: event.item.data,\n        currentIndex: event.currentIndex\n      });\n    });\n    ref.exited.subscribe(event => {\n      this.exited.emit({\n        container: this,\n        item: event.item.data\n      });\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.sorted.subscribe(event => {\n      this.sorted.emit({\n        previousIndex: event.previousIndex,\n        currentIndex: event.currentIndex,\n        container: this,\n        item: event.item.data\n      });\n    });\n    ref.dropped.subscribe(dropEvent => {\n      this.dropped.emit({\n        previousIndex: dropEvent.previousIndex,\n        currentIndex: dropEvent.currentIndex,\n        previousContainer: dropEvent.previousContainer.data,\n        container: dropEvent.container.data,\n        item: dropEvent.item.data,\n        isPointerOverContainer: dropEvent.isPointerOverContainer,\n        distance: dropEvent.distance,\n        dropPoint: dropEvent.dropPoint,\n        event: dropEvent.event\n      });\n      // Mark for check since all of these events run outside of change\n      // detection and we're not guaranteed for something else to have triggered it.\n      this._changeDetectorRef.markForCheck();\n    });\n    merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n  /** Assigns the default input values based on a provided config object. */\n  _assignDefaults(config) {\n    const {\n      lockAxis,\n      draggingDisabled,\n      sortingDisabled,\n      listAutoScrollDisabled,\n      listOrientation\n    } = config;\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n    this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n    this.orientation = listOrientation || 'vertical';\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n  }\n  /** Syncs up the registered drag items with underlying drop list ref. */\n  _syncItemsWithRef() {\n    this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n  }\n}\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ɵfac = function CdkDropList_Factory(t) {\n  return new (t || CdkDropList)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DragDrop), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.ScrollDispatcher), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), i0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8));\n};\nCdkDropList.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDropList,\n  selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]],\n  hostAttrs: [1, \"cdk-drop-list\"],\n  hostVars: 7,\n  hostBindings: function CdkDropList_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"id\", ctx.id);\n      i0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    }\n  },\n  inputs: {\n    connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"],\n    data: [\"cdkDropListData\", \"data\"],\n    orientation: [\"cdkDropListOrientation\", \"orientation\"],\n    id: \"id\",\n    lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"],\n    disabled: [\"cdkDropListDisabled\", \"disabled\"],\n    sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"],\n    enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"],\n    sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"],\n    autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"],\n    autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"]\n  },\n  outputs: {\n    dropped: \"cdkDropListDropped\",\n    entered: \"cdkDropListEntered\",\n    exited: \"cdkDropListExited\",\n    sorted: \"cdkDropListSorted\"\n  },\n  exportAs: [\"cdkDropList\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([\n  // Prevent child drop lists from picking up the same group as their parent.\n  {\n    provide: CDK_DROP_LIST_GROUP,\n    useValue: undefined\n  }, {\n    provide: CDK_DROP_LIST,\n    useExisting: CdkDropList\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDropList, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDropList], cdk-drop-list',\n      exportAs: 'cdkDropList',\n      standalone: true,\n      providers: [\n      // Prevent child drop lists from picking up the same group as their parent.\n      {\n        provide: CDK_DROP_LIST_GROUP,\n        useValue: undefined\n      }, {\n        provide: CDK_DROP_LIST,\n        useExisting: CdkDropList\n      }],\n      host: {\n        'class': 'cdk-drop-list',\n        '[attr.id]': 'id',\n        '[class.cdk-drop-list-disabled]': 'disabled',\n        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: DragDrop\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1.ScrollDispatcher\n    }, {\n      type: i3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: CdkDropListGroup,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DROP_LIST_GROUP]\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_CONFIG]\n      }]\n    }];\n  }, {\n    connectedTo: [{\n      type: Input,\n      args: ['cdkDropListConnectedTo']\n    }],\n    data: [{\n      type: Input,\n      args: ['cdkDropListData']\n    }],\n    orientation: [{\n      type: Input,\n      args: ['cdkDropListOrientation']\n    }],\n    id: [{\n      type: Input\n    }],\n    lockAxis: [{\n      type: Input,\n      args: ['cdkDropListLockAxis']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkDropListDisabled']\n    }],\n    sortingDisabled: [{\n      type: Input,\n      args: ['cdkDropListSortingDisabled']\n    }],\n    enterPredicate: [{\n      type: Input,\n      args: ['cdkDropListEnterPredicate']\n    }],\n    sortPredicate: [{\n      type: Input,\n      args: ['cdkDropListSortPredicate']\n    }],\n    autoScrollDisabled: [{\n      type: Input,\n      args: ['cdkDropListAutoScrollDisabled']\n    }],\n    autoScrollStep: [{\n      type: Input,\n      args: ['cdkDropListAutoScrollStep']\n    }],\n    dropped: [{\n      type: Output,\n      args: ['cdkDropListDropped']\n    }],\n    entered: [{\n      type: Output,\n      args: ['cdkDropListEntered']\n    }],\n    exited: [{\n      type: Output,\n      args: ['cdkDropListExited']\n    }],\n    sorted: [{\n      type: Output,\n      args: ['cdkDropListSorted']\n    }]\n  });\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\r\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n  /** Whether starting to drag through this handle is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._stateChanges.next(this);\n  }\n  constructor(element, parentDrag) {\n    this.element = element;\n    /** Emits when the state of the handle has changed. */\n    this._stateChanges = new Subject();\n    this._disabled = false;\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      assertElementNode(element.nativeElement, 'cdkDragHandle');\n    }\n    this._parentDrag = parentDrag;\n  }\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) {\n  return new (t || CdkDragHandle)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n};\nCdkDragHandle.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDragHandle,\n  selectors: [[\"\", \"cdkDragHandle\", \"\"]],\n  hostAttrs: [1, \"cdk-drag-handle\"],\n  inputs: {\n    disabled: [\"cdkDragHandleDisabled\", \"disabled\"]\n  },\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_HANDLE,\n    useExisting: CdkDragHandle\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDragHandle, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDragHandle]',\n      standalone: true,\n      host: {\n        'class': 'cdk-drag-handle'\n      },\n      providers: [{\n        provide: CDK_DRAG_HANDLE,\n        useExisting: CdkDragHandle\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_DRAG_PARENT]\n      }, {\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }];\n  }, {\n    disabled: [{\n      type: Input,\n      args: ['cdkDragHandleDisabled']\n    }]\n  });\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\r\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\r\n * Element that will be used as a template for the placeholder of a CdkDrag when\r\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\r\n */\nclass CdkDragPlaceholder {\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n  }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) {\n  return new (t || CdkDragPlaceholder)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\nCdkDragPlaceholder.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDragPlaceholder,\n  selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]],\n  inputs: {\n    data: \"data\"\n  },\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PLACEHOLDER,\n    useExisting: CdkDragPlaceholder\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkDragPlaceholder]',\n      standalone: true,\n      providers: [{\n        provide: CDK_DRAG_PLACEHOLDER,\n        useExisting: CdkDragPlaceholder\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\r\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\r\n * Element that will be used as a template for the preview\r\n * of a CdkDrag when it is being dragged.\r\n */\nclass CdkDragPreview {\n  /** Whether the preview should preserve the same size as the item that is being dragged. */\n  get matchSize() {\n    return this._matchSize;\n  }\n  set matchSize(value) {\n    this._matchSize = coerceBooleanProperty(value);\n  }\n  constructor(templateRef) {\n    this.templateRef = templateRef;\n    this._matchSize = false;\n  }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) {\n  return new (t || CdkDragPreview)(i0.ɵɵdirectiveInject(i0.TemplateRef));\n};\nCdkDragPreview.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDragPreview,\n  selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]],\n  inputs: {\n    data: \"data\",\n    matchSize: \"matchSize\"\n  },\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PREVIEW,\n    useExisting: CdkDragPreview\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDragPreview, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[cdkDragPreview]',\n      standalone: true,\n      providers: [{\n        provide: CDK_DRAG_PREVIEW,\n        useExisting: CdkDragPreview\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    matchSize: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n  /** Whether starting to drag this element is disabled. */\n  get disabled() {\n    return this._disabled || this.dropContainer && this.dropContainer.disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._dragRef.disabled = this._disabled;\n  }\n  constructor( /** Element that the draggable is attached to. */\n  element, /** Droppable container that the draggable is a part of. */\n  dropContainer,\n  /**\r\n   * @deprecated `_document` parameter no longer being used and will be removed.\r\n   * @breaking-change 12.0.0\r\n   */\n  _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n    this.element = element;\n    this.dropContainer = dropContainer;\n    this._ngZone = _ngZone;\n    this._viewContainerRef = _viewContainerRef;\n    this._dir = _dir;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._selfHandle = _selfHandle;\n    this._parentDrag = _parentDrag;\n    this._destroyed = new Subject();\n    /** Emits when the user starts dragging the item. */\n    this.started = new EventEmitter();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    this.released = new EventEmitter();\n    /** Emits when the user stops dragging an item in the container. */\n    this.ended = new EventEmitter();\n    /** Emits when the user has moved the item into a new container. */\n    this.entered = new EventEmitter();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    this.exited = new EventEmitter();\n    /** Emits when the user drops the item inside a container. */\n    this.dropped = new EventEmitter();\n    /**\r\n     * Emits as the user is dragging the item. Use with caution,\r\n     * because this event will fire for every pixel that the user has dragged.\r\n     */\n    this.moved = new Observable(observer => {\n      const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n        source: this,\n        pointerPosition: movedEvent.pointerPosition,\n        event: movedEvent.event,\n        delta: movedEvent.delta,\n        distance: movedEvent.distance\n      }))).subscribe(observer);\n      return () => {\n        subscription.unsubscribe();\n      };\n    });\n    this._dragRef = dragDrop.createDrag(element, {\n      dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n      pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ? config.pointerDirectionChangeThreshold : 5,\n      zIndex: config?.zIndex\n    });\n    this._dragRef.data = this;\n    // We have to keep track of the drag instances in order to be able to match an element to\n    // a drag instance. We can't go through the global registry of `DragRef`, because the root\n    // element could be different.\n    CdkDrag._dragInstances.push(this);\n    if (config) {\n      this._assignDefaults(config);\n    }\n    // Note that usually the container is assigned when the drop list is picks up the item, but in\n    // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n    // where there are no items on the first change detection pass, but the items get picked up as\n    // soon as the user triggers another pass by dragging. This is a problem, because the item would\n    // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n    // is too late since the two modes save different kinds of information. We work around it by\n    // assigning the drop container both from here and the list.\n    if (dropContainer) {\n      this._dragRef._withDropContainer(dropContainer._dropListRef);\n      dropContainer.addItem(this);\n    }\n    this._syncInputs(this._dragRef);\n    this._handleEvents(this._dragRef);\n  }\n  /**\r\n   * Returns the element that is being used as a placeholder\r\n   * while the current element is being dragged.\r\n   */\n  getPlaceholderElement() {\n    return this._dragRef.getPlaceholderElement();\n  }\n  /** Returns the root draggable element. */\n  getRootElement() {\n    return this._dragRef.getRootElement();\n  }\n  /** Resets a standalone drag item to its initial position. */\n  reset() {\n    this._dragRef.reset();\n  }\n  /**\r\n   * Gets the pixel coordinates of the draggable outside of a drop container.\r\n   */\n  getFreeDragPosition() {\n    return this._dragRef.getFreeDragPosition();\n  }\n  /**\r\n   * Sets the current position in pixels the draggable outside of a drop container.\r\n   * @param value New position to be set.\r\n   */\n  setFreeDragPosition(value) {\n    this._dragRef.setFreeDragPosition(value);\n  }\n  ngAfterViewInit() {\n    // Normally this isn't in the zone, but it can cause major performance regressions for apps\n    // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n    this._ngZone.runOutsideAngular(() => {\n      // We need to wait for the zone to stabilize, in order for the reference\n      // element to be in the proper place in the DOM. This is mostly relevant\n      // for draggable elements inside portals since they get stamped out in\n      // their original DOM position and then they get transferred to the portal.\n      this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n        this._updateRootElement();\n        this._setupHandlesListener();\n        if (this.freeDragPosition) {\n          this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n      });\n    });\n  }\n  ngOnChanges(changes) {\n    const rootSelectorChange = changes['rootElementSelector'];\n    const positionChange = changes['freeDragPosition'];\n    // We don't have to react to the first change since it's being\n    // handled in `ngAfterViewInit` where it needs to be deferred.\n    if (rootSelectorChange && !rootSelectorChange.firstChange) {\n      this._updateRootElement();\n    }\n    // Skip the first change since it's being handled in `ngAfterViewInit`.\n    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n      this._dragRef.setFreeDragPosition(this.freeDragPosition);\n    }\n  }\n  ngOnDestroy() {\n    if (this.dropContainer) {\n      this.dropContainer.removeItem(this);\n    }\n    const index = CdkDrag._dragInstances.indexOf(this);\n    if (index > -1) {\n      CdkDrag._dragInstances.splice(index, 1);\n    }\n    // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n    this._ngZone.runOutsideAngular(() => {\n      this._destroyed.next();\n      this._destroyed.complete();\n      this._dragRef.dispose();\n    });\n  }\n  /** Syncs the root element with the `DragRef`. */\n  _updateRootElement() {\n    const element = this.element.nativeElement;\n    let rootElement = element;\n    if (this.rootElementSelector) {\n      rootElement = element.closest !== undefined ? element.closest(this.rootElementSelector) :\n      // Comment tag doesn't have closest method, so use parent's one.\n      element.parentElement?.closest(this.rootElementSelector);\n    }\n    if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      assertElementNode(rootElement, 'cdkDrag');\n    }\n    this._dragRef.withRootElement(rootElement || element);\n  }\n  /** Gets the boundary element, based on the `boundaryElement` value. */\n  _getBoundaryElement() {\n    const boundary = this.boundaryElement;\n    if (!boundary) {\n      return null;\n    }\n    if (typeof boundary === 'string') {\n      return this.element.nativeElement.closest(boundary);\n    }\n    return coerceElement(boundary);\n  }\n  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n  _syncInputs(ref) {\n    ref.beforeStarted.subscribe(() => {\n      if (!ref.isDragging()) {\n        const dir = this._dir;\n        const dragStartDelay = this.dragStartDelay;\n        const placeholder = this._placeholderTemplate ? {\n          template: this._placeholderTemplate.templateRef,\n          context: this._placeholderTemplate.data,\n          viewContainer: this._viewContainerRef\n        } : null;\n        const preview = this._previewTemplate ? {\n          template: this._previewTemplate.templateRef,\n          context: this._previewTemplate.data,\n          matchSize: this._previewTemplate.matchSize,\n          viewContainer: this._viewContainerRef\n        } : null;\n        ref.disabled = this.disabled;\n        ref.lockAxis = this.lockAxis;\n        ref.dragStartDelay = typeof dragStartDelay === 'object' && dragStartDelay ? dragStartDelay : coerceNumberProperty(dragStartDelay);\n        ref.constrainPosition = this.constrainPosition;\n        ref.previewClass = this.previewClass;\n        ref.withBoundaryElement(this._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview).withPreviewContainer(this.previewContainer || 'global');\n        if (dir) {\n          ref.withDirection(dir.value);\n        }\n      }\n    });\n    // This only needs to be resolved once.\n    ref.beforeStarted.pipe(take(1)).subscribe(() => {\n      // If we managed to resolve a parent through DI, use it.\n      if (this._parentDrag) {\n        ref.withParent(this._parentDrag._dragRef);\n        return;\n      }\n      // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n      // the item was projected into another item by something like `ngTemplateOutlet`.\n      let parent = this.element.nativeElement.parentElement;\n      while (parent) {\n        if (parent.classList.contains(DRAG_HOST_CLASS)) {\n          ref.withParent(CdkDrag._dragInstances.find(drag => {\n            return drag.element.nativeElement === parent;\n          })?._dragRef || null);\n          break;\n        }\n        parent = parent.parentElement;\n      }\n    });\n  }\n  /** Handles the events from the underlying `DragRef`. */\n  _handleEvents(ref) {\n    ref.started.subscribe(startEvent => {\n      this.started.emit({\n        source: this,\n        event: startEvent.event\n      });\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.released.subscribe(releaseEvent => {\n      this.released.emit({\n        source: this,\n        event: releaseEvent.event\n      });\n    });\n    ref.ended.subscribe(endEvent => {\n      this.ended.emit({\n        source: this,\n        distance: endEvent.distance,\n        dropPoint: endEvent.dropPoint,\n        event: endEvent.event\n      });\n      // Since all of these events run outside of change detection,\n      // we need to ensure that everything is marked correctly.\n      this._changeDetectorRef.markForCheck();\n    });\n    ref.entered.subscribe(enterEvent => {\n      this.entered.emit({\n        container: enterEvent.container.data,\n        item: this,\n        currentIndex: enterEvent.currentIndex\n      });\n    });\n    ref.exited.subscribe(exitEvent => {\n      this.exited.emit({\n        container: exitEvent.container.data,\n        item: this\n      });\n    });\n    ref.dropped.subscribe(dropEvent => {\n      this.dropped.emit({\n        previousIndex: dropEvent.previousIndex,\n        currentIndex: dropEvent.currentIndex,\n        previousContainer: dropEvent.previousContainer.data,\n        container: dropEvent.container.data,\n        isPointerOverContainer: dropEvent.isPointerOverContainer,\n        item: this,\n        distance: dropEvent.distance,\n        dropPoint: dropEvent.dropPoint,\n        event: dropEvent.event\n      });\n    });\n  }\n  /** Assigns the default input values based on a provided config object. */\n  _assignDefaults(config) {\n    const {\n      lockAxis,\n      dragStartDelay,\n      constrainPosition,\n      previewClass,\n      boundaryElement,\n      draggingDisabled,\n      rootElementSelector,\n      previewContainer\n    } = config;\n    this.disabled = draggingDisabled == null ? false : draggingDisabled;\n    this.dragStartDelay = dragStartDelay || 0;\n    if (lockAxis) {\n      this.lockAxis = lockAxis;\n    }\n    if (constrainPosition) {\n      this.constrainPosition = constrainPosition;\n    }\n    if (previewClass) {\n      this.previewClass = previewClass;\n    }\n    if (boundaryElement) {\n      this.boundaryElement = boundaryElement;\n    }\n    if (rootElementSelector) {\n      this.rootElementSelector = rootElementSelector;\n    }\n    if (previewContainer) {\n      this.previewContainer = previewContainer;\n    }\n  }\n  /** Sets up the listener that syncs the handles with the drag ref. */\n  _setupHandlesListener() {\n    // Listen for any newly-added handles.\n    this._handles.changes.pipe(startWith(this._handles),\n    // Sync the new handles with the DragRef.\n    tap(handles => {\n      const childHandleElements = handles.filter(handle => handle._parentDrag === this).map(handle => handle.element);\n      // Usually handles are only allowed to be a descendant of the drag element, but if\n      // the consumer defined a different drag root, we should allow the drag element\n      // itself to be a handle too.\n      if (this._selfHandle && this.rootElementSelector) {\n        childHandleElements.push(this.element);\n      }\n      this._dragRef.withHandles(childHandleElements);\n    }),\n    // Listen if the state of any of the handles changes.\n    switchMap(handles => {\n      return merge(...handles.map(item => {\n        return item._stateChanges.pipe(startWith(item));\n      }));\n    }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n      // Enabled/disable the handle that changed in the DragRef.\n      const dragRef = this._dragRef;\n      const handle = handleInstance.element.nativeElement;\n      handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n    });\n  }\n}\nCdkDrag._dragInstances = [];\nCdkDrag.ɵfac = function CdkDrag_Factory(t) {\n  return new (t || CdkDrag)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), i0.ɵɵdirectiveInject(i3.Directionality, 8), i0.ɵɵdirectiveInject(DragDrop), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), i0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));\n};\nCdkDrag.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkDrag,\n  selectors: [[\"\", \"cdkDrag\", \"\"]],\n  contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n      i0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n      i0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._handles = _t);\n    }\n  },\n  hostAttrs: [1, \"cdk-drag\"],\n  hostVars: 4,\n  hostBindings: function CdkDrag_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    }\n  },\n  inputs: {\n    data: [\"cdkDragData\", \"data\"],\n    lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"],\n    rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"],\n    boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"],\n    dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"],\n    freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"],\n    disabled: [\"cdkDragDisabled\", \"disabled\"],\n    constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"],\n    previewClass: [\"cdkDragPreviewClass\", \"previewClass\"],\n    previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"]\n  },\n  outputs: {\n    started: \"cdkDragStarted\",\n    released: \"cdkDragReleased\",\n    ended: \"cdkDragEnded\",\n    entered: \"cdkDragEntered\",\n    exited: \"cdkDragExited\",\n    dropped: \"cdkDragDropped\",\n    moved: \"cdkDragMoved\"\n  },\n  exportAs: [\"cdkDrag\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: CDK_DRAG_PARENT,\n    useExisting: CdkDrag\n  }]), i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkDrag, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkDrag]',\n      exportAs: 'cdkDrag',\n      standalone: true,\n      host: {\n        'class': DRAG_HOST_CLASS,\n        '[class.cdk-drag-disabled]': 'disabled',\n        '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n      },\n      providers: [{\n        provide: CDK_DRAG_PARENT,\n        useExisting: CdkDrag\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_DROP_LIST]\n      }, {\n        type: Optional\n      }, {\n        type: SkipSelf\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_CONFIG]\n      }]\n    }, {\n      type: i3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: DragDrop\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: CdkDragHandle,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_HANDLE]\n      }]\n    }, {\n      type: CdkDrag,\n      decorators: [{\n        type: Optional\n      }, {\n        type: SkipSelf\n      }, {\n        type: Inject,\n        args: [CDK_DRAG_PARENT]\n      }]\n    }];\n  }, {\n    _handles: [{\n      type: ContentChildren,\n      args: [CDK_DRAG_HANDLE, {\n        descendants: true\n      }]\n    }],\n    _previewTemplate: [{\n      type: ContentChild,\n      args: [CDK_DRAG_PREVIEW]\n    }],\n    _placeholderTemplate: [{\n      type: ContentChild,\n      args: [CDK_DRAG_PLACEHOLDER]\n    }],\n    data: [{\n      type: Input,\n      args: ['cdkDragData']\n    }],\n    lockAxis: [{\n      type: Input,\n      args: ['cdkDragLockAxis']\n    }],\n    rootElementSelector: [{\n      type: Input,\n      args: ['cdkDragRootElement']\n    }],\n    boundaryElement: [{\n      type: Input,\n      args: ['cdkDragBoundary']\n    }],\n    dragStartDelay: [{\n      type: Input,\n      args: ['cdkDragStartDelay']\n    }],\n    freeDragPosition: [{\n      type: Input,\n      args: ['cdkDragFreeDragPosition']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkDragDisabled']\n    }],\n    constrainPosition: [{\n      type: Input,\n      args: ['cdkDragConstrainPosition']\n    }],\n    previewClass: [{\n      type: Input,\n      args: ['cdkDragPreviewClass']\n    }],\n    previewContainer: [{\n      type: Input,\n      args: ['cdkDragPreviewContainer']\n    }],\n    started: [{\n      type: Output,\n      args: ['cdkDragStarted']\n    }],\n    released: [{\n      type: Output,\n      args: ['cdkDragReleased']\n    }],\n    ended: [{\n      type: Output,\n      args: ['cdkDragEnded']\n    }],\n    entered: [{\n      type: Output,\n      args: ['cdkDragEntered']\n    }],\n    exited: [{\n      type: Output,\n      args: ['cdkDragExited']\n    }],\n    dropped: [{\n      type: Output,\n      args: ['cdkDragDropped']\n    }],\n    moved: [{\n      type: Output,\n      args: ['cdkDragMoved']\n    }]\n  });\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nconst DRAG_DROP_DIRECTIVES = [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];\nclass DragDropModule {}\nDragDropModule.ɵfac = function DragDropModule_Factory(t) {\n  return new (t || DragDropModule)();\n};\nDragDropModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: DragDropModule\n});\nDragDropModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DragDrop],\n  imports: [CdkScrollableModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DragDropModule, [{\n    type: NgModule,\n    args: [{\n      imports: DRAG_DROP_DIRECTIVES,\n      exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n      providers: [DragDrop]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };","map":{"version":3,"names":["i0","Injectable","Inject","InjectionToken","Directive","Input","EventEmitter","Optional","SkipSelf","Output","Self","ContentChildren","ContentChild","NgModule","DOCUMENT","i1","CdkScrollableModule","_getEventTarget","normalizePassiveListenerOptions","_getShadowRoot","coerceBooleanProperty","coerceElement","coerceArray","coerceNumberProperty","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","Subject","Subscription","interval","animationFrameScheduler","Observable","merge","takeUntil","startWith","map","take","tap","switchMap","i3","extendStyles","dest","source","importantProperties","key","hasOwnProperty","value","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","constructor","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","window","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","Set","DragRef","disabled","_disabled","_dropContainer","newValue","_toggleNativeDragInteractions","_handles","handle","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","_direction","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","_getTargetHandle","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","_initialClientRect","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","add","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_preview","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","zIndex","classList","setAttribute","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","a","b","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","floor","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","pipe","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","draggedItems","filter","every","connectedTo","withOrientation","_scrollableElements","size","_clientRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","initiator","receiver","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","ngOnDestroy","instance","ɵfac","NgZone","ɵprov","args","providedIn","decorators","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","ViewportRuler","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","ɵdir","provide","useExisting","exportAs","standalone","providers","CDK_DRAG_CONFIG","assertElementNode","Error","_uniqueIdCounter","CDK_DROP_LIST","CdkDropList","_group","_dropListRef","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_destroyed","id","_unsortedItems","ngDevMode","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","addItem","_syncItemsWithRef","removeItem","getSortedItems","documentPosition","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","ref","correspondingDropList","list","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","markForCheck","emit","dropEvent","draggingDisabled","listAutoScrollDisabled","listOrientation","ElementRef","ChangeDetectorRef","ScrollDispatcher","Directionality","useValue","host","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","parentDrag","_parentDrag","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","TemplateRef","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","DRAG_HOST_CLASS","CdkDrag","_viewContainerRef","_selfHandle","subscription","movedEvent","_syncInputs","ngAfterViewInit","onStable","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","rootElementSelector","closest","_getBoundaryElement","boundary","dir","startEvent","releaseEvent","endEvent","enterEvent","exitEvent","childHandleElements","handleInstance","dragRef","ViewContainerRef","descendants","DRAG_DROP_DIRECTIVES","DragDropModule","ɵmod","ɵinj","imports","exports"],"sources":["C:/atv-app/node_modules/@angular/cdk/fesm2020/drag-drop.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\r\nimport { Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, Optional, SkipSelf, Output, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport * as i1 from '@angular/cdk/scrolling';\r\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\r\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\r\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\r\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\r\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\r\nimport * as i3 from '@angular/cdk/bidi';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Shallow-extends a stylesheet object with another stylesheet-like object.\r\n * Note that the keys in `source` have to be dash-cased.\r\n * @docs-private\r\n */\r\nfunction extendStyles(dest, source, importantProperties) {\r\n    for (let key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n            const value = source[key];\r\n            if (value) {\r\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\r\n            }\r\n            else {\r\n                dest.removeProperty(key);\r\n            }\r\n        }\r\n    }\r\n    return dest;\r\n}\r\n/**\r\n * Toggles whether the native drag interactions should be enabled for an element.\r\n * @param element Element on which to toggle the drag interactions.\r\n * @param enable Whether the drag interactions should be enabled.\r\n * @docs-private\r\n */\r\nfunction toggleNativeDragInteractions(element, enable) {\r\n    const userSelect = enable ? '' : 'none';\r\n    extendStyles(element.style, {\r\n        'touch-action': enable ? '' : 'none',\r\n        '-webkit-user-drag': enable ? '' : 'none',\r\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\r\n        'user-select': userSelect,\r\n        '-ms-user-select': userSelect,\r\n        '-webkit-user-select': userSelect,\r\n        '-moz-user-select': userSelect,\r\n    });\r\n}\r\n/**\r\n * Toggles whether an element is visible while preserving its dimensions.\r\n * @param element Element whose visibility to toggle\r\n * @param enable Whether the element should be visible.\r\n * @param importantProperties Properties to be set as `!important`.\r\n * @docs-private\r\n */\r\nfunction toggleVisibility(element, enable, importantProperties) {\r\n    extendStyles(element.style, {\r\n        position: enable ? '' : 'fixed',\r\n        top: enable ? '' : '0',\r\n        opacity: enable ? '' : '0',\r\n        left: enable ? '' : '-999em',\r\n    }, importantProperties);\r\n}\r\n/**\r\n * Combines a transform string with an optional other transform\r\n * that exited before the base transform was applied.\r\n */\r\nfunction combineTransforms(transform, initialTransform) {\r\n    return initialTransform && initialTransform != 'none'\r\n        ? transform + ' ' + initialTransform\r\n        : transform;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Parses a CSS time value to milliseconds. */\r\nfunction parseCssTimeUnitsToMs(value) {\r\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\r\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\r\n    return parseFloat(value) * multiplier;\r\n}\r\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\r\nfunction getTransformTransitionDurationInMs(element) {\r\n    const computedStyle = getComputedStyle(element);\r\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\r\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\r\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\r\n    if (!property) {\r\n        return 0;\r\n    }\r\n    // Get the index of the property that we're interested in and match\r\n    // it up to the same index in `transition-delay` and `transition-duration`.\r\n    const propertyIndex = transitionedProperties.indexOf(property);\r\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\r\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\r\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\r\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\r\n}\r\n/** Parses out multiple values from a computed style into an array. */\r\nfunction parseCssPropertyValue(computedStyle, name) {\r\n    const value = computedStyle.getPropertyValue(name);\r\n    return value.split(',').map(part => part.trim());\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Gets a mutable version of an element's bounding `ClientRect`. */\r\nfunction getMutableClientRect(element) {\r\n    const clientRect = element.getBoundingClientRect();\r\n    // We need to clone the `clientRect` here, because all the values on it are readonly\r\n    // and we need to be able to update them. Also we can't use a spread here, because\r\n    // the values on a `ClientRect` aren't own properties. See:\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\r\n    return {\r\n        top: clientRect.top,\r\n        right: clientRect.right,\r\n        bottom: clientRect.bottom,\r\n        left: clientRect.left,\r\n        width: clientRect.width,\r\n        height: clientRect.height,\r\n        x: clientRect.x,\r\n        y: clientRect.y,\r\n    };\r\n}\r\n/**\r\n * Checks whether some coordinates are within a `ClientRect`.\r\n * @param clientRect ClientRect that is being checked.\r\n * @param x Coordinates along the X axis.\r\n * @param y Coordinates along the Y axis.\r\n */\r\nfunction isInsideClientRect(clientRect, x, y) {\r\n    const { top, bottom, left, right } = clientRect;\r\n    return y >= top && y <= bottom && x >= left && x <= right;\r\n}\r\n/**\r\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\r\n * @param clientRect `ClientRect` that should be updated.\r\n * @param top Amount to add to the `top` position.\r\n * @param left Amount to add to the `left` position.\r\n */\r\nfunction adjustClientRect(clientRect, top, left) {\r\n    clientRect.top += top;\r\n    clientRect.bottom = clientRect.top + clientRect.height;\r\n    clientRect.left += left;\r\n    clientRect.right = clientRect.left + clientRect.width;\r\n}\r\n/**\r\n * Checks whether the pointer coordinates are close to a ClientRect.\r\n * @param rect ClientRect to check against.\r\n * @param threshold Threshold around the ClientRect.\r\n * @param pointerX Coordinates along the X axis.\r\n * @param pointerY Coordinates along the Y axis.\r\n */\r\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\r\n    const { top, right, bottom, left, width, height } = rect;\r\n    const xThreshold = width * threshold;\r\n    const yThreshold = height * threshold;\r\n    return (pointerY > top - yThreshold &&\r\n        pointerY < bottom + yThreshold &&\r\n        pointerX > left - xThreshold &&\r\n        pointerX < right + xThreshold);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\r\nclass ParentPositionTracker {\r\n    constructor(_document) {\r\n        this._document = _document;\r\n        /** Cached positions of the scrollable parent elements. */\r\n        this.positions = new Map();\r\n    }\r\n    /** Clears the cached positions. */\r\n    clear() {\r\n        this.positions.clear();\r\n    }\r\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\r\n    cache(elements) {\r\n        this.clear();\r\n        this.positions.set(this._document, {\r\n            scrollPosition: this.getViewportScrollPosition(),\r\n        });\r\n        elements.forEach(element => {\r\n            this.positions.set(element, {\r\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\r\n                clientRect: getMutableClientRect(element),\r\n            });\r\n        });\r\n    }\r\n    /** Handles scrolling while a drag is taking place. */\r\n    handleScroll(event) {\r\n        const target = _getEventTarget(event);\r\n        const cachedPosition = this.positions.get(target);\r\n        if (!cachedPosition) {\r\n            return null;\r\n        }\r\n        const scrollPosition = cachedPosition.scrollPosition;\r\n        let newTop;\r\n        let newLeft;\r\n        if (target === this._document) {\r\n            const viewportScrollPosition = this.getViewportScrollPosition();\r\n            newTop = viewportScrollPosition.top;\r\n            newLeft = viewportScrollPosition.left;\r\n        }\r\n        else {\r\n            newTop = target.scrollTop;\r\n            newLeft = target.scrollLeft;\r\n        }\r\n        const topDifference = scrollPosition.top - newTop;\r\n        const leftDifference = scrollPosition.left - newLeft;\r\n        // Go through and update the cached positions of the scroll\r\n        // parents that are inside the element that was scrolled.\r\n        this.positions.forEach((position, node) => {\r\n            if (position.clientRect && target !== node && target.contains(node)) {\r\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\r\n            }\r\n        });\r\n        scrollPosition.top = newTop;\r\n        scrollPosition.left = newLeft;\r\n        return { top: topDifference, left: leftDifference };\r\n    }\r\n    /**\r\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\r\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\r\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\r\n     * if the element is offset by something like the `BlockScrollStrategy`.\r\n     */\r\n    getViewportScrollPosition() {\r\n        return { top: window.scrollY, left: window.scrollX };\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Creates a deep clone of an element. */\r\nfunction deepCloneNode(node) {\r\n    const clone = node.cloneNode(true);\r\n    const descendantsWithId = clone.querySelectorAll('[id]');\r\n    const nodeName = node.nodeName.toLowerCase();\r\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\r\n    clone.removeAttribute('id');\r\n    for (let i = 0; i < descendantsWithId.length; i++) {\r\n        descendantsWithId[i].removeAttribute('id');\r\n    }\r\n    if (nodeName === 'canvas') {\r\n        transferCanvasData(node, clone);\r\n    }\r\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\r\n        transferInputData(node, clone);\r\n    }\r\n    transferData('canvas', node, clone, transferCanvasData);\r\n    transferData('input, textarea, select', node, clone, transferInputData);\r\n    return clone;\r\n}\r\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\r\nfunction transferData(selector, node, clone, callback) {\r\n    const descendantElements = node.querySelectorAll(selector);\r\n    if (descendantElements.length) {\r\n        const cloneElements = clone.querySelectorAll(selector);\r\n        for (let i = 0; i < descendantElements.length; i++) {\r\n            callback(descendantElements[i], cloneElements[i]);\r\n        }\r\n    }\r\n}\r\n// Counter for unique cloned radio button names.\r\nlet cloneUniqueId = 0;\r\n/** Transfers the data of one input element to another. */\r\nfunction transferInputData(source, clone) {\r\n    // Browsers throw an error when assigning the value of a file input programmatically.\r\n    if (clone.type !== 'file') {\r\n        clone.value = source.value;\r\n    }\r\n    // Radio button `name` attributes must be unique for radio button groups\r\n    // otherwise original radio buttons can lose their checked state\r\n    // once the clone is inserted in the DOM.\r\n    if (clone.type === 'radio' && clone.name) {\r\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\r\n    }\r\n}\r\n/** Transfers the data of one canvas element to another. */\r\nfunction transferCanvasData(source, clone) {\r\n    const context = clone.getContext('2d');\r\n    if (context) {\r\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\r\n        // We can't do much about it so just ignore the error.\r\n        try {\r\n            context.drawImage(source, 0, 0);\r\n        }\r\n        catch { }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Options that can be used to bind a passive event listener. */\r\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\r\n/** Options that can be used to bind an active event listener. */\r\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\r\n/**\r\n * Time in milliseconds for which to ignore mouse events, after\r\n * receiving a touch event. Used to avoid doing double work for\r\n * touch devices where the browser fires fake mouse events, in\r\n * addition to touch events.\r\n */\r\nconst MOUSE_EVENT_IGNORE_TIME = 800;\r\n/** Inline styles to be set as `!important` while dragging. */\r\nconst dragImportantProperties = new Set([\r\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\r\n    'position',\r\n]);\r\n/**\r\n * Reference to a draggable item. Used to manipulate or dispose of the item.\r\n */\r\nclass DragRef {\r\n    /** Whether starting to drag this element is disabled. */\r\n    get disabled() {\r\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\r\n    }\r\n    set disabled(value) {\r\n        const newValue = coerceBooleanProperty(value);\r\n        if (newValue !== this._disabled) {\r\n            this._disabled = newValue;\r\n            this._toggleNativeDragInteractions();\r\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\r\n        }\r\n    }\r\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\r\n        this._config = _config;\r\n        this._document = _document;\r\n        this._ngZone = _ngZone;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._dragDropRegistry = _dragDropRegistry;\r\n        /**\r\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\r\n         * passive transform in order for the dragged element to retain its new position\r\n         * after the user has stopped dragging and because we need to know the relative\r\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\r\n         */\r\n        this._passiveTransform = { x: 0, y: 0 };\r\n        /** CSS `transform` that is applied to the element while it's being dragged. */\r\n        this._activeTransform = { x: 0, y: 0 };\r\n        /**\r\n         * Whether the dragging sequence has been started. Doesn't\r\n         * necessarily mean that the element has been moved.\r\n         */\r\n        this._hasStartedDragging = false;\r\n        /** Emits when the item is being moved. */\r\n        this._moveEvents = new Subject();\r\n        /** Subscription to pointer movement events. */\r\n        this._pointerMoveSubscription = Subscription.EMPTY;\r\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\r\n        this._pointerUpSubscription = Subscription.EMPTY;\r\n        /** Subscription to the viewport being scrolled. */\r\n        this._scrollSubscription = Subscription.EMPTY;\r\n        /** Subscription to the viewport being resized. */\r\n        this._resizeSubscription = Subscription.EMPTY;\r\n        /** Cached reference to the boundary element. */\r\n        this._boundaryElement = null;\r\n        /** Whether the native dragging interactions have been enabled on the root element. */\r\n        this._nativeInteractionsEnabled = true;\r\n        /** Elements that can be used to drag the draggable item. */\r\n        this._handles = [];\r\n        /** Registered handles that are currently disabled. */\r\n        this._disabledHandles = new Set();\r\n        /** Layout direction of the item. */\r\n        this._direction = 'ltr';\r\n        /**\r\n         * Amount of milliseconds to wait after the user has put their\r\n         * pointer down before starting to drag the element.\r\n         */\r\n        this.dragStartDelay = 0;\r\n        this._disabled = false;\r\n        /** Emits as the drag sequence is being prepared. */\r\n        this.beforeStarted = new Subject();\r\n        /** Emits when the user starts dragging the item. */\r\n        this.started = new Subject();\r\n        /** Emits when the user has released a drag item, before any animations have started. */\r\n        this.released = new Subject();\r\n        /** Emits when the user stops dragging an item in the container. */\r\n        this.ended = new Subject();\r\n        /** Emits when the user has moved the item into a new container. */\r\n        this.entered = new Subject();\r\n        /** Emits when the user removes the item its container by dragging it into another container. */\r\n        this.exited = new Subject();\r\n        /** Emits when the user drops the item inside a container. */\r\n        this.dropped = new Subject();\r\n        /**\r\n         * Emits as the user is dragging the item. Use with caution,\r\n         * because this event will fire for every pixel that the user has dragged.\r\n         */\r\n        this.moved = this._moveEvents;\r\n        /** Handler for the `mousedown`/`touchstart` events. */\r\n        this._pointerDown = (event) => {\r\n            this.beforeStarted.next();\r\n            // Delegate the event based on whether it started from a handle or the element itself.\r\n            if (this._handles.length) {\r\n                const targetHandle = this._getTargetHandle(event);\r\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\r\n                    this._initializeDragSequence(targetHandle, event);\r\n                }\r\n            }\r\n            else if (!this.disabled) {\r\n                this._initializeDragSequence(this._rootElement, event);\r\n            }\r\n        };\r\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\r\n        this._pointerMove = (event) => {\r\n            const pointerPosition = this._getPointerPositionOnPage(event);\r\n            if (!this._hasStartedDragging) {\r\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\r\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\r\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\r\n                // Only start dragging after the user has moved more than the minimum distance in either\r\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\r\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\r\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\r\n                if (isOverThreshold) {\r\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\r\n                    const container = this._dropContainer;\r\n                    if (!isDelayElapsed) {\r\n                        this._endDragSequence(event);\r\n                        return;\r\n                    }\r\n                    // Prevent other drag sequences from starting while something in the container is still\r\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\r\n                    // and can cause errors, because some elements might still be moving around.\r\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\r\n                        // Prevent the default action as soon as the dragging sequence is considered as\r\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\r\n                        event.preventDefault();\r\n                        this._hasStartedDragging = true;\r\n                        this._ngZone.run(() => this._startDragSequence(event));\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            // We prevent the default action down here so that we know that dragging has started. This is\r\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\r\n            // if there's a dragging delay.\r\n            event.preventDefault();\r\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\r\n            this._hasMoved = true;\r\n            this._lastKnownPointerPosition = pointerPosition;\r\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\r\n            if (this._dropContainer) {\r\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\r\n            }\r\n            else {\r\n                // If there's a position constraint function, we want the element's top/left to be at the\r\n                // specific position on the page. Use the initial position as a reference if that's the case.\r\n                const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\r\n                const activeTransform = this._activeTransform;\r\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\r\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\r\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\r\n            }\r\n            // Since this event gets fired for every pixel while dragging, we only\r\n            // want to fire it if the consumer opted into it. Also we have to\r\n            // re-enter the zone because we run all of the events on the outside.\r\n            if (this._moveEvents.observers.length) {\r\n                this._ngZone.run(() => {\r\n                    this._moveEvents.next({\r\n                        source: this,\r\n                        pointerPosition: constrainedPointerPosition,\r\n                        event,\r\n                        distance: this._getDragDistance(constrainedPointerPosition),\r\n                        delta: this._pointerDirectionDelta,\r\n                    });\r\n                });\r\n            }\r\n        };\r\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\r\n        this._pointerUp = (event) => {\r\n            this._endDragSequence(event);\r\n        };\r\n        /** Handles a native `dragstart` event. */\r\n        this._nativeDragStart = (event) => {\r\n            if (this._handles.length) {\r\n                const targetHandle = this._getTargetHandle(event);\r\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n            else if (!this.disabled) {\r\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\r\n                // but some cases like dragging of links can slip through (see #24403).\r\n                event.preventDefault();\r\n            }\r\n        };\r\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\r\n        this._parentPositions = new ParentPositionTracker(_document);\r\n        _dragDropRegistry.registerDragItem(this);\r\n    }\r\n    /**\r\n     * Returns the element that is being used as a placeholder\r\n     * while the current element is being dragged.\r\n     */\r\n    getPlaceholderElement() {\r\n        return this._placeholder;\r\n    }\r\n    /** Returns the root draggable element. */\r\n    getRootElement() {\r\n        return this._rootElement;\r\n    }\r\n    /**\r\n     * Gets the currently-visible element that represents the drag item.\r\n     * While dragging this is the placeholder, otherwise it's the root element.\r\n     */\r\n    getVisibleElement() {\r\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\r\n    }\r\n    /** Registers the handles that can be used to drag the element. */\r\n    withHandles(handles) {\r\n        this._handles = handles.map(handle => coerceElement(handle));\r\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\r\n        this._toggleNativeDragInteractions();\r\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\r\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\r\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\r\n        // use an array internally which may throw an error.\r\n        const disabledHandles = new Set();\r\n        this._disabledHandles.forEach(handle => {\r\n            if (this._handles.indexOf(handle) > -1) {\r\n                disabledHandles.add(handle);\r\n            }\r\n        });\r\n        this._disabledHandles = disabledHandles;\r\n        return this;\r\n    }\r\n    /**\r\n     * Registers the template that should be used for the drag preview.\r\n     * @param template Template that from which to stamp out the preview.\r\n     */\r\n    withPreviewTemplate(template) {\r\n        this._previewTemplate = template;\r\n        return this;\r\n    }\r\n    /**\r\n     * Registers the template that should be used for the drag placeholder.\r\n     * @param template Template that from which to stamp out the placeholder.\r\n     */\r\n    withPlaceholderTemplate(template) {\r\n        this._placeholderTemplate = template;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets an alternate drag root element. The root element is the element that will be moved as\r\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\r\n     * dragging on an element that you might not have access to.\r\n     */\r\n    withRootElement(rootElement) {\r\n        const element = coerceElement(rootElement);\r\n        if (element !== this._rootElement) {\r\n            if (this._rootElement) {\r\n                this._removeRootElementListeners(this._rootElement);\r\n            }\r\n            this._ngZone.runOutsideAngular(() => {\r\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\r\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\r\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\r\n            });\r\n            this._initialTransform = undefined;\r\n            this._rootElement = element;\r\n        }\r\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\r\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Element to which the draggable's position will be constrained.\r\n     */\r\n    withBoundaryElement(boundaryElement) {\r\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\r\n        this._resizeSubscription.unsubscribe();\r\n        if (boundaryElement) {\r\n            this._resizeSubscription = this._viewportRuler\r\n                .change(10)\r\n                .subscribe(() => this._containInsideBoundaryOnResize());\r\n        }\r\n        return this;\r\n    }\r\n    /** Sets the parent ref that the ref is nested in.  */\r\n    withParent(parent) {\r\n        this._parentDragRef = parent;\r\n        return this;\r\n    }\r\n    /** Removes the dragging functionality from the DOM element. */\r\n    dispose() {\r\n        this._removeRootElementListeners(this._rootElement);\r\n        // Do this check before removing from the registry since it'll\r\n        // stop being considered as dragged once it is removed.\r\n        if (this.isDragging()) {\r\n            // Since we move out the element to the end of the body while it's being\r\n            // dragged, we have to make sure that it's removed if it gets destroyed.\r\n            this._rootElement?.remove();\r\n        }\r\n        this._anchor?.remove();\r\n        this._destroyPreview();\r\n        this._destroyPlaceholder();\r\n        this._dragDropRegistry.removeDragItem(this);\r\n        this._removeSubscriptions();\r\n        this.beforeStarted.complete();\r\n        this.started.complete();\r\n        this.released.complete();\r\n        this.ended.complete();\r\n        this.entered.complete();\r\n        this.exited.complete();\r\n        this.dropped.complete();\r\n        this._moveEvents.complete();\r\n        this._handles = [];\r\n        this._disabledHandles.clear();\r\n        this._dropContainer = undefined;\r\n        this._resizeSubscription.unsubscribe();\r\n        this._parentPositions.clear();\r\n        this._boundaryElement =\r\n            this._rootElement =\r\n                this._ownerSVGElement =\r\n                    this._placeholderTemplate =\r\n                        this._previewTemplate =\r\n                            this._anchor =\r\n                                this._parentDragRef =\r\n                                    null;\r\n    }\r\n    /** Checks whether the element is currently being dragged. */\r\n    isDragging() {\r\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\r\n    }\r\n    /** Resets a standalone drag item to its initial position. */\r\n    reset() {\r\n        this._rootElement.style.transform = this._initialTransform || '';\r\n        this._activeTransform = { x: 0, y: 0 };\r\n        this._passiveTransform = { x: 0, y: 0 };\r\n    }\r\n    /**\r\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\r\n     * @param handle Handle element that should be disabled.\r\n     */\r\n    disableHandle(handle) {\r\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\r\n            this._disabledHandles.add(handle);\r\n            toggleNativeDragInteractions(handle, true);\r\n        }\r\n    }\r\n    /**\r\n     * Enables a handle, if it has been disabled.\r\n     * @param handle Handle element to be enabled.\r\n     */\r\n    enableHandle(handle) {\r\n        if (this._disabledHandles.has(handle)) {\r\n            this._disabledHandles.delete(handle);\r\n            toggleNativeDragInteractions(handle, this.disabled);\r\n        }\r\n    }\r\n    /** Sets the layout direction of the draggable item. */\r\n    withDirection(direction) {\r\n        this._direction = direction;\r\n        return this;\r\n    }\r\n    /** Sets the container that the item is part of. */\r\n    _withDropContainer(container) {\r\n        this._dropContainer = container;\r\n    }\r\n    /**\r\n     * Gets the current position in pixels the draggable outside of a drop container.\r\n     */\r\n    getFreeDragPosition() {\r\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\r\n        return { x: position.x, y: position.y };\r\n    }\r\n    /**\r\n     * Sets the current position in pixels the draggable outside of a drop container.\r\n     * @param value New position to be set.\r\n     */\r\n    setFreeDragPosition(value) {\r\n        this._activeTransform = { x: 0, y: 0 };\r\n        this._passiveTransform.x = value.x;\r\n        this._passiveTransform.y = value.y;\r\n        if (!this._dropContainer) {\r\n            this._applyRootElementTransform(value.x, value.y);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the container into which to insert the preview element.\r\n     * @param value Container into which to insert the preview.\r\n     */\r\n    withPreviewContainer(value) {\r\n        this._previewContainer = value;\r\n        return this;\r\n    }\r\n    /** Updates the item's sort order based on the last-known pointer position. */\r\n    _sortFromLastPointerPosition() {\r\n        const position = this._lastKnownPointerPosition;\r\n        if (position && this._dropContainer) {\r\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\r\n        }\r\n    }\r\n    /** Unsubscribes from the global subscriptions. */\r\n    _removeSubscriptions() {\r\n        this._pointerMoveSubscription.unsubscribe();\r\n        this._pointerUpSubscription.unsubscribe();\r\n        this._scrollSubscription.unsubscribe();\r\n    }\r\n    /** Destroys the preview element and its ViewRef. */\r\n    _destroyPreview() {\r\n        this._preview?.remove();\r\n        this._previewRef?.destroy();\r\n        this._preview = this._previewRef = null;\r\n    }\r\n    /** Destroys the placeholder element and its ViewRef. */\r\n    _destroyPlaceholder() {\r\n        this._placeholder?.remove();\r\n        this._placeholderRef?.destroy();\r\n        this._placeholder = this._placeholderRef = null;\r\n    }\r\n    /**\r\n     * Clears subscriptions and stops the dragging sequence.\r\n     * @param event Browser event object that ended the sequence.\r\n     */\r\n    _endDragSequence(event) {\r\n        // Note that here we use `isDragging` from the service, rather than from `this`.\r\n        // The difference is that the one from the service reflects whether a dragging sequence\r\n        // has been initiated, whereas the one on `this` includes whether the user has passed\r\n        // the minimum dragging threshold.\r\n        if (!this._dragDropRegistry.isDragging(this)) {\r\n            return;\r\n        }\r\n        this._removeSubscriptions();\r\n        this._dragDropRegistry.stopDragging(this);\r\n        this._toggleNativeDragInteractions();\r\n        if (this._handles) {\r\n            this._rootElement.style.webkitTapHighlightColor =\r\n                this._rootElementTapHighlight;\r\n        }\r\n        if (!this._hasStartedDragging) {\r\n            return;\r\n        }\r\n        this.released.next({ source: this, event });\r\n        if (this._dropContainer) {\r\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\r\n            this._dropContainer._stopScrolling();\r\n            this._animatePreviewToPlaceholder().then(() => {\r\n                this._cleanupDragArtifacts(event);\r\n                this._cleanupCachedDimensions();\r\n                this._dragDropRegistry.stopDragging(this);\r\n            });\r\n        }\r\n        else {\r\n            // Convert the active transform into a passive one. This means that next time\r\n            // the user starts dragging the item, its position will be calculated relatively\r\n            // to the new passive transform.\r\n            this._passiveTransform.x = this._activeTransform.x;\r\n            const pointerPosition = this._getPointerPositionOnPage(event);\r\n            this._passiveTransform.y = this._activeTransform.y;\r\n            this._ngZone.run(() => {\r\n                this.ended.next({\r\n                    source: this,\r\n                    distance: this._getDragDistance(pointerPosition),\r\n                    dropPoint: pointerPosition,\r\n                    event,\r\n                });\r\n            });\r\n            this._cleanupCachedDimensions();\r\n            this._dragDropRegistry.stopDragging(this);\r\n        }\r\n    }\r\n    /** Starts the dragging sequence. */\r\n    _startDragSequence(event) {\r\n        if (isTouchEvent(event)) {\r\n            this._lastTouchEventTime = Date.now();\r\n        }\r\n        this._toggleNativeDragInteractions();\r\n        const dropContainer = this._dropContainer;\r\n        if (dropContainer) {\r\n            const element = this._rootElement;\r\n            const parent = element.parentNode;\r\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\r\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\r\n            // Needs to happen before the root element is moved.\r\n            const shadowRoot = this._getShadowRoot();\r\n            // Insert an anchor node so that we can restore the element's position in the DOM.\r\n            parent.insertBefore(anchor, element);\r\n            // There's no risk of transforms stacking when inside a drop container so\r\n            // we can keep the initial transform up to date any time dragging starts.\r\n            this._initialTransform = element.style.transform || '';\r\n            // Create the preview after the initial transform has\r\n            // been cached, because it can be affected by the transform.\r\n            this._preview = this._createPreviewElement();\r\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\r\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\r\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\r\n            toggleVisibility(element, false, dragImportantProperties);\r\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\r\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\r\n            this.started.next({ source: this, event }); // Emit before notifying the container.\r\n            dropContainer.start();\r\n            this._initialContainer = dropContainer;\r\n            this._initialIndex = dropContainer.getItemIndex(this);\r\n        }\r\n        else {\r\n            this.started.next({ source: this, event });\r\n            this._initialContainer = this._initialIndex = undefined;\r\n        }\r\n        // Important to run after we've called `start` on the parent container\r\n        // so that it has had time to resolve its scrollable parents.\r\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\r\n    }\r\n    /**\r\n     * Sets up the different variables and subscriptions\r\n     * that will be necessary for the dragging sequence.\r\n     * @param referenceElement Element that started the drag sequence.\r\n     * @param event Browser event object that started the sequence.\r\n     */\r\n    _initializeDragSequence(referenceElement, event) {\r\n        // Stop propagation if the item is inside another\r\n        // draggable so we don't start multiple drag sequences.\r\n        if (this._parentDragRef) {\r\n            event.stopPropagation();\r\n        }\r\n        const isDragging = this.isDragging();\r\n        const isTouchSequence = isTouchEvent(event);\r\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\r\n        const rootElement = this._rootElement;\r\n        const target = _getEventTarget(event);\r\n        const isSyntheticEvent = !isTouchSequence &&\r\n            this._lastTouchEventTime &&\r\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\r\n        const isFakeEvent = isTouchSequence\r\n            ? isFakeTouchstartFromScreenReader(event)\r\n            : isFakeMousedownFromScreenReader(event);\r\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\r\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\r\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\r\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\r\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\r\n        // events from firing on touch devices.\r\n        if (target && target.draggable && event.type === 'mousedown') {\r\n            event.preventDefault();\r\n        }\r\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\r\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\r\n            return;\r\n        }\r\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\r\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\r\n        // are disabled.\r\n        if (this._handles.length) {\r\n            const rootStyles = rootElement.style;\r\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\r\n            rootStyles.webkitTapHighlightColor = 'transparent';\r\n        }\r\n        this._hasStartedDragging = this._hasMoved = false;\r\n        // Avoid multiple subscriptions and memory leaks when multi touch\r\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\r\n        this._removeSubscriptions();\r\n        this._initialClientRect = this._rootElement.getBoundingClientRect();\r\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\r\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\r\n        this._scrollSubscription = this._dragDropRegistry\r\n            .scrolled(this._getShadowRoot())\r\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\r\n        if (this._boundaryElement) {\r\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\r\n        }\r\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\r\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\r\n        // the same size as the root element, in which case we do know the size.\r\n        const previewTemplate = this._previewTemplate;\r\n        this._pickupPositionInElement =\r\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\r\n                ? { x: 0, y: 0 }\r\n                : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\r\n        const pointerPosition = (this._pickupPositionOnPage =\r\n            this._lastKnownPointerPosition =\r\n                this._getPointerPositionOnPage(event));\r\n        this._pointerDirectionDelta = { x: 0, y: 0 };\r\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\r\n        this._dragStartTime = Date.now();\r\n        this._dragDropRegistry.startDragging(this, event);\r\n    }\r\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\r\n    _cleanupDragArtifacts(event) {\r\n        // Restore the element's visibility and insert it at its old position in the DOM.\r\n        // It's important that we maintain the position, because moving the element around in the DOM\r\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\r\n        // while moving the existing elements in all other cases.\r\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\r\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\r\n        this._destroyPreview();\r\n        this._destroyPlaceholder();\r\n        this._initialClientRect =\r\n            this._boundaryRect =\r\n                this._previewRect =\r\n                    this._initialTransform =\r\n                        undefined;\r\n        // Re-enter the NgZone since we bound `document` events on the outside.\r\n        this._ngZone.run(() => {\r\n            const container = this._dropContainer;\r\n            const currentIndex = container.getItemIndex(this);\r\n            const pointerPosition = this._getPointerPositionOnPage(event);\r\n            const distance = this._getDragDistance(pointerPosition);\r\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\r\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\r\n            this.dropped.next({\r\n                item: this,\r\n                currentIndex,\r\n                previousIndex: this._initialIndex,\r\n                container: container,\r\n                previousContainer: this._initialContainer,\r\n                isPointerOverContainer,\r\n                distance,\r\n                dropPoint: pointerPosition,\r\n                event,\r\n            });\r\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\r\n            this._dropContainer = this._initialContainer;\r\n        });\r\n    }\r\n    /**\r\n     * Updates the item's position in its drop container, or moves it\r\n     * into a new one, depending on its current drag position.\r\n     */\r\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\r\n        // Drop container that draggable has been moved into.\r\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\r\n        // If we couldn't find a new container to move the item into, and the item has left its\r\n        // initial container, check whether the it's over the initial container. This handles the\r\n        // case where two containers are connected one way and the user tries to undo dragging an\r\n        // item into a new container.\r\n        if (!newContainer &&\r\n            this._dropContainer !== this._initialContainer &&\r\n            this._initialContainer._isOverContainer(x, y)) {\r\n            newContainer = this._initialContainer;\r\n        }\r\n        if (newContainer && newContainer !== this._dropContainer) {\r\n            this._ngZone.run(() => {\r\n                // Notify the old container that the item has left.\r\n                this.exited.next({ item: this, container: this._dropContainer });\r\n                this._dropContainer.exit(this);\r\n                // Notify the new container that the item has entered.\r\n                this._dropContainer = newContainer;\r\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\r\n                    // If we're re-entering the initial container and sorting is disabled,\r\n                    // put item the into its starting index to begin with.\r\n                    newContainer.sortingDisabled\r\n                    ? this._initialIndex\r\n                    : undefined);\r\n                this.entered.next({\r\n                    item: this,\r\n                    container: newContainer,\r\n                    currentIndex: newContainer.getItemIndex(this),\r\n                });\r\n            });\r\n        }\r\n        // Dragging may have been interrupted as a result of the events above.\r\n        if (this.isDragging()) {\r\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\r\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\r\n            if (this.constrainPosition) {\r\n                this._applyPreviewTransform(x, y);\r\n            }\r\n            else {\r\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Creates the element that will be rendered next to the user's pointer\r\n     * and will be used as a preview of the element that is being dragged.\r\n     */\r\n    _createPreviewElement() {\r\n        const previewConfig = this._previewTemplate;\r\n        const previewClass = this.previewClass;\r\n        const previewTemplate = previewConfig ? previewConfig.template : null;\r\n        let preview;\r\n        if (previewTemplate && previewConfig) {\r\n            // Measure the element before we've inserted the preview\r\n            // since the insertion could throw off the measurement.\r\n            const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\r\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\r\n            viewRef.detectChanges();\r\n            preview = getRootNode(viewRef, this._document);\r\n            this._previewRef = viewRef;\r\n            if (previewConfig.matchSize) {\r\n                matchElementSize(preview, rootRect);\r\n            }\r\n            else {\r\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\r\n            }\r\n        }\r\n        else {\r\n            preview = deepCloneNode(this._rootElement);\r\n            matchElementSize(preview, this._initialClientRect);\r\n            if (this._initialTransform) {\r\n                preview.style.transform = this._initialTransform;\r\n            }\r\n        }\r\n        extendStyles(preview.style, {\r\n            // It's important that we disable the pointer events on the preview, because\r\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\r\n            'pointer-events': 'none',\r\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\r\n            'margin': '0',\r\n            'position': 'fixed',\r\n            'top': '0',\r\n            'left': '0',\r\n            'z-index': `${this._config.zIndex || 1000}`,\r\n        }, dragImportantProperties);\r\n        toggleNativeDragInteractions(preview, false);\r\n        preview.classList.add('cdk-drag-preview');\r\n        preview.setAttribute('dir', this._direction);\r\n        if (previewClass) {\r\n            if (Array.isArray(previewClass)) {\r\n                previewClass.forEach(className => preview.classList.add(className));\r\n            }\r\n            else {\r\n                preview.classList.add(previewClass);\r\n            }\r\n        }\r\n        return preview;\r\n    }\r\n    /**\r\n     * Animates the preview element from its current position to the location of the drop placeholder.\r\n     * @returns Promise that resolves when the animation completes.\r\n     */\r\n    _animatePreviewToPlaceholder() {\r\n        // If the user hasn't moved yet, the transitionend event won't fire.\r\n        if (!this._hasMoved) {\r\n            return Promise.resolve();\r\n        }\r\n        const placeholderRect = this._placeholder.getBoundingClientRect();\r\n        // Apply the class that adds a transition to the preview.\r\n        this._preview.classList.add('cdk-drag-animating');\r\n        // Move the preview to the placeholder position.\r\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\r\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\r\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\r\n        // apply its style, we take advantage of the available info to figure out whether we need to\r\n        // bind the event in the first place.\r\n        const duration = getTransformTransitionDurationInMs(this._preview);\r\n        if (duration === 0) {\r\n            return Promise.resolve();\r\n        }\r\n        return this._ngZone.runOutsideAngular(() => {\r\n            return new Promise(resolve => {\r\n                const handler = ((event) => {\r\n                    if (!event ||\r\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\r\n                        this._preview?.removeEventListener('transitionend', handler);\r\n                        resolve();\r\n                        clearTimeout(timeout);\r\n                    }\r\n                });\r\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\r\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\r\n                // fire if the transition hasn't completed when it was supposed to.\r\n                const timeout = setTimeout(handler, duration * 1.5);\r\n                this._preview.addEventListener('transitionend', handler);\r\n            });\r\n        });\r\n    }\r\n    /** Creates an element that will be shown instead of the current element while dragging. */\r\n    _createPlaceholderElement() {\r\n        const placeholderConfig = this._placeholderTemplate;\r\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\r\n        let placeholder;\r\n        if (placeholderTemplate) {\r\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\r\n            this._placeholderRef.detectChanges();\r\n            placeholder = getRootNode(this._placeholderRef, this._document);\r\n        }\r\n        else {\r\n            placeholder = deepCloneNode(this._rootElement);\r\n        }\r\n        // Stop pointer events on the preview so the user can't\r\n        // interact with it while the preview is animating.\r\n        placeholder.style.pointerEvents = 'none';\r\n        placeholder.classList.add('cdk-drag-placeholder');\r\n        return placeholder;\r\n    }\r\n    /**\r\n     * Figures out the coordinates at which an element was picked up.\r\n     * @param referenceElement Element that initiated the dragging.\r\n     * @param event Event that initiated the dragging.\r\n     */\r\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\r\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\r\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\r\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\r\n        const scrollPosition = this._getViewportScrollPosition();\r\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\r\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\r\n        return {\r\n            x: referenceRect.left - elementRect.left + x,\r\n            y: referenceRect.top - elementRect.top + y,\r\n        };\r\n    }\r\n    /** Determines the point of the page that was touched by the user. */\r\n    _getPointerPositionOnPage(event) {\r\n        const scrollPosition = this._getViewportScrollPosition();\r\n        const point = isTouchEvent(event)\r\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\r\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\r\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\r\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\r\n                // throwing an error. The value returned here will be incorrect, but since this only\r\n                // breaks inside a developer tool and the value is only used for secondary information,\r\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\r\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\r\n            : event;\r\n        const x = point.pageX - scrollPosition.left;\r\n        const y = point.pageY - scrollPosition.top;\r\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\r\n        // coordinate system\r\n        if (this._ownerSVGElement) {\r\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\r\n            if (svgMatrix) {\r\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\r\n                svgPoint.x = x;\r\n                svgPoint.y = y;\r\n                return svgPoint.matrixTransform(svgMatrix.inverse());\r\n            }\r\n        }\r\n        return { x, y };\r\n    }\r\n    /** Gets the pointer position on the page, accounting for any position constraints. */\r\n    _getConstrainedPointerPosition(point) {\r\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\r\n        let { x, y } = this.constrainPosition\r\n            ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement)\r\n            : point;\r\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\r\n            y = this._pickupPositionOnPage.y;\r\n        }\r\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\r\n            x = this._pickupPositionOnPage.x;\r\n        }\r\n        if (this._boundaryRect) {\r\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\r\n            const boundaryRect = this._boundaryRect;\r\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\r\n            const minY = boundaryRect.top + pickupY;\r\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\r\n            const minX = boundaryRect.left + pickupX;\r\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\r\n            x = clamp$1(x, minX, maxX);\r\n            y = clamp$1(y, minY, maxY);\r\n        }\r\n        return { x, y };\r\n    }\r\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\r\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\r\n        const { x, y } = pointerPositionOnPage;\r\n        const delta = this._pointerDirectionDelta;\r\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\r\n        // Amount of pixels the user has dragged since the last time the direction changed.\r\n        const changeX = Math.abs(x - positionSinceLastChange.x);\r\n        const changeY = Math.abs(y - positionSinceLastChange.y);\r\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\r\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\r\n        // To make the delta more consistent, we track how much the user has moved since the last\r\n        // delta change and we only update it after it has reached a certain threshold.\r\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\r\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\r\n            positionSinceLastChange.x = x;\r\n        }\r\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\r\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\r\n            positionSinceLastChange.y = y;\r\n        }\r\n        return delta;\r\n    }\r\n    /** Toggles the native drag interactions, based on how many handles are registered. */\r\n    _toggleNativeDragInteractions() {\r\n        if (!this._rootElement || !this._handles) {\r\n            return;\r\n        }\r\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\r\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\r\n            this._nativeInteractionsEnabled = shouldEnable;\r\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\r\n        }\r\n    }\r\n    /** Removes the manually-added event listeners from the root element. */\r\n    _removeRootElementListeners(element) {\r\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\r\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\r\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\r\n    }\r\n    /**\r\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\r\n     * @param x New transform value along the X axis.\r\n     * @param y New transform value along the Y axis.\r\n     */\r\n    _applyRootElementTransform(x, y) {\r\n        const transform = getTransform(x, y);\r\n        const styles = this._rootElement.style;\r\n        // Cache the previous transform amount only after the first drag sequence, because\r\n        // we don't want our own transforms to stack on top of each other.\r\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\r\n        if (this._initialTransform == null) {\r\n            this._initialTransform =\r\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\r\n        }\r\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\r\n        // transform before the user's, because things like rotation can affect which direction\r\n        // the element will be translated towards.\r\n        styles.transform = combineTransforms(transform, this._initialTransform);\r\n    }\r\n    /**\r\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\r\n     * @param x New transform value along the X axis.\r\n     * @param y New transform value along the Y axis.\r\n     */\r\n    _applyPreviewTransform(x, y) {\r\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\r\n        // it could be completely different and the transform might not make sense anymore.\r\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\r\n        const transform = getTransform(x, y);\r\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\r\n    }\r\n    /**\r\n     * Gets the distance that the user has dragged during the current drag sequence.\r\n     * @param currentPosition Current position of the user's pointer.\r\n     */\r\n    _getDragDistance(currentPosition) {\r\n        const pickupPosition = this._pickupPositionOnPage;\r\n        if (pickupPosition) {\r\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\r\n        }\r\n        return { x: 0, y: 0 };\r\n    }\r\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\r\n    _cleanupCachedDimensions() {\r\n        this._boundaryRect = this._previewRect = undefined;\r\n        this._parentPositions.clear();\r\n    }\r\n    /**\r\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\r\n     * If not, the position is adjusted so that the element fits again.\r\n     */\r\n    _containInsideBoundaryOnResize() {\r\n        let { x, y } = this._passiveTransform;\r\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\r\n            return;\r\n        }\r\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\r\n        const elementRect = this._rootElement.getBoundingClientRect();\r\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\r\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\r\n        // different tab). Don't do anything in this case so we don't clear the user's position.\r\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\r\n            (elementRect.width === 0 && elementRect.height === 0)) {\r\n            return;\r\n        }\r\n        const leftOverflow = boundaryRect.left - elementRect.left;\r\n        const rightOverflow = elementRect.right - boundaryRect.right;\r\n        const topOverflow = boundaryRect.top - elementRect.top;\r\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\r\n        // If the element has become wider than the boundary, we can't\r\n        // do much to make it fit so we just anchor it to the left.\r\n        if (boundaryRect.width > elementRect.width) {\r\n            if (leftOverflow > 0) {\r\n                x += leftOverflow;\r\n            }\r\n            if (rightOverflow > 0) {\r\n                x -= rightOverflow;\r\n            }\r\n        }\r\n        else {\r\n            x = 0;\r\n        }\r\n        // If the element has become taller than the boundary, we can't\r\n        // do much to make it fit so we just anchor it to the top.\r\n        if (boundaryRect.height > elementRect.height) {\r\n            if (topOverflow > 0) {\r\n                y += topOverflow;\r\n            }\r\n            if (bottomOverflow > 0) {\r\n                y -= bottomOverflow;\r\n            }\r\n        }\r\n        else {\r\n            y = 0;\r\n        }\r\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\r\n            this.setFreeDragPosition({ y, x });\r\n        }\r\n    }\r\n    /** Gets the drag start delay, based on the event type. */\r\n    _getDragStartDelay(event) {\r\n        const value = this.dragStartDelay;\r\n        if (typeof value === 'number') {\r\n            return value;\r\n        }\r\n        else if (isTouchEvent(event)) {\r\n            return value.touch;\r\n        }\r\n        return value ? value.mouse : 0;\r\n    }\r\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\r\n    _updateOnScroll(event) {\r\n        const scrollDifference = this._parentPositions.handleScroll(event);\r\n        if (scrollDifference) {\r\n            const target = _getEventTarget(event);\r\n            // ClientRect dimensions are based on the scroll position of the page and its parent\r\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\r\n            if (this._boundaryRect &&\r\n                target !== this._boundaryElement &&\r\n                target.contains(this._boundaryElement)) {\r\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\r\n            }\r\n            this._pickupPositionOnPage.x += scrollDifference.left;\r\n            this._pickupPositionOnPage.y += scrollDifference.top;\r\n            // If we're in free drag mode, we have to update the active transform, because\r\n            // it isn't relative to the viewport like the preview inside a drop list.\r\n            if (!this._dropContainer) {\r\n                this._activeTransform.x -= scrollDifference.left;\r\n                this._activeTransform.y -= scrollDifference.top;\r\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\r\n            }\r\n        }\r\n    }\r\n    /** Gets the scroll position of the viewport. */\r\n    _getViewportScrollPosition() {\r\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\r\n            this._parentPositions.getViewportScrollPosition());\r\n    }\r\n    /**\r\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\r\n     * than saving it in property directly on init, because we want to resolve it as late as possible\r\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\r\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\r\n     */\r\n    _getShadowRoot() {\r\n        if (this._cachedShadowRoot === undefined) {\r\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\r\n        }\r\n        return this._cachedShadowRoot;\r\n    }\r\n    /** Gets the element into which the drag preview should be inserted. */\r\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\r\n        const previewContainer = this._previewContainer || 'global';\r\n        if (previewContainer === 'parent') {\r\n            return initialParent;\r\n        }\r\n        if (previewContainer === 'global') {\r\n            const documentRef = this._document;\r\n            // We can't use the body if the user is in fullscreen mode,\r\n            // because the preview will render under the fullscreen element.\r\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\r\n            return (shadowRoot ||\r\n                documentRef.fullscreenElement ||\r\n                documentRef.webkitFullscreenElement ||\r\n                documentRef.mozFullScreenElement ||\r\n                documentRef.msFullscreenElement ||\r\n                documentRef.body);\r\n        }\r\n        return coerceElement(previewContainer);\r\n    }\r\n    /** Lazily resolves and returns the dimensions of the preview. */\r\n    _getPreviewRect() {\r\n        // Cache the preview element rect if we haven't cached it already or if\r\n        // we cached it too early before the element dimensions were computed.\r\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\r\n            this._previewRect = this._preview\r\n                ? this._preview.getBoundingClientRect()\r\n                : this._initialClientRect;\r\n        }\r\n        return this._previewRect;\r\n    }\r\n    /** Gets a handle that is the target of an event. */\r\n    _getTargetHandle(event) {\r\n        return this._handles.find(handle => {\r\n            return event.target && (event.target === handle || handle.contains(event.target));\r\n        });\r\n    }\r\n}\r\n/**\r\n * Gets a 3d `transform` that can be applied to an element.\r\n * @param x Desired position of the element along the X axis.\r\n * @param y Desired position of the element along the Y axis.\r\n */\r\nfunction getTransform(x, y) {\r\n    // Round the transforms since some browsers will\r\n    // blur the elements for sub-pixel transforms.\r\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\r\n}\r\n/** Clamps a value between a minimum and a maximum. */\r\nfunction clamp$1(value, min, max) {\r\n    return Math.max(min, Math.min(max, value));\r\n}\r\n/** Determines whether an event is a touch event. */\r\nfunction isTouchEvent(event) {\r\n    // This function is called for every pixel that the user has dragged so we need it to be\r\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\r\n    // that if the event's name starts with `t`, it's a touch event.\r\n    return event.type[0] === 't';\r\n}\r\n/**\r\n * Gets the root HTML element of an embedded view.\r\n * If the root is not an HTML element it gets wrapped in one.\r\n */\r\nfunction getRootNode(viewRef, _document) {\r\n    const rootNodes = viewRef.rootNodes;\r\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\r\n        return rootNodes[0];\r\n    }\r\n    const wrapper = _document.createElement('div');\r\n    rootNodes.forEach(node => wrapper.appendChild(node));\r\n    return wrapper;\r\n}\r\n/**\r\n * Matches the target element's size to the source's size.\r\n * @param target Element that needs to be resized.\r\n * @param sourceRect Dimensions of the source element.\r\n */\r\nfunction matchElementSize(target, sourceRect) {\r\n    target.style.width = `${sourceRect.width}px`;\r\n    target.style.height = `${sourceRect.height}px`;\r\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Moves an item one index in an array to another.\r\n * @param array Array in which to move the item.\r\n * @param fromIndex Starting index of the item.\r\n * @param toIndex Index to which the item should be moved.\r\n */\r\nfunction moveItemInArray(array, fromIndex, toIndex) {\r\n    const from = clamp(fromIndex, array.length - 1);\r\n    const to = clamp(toIndex, array.length - 1);\r\n    if (from === to) {\r\n        return;\r\n    }\r\n    const target = array[from];\r\n    const delta = to < from ? -1 : 1;\r\n    for (let i = from; i !== to; i += delta) {\r\n        array[i] = array[i + delta];\r\n    }\r\n    array[to] = target;\r\n}\r\n/**\r\n * Moves an item from one array to another.\r\n * @param currentArray Array from which to transfer the item.\r\n * @param targetArray Array into which to put the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n */\r\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\r\n    const from = clamp(currentIndex, currentArray.length - 1);\r\n    const to = clamp(targetIndex, targetArray.length);\r\n    if (currentArray.length) {\r\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\r\n    }\r\n}\r\n/**\r\n * Copies an item from one array to another, leaving it in its\r\n * original position in current array.\r\n * @param currentArray Array from which to copy the item.\r\n * @param targetArray Array into which is copy the item.\r\n * @param currentIndex Index of the item in its current array.\r\n * @param targetIndex Index at which to insert the item.\r\n *\r\n */\r\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\r\n    const to = clamp(targetIndex, targetArray.length);\r\n    if (currentArray.length) {\r\n        targetArray.splice(to, 0, currentArray[currentIndex]);\r\n    }\r\n}\r\n/** Clamps a number between zero and a maximum. */\r\nfunction clamp(value, max) {\r\n    return Math.max(0, Math.min(max, value));\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Strategy that only supports sorting along a single axis.\r\n * Items are reordered using CSS transforms which allows for sorting to be animated.\r\n * @docs-private\r\n */\r\nclass SingleAxisSortStrategy {\r\n    constructor(_element, _dragDropRegistry) {\r\n        this._element = _element;\r\n        this._dragDropRegistry = _dragDropRegistry;\r\n        /** Cache of the dimensions of all the items inside the container. */\r\n        this._itemPositions = [];\r\n        /** Direction in which the list is oriented. */\r\n        this.orientation = 'vertical';\r\n        /**\r\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\r\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\r\n         * overlap with the swapped item after the swapping occurred.\r\n         */\r\n        this._previousSwap = {\r\n            drag: null,\r\n            delta: 0,\r\n            overlaps: false,\r\n        };\r\n    }\r\n    /**\r\n     * To be called when the drag sequence starts.\r\n     * @param items Items that are currently in the list.\r\n     */\r\n    start(items) {\r\n        this.withItems(items);\r\n    }\r\n    /**\r\n     * To be called when an item is being sorted.\r\n     * @param item Item to be sorted.\r\n     * @param pointerX Position of the item along the X axis.\r\n     * @param pointerY Position of the item along the Y axis.\r\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\r\n     */\r\n    sort(item, pointerX, pointerY, pointerDelta) {\r\n        const siblings = this._itemPositions;\r\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\r\n        if (newIndex === -1 && siblings.length > 0) {\r\n            return null;\r\n        }\r\n        const isHorizontal = this.orientation === 'horizontal';\r\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\r\n        const siblingAtNewPosition = siblings[newIndex];\r\n        const currentPosition = siblings[currentIndex].clientRect;\r\n        const newPosition = siblingAtNewPosition.clientRect;\r\n        const delta = currentIndex > newIndex ? 1 : -1;\r\n        // How many pixels the item's placeholder should be offset.\r\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\r\n        // How many pixels all the other items should be offset.\r\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\r\n        // Save the previous order of the items before moving the item to its new index.\r\n        // We use this to check whether an item has been moved as a result of the sorting.\r\n        const oldOrder = siblings.slice();\r\n        // Shuffle the array in place.\r\n        moveItemInArray(siblings, currentIndex, newIndex);\r\n        siblings.forEach((sibling, index) => {\r\n            // Don't do anything if the position hasn't changed.\r\n            if (oldOrder[index] === sibling) {\r\n                return;\r\n            }\r\n            const isDraggedItem = sibling.drag === item;\r\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\r\n            const elementToOffset = isDraggedItem\r\n                ? item.getPlaceholderElement()\r\n                : sibling.drag.getRootElement();\r\n            // Update the offset to reflect the new position.\r\n            sibling.offset += offset;\r\n            // Since we're moving the items with a `transform`, we need to adjust their cached\r\n            // client rects to reflect their new position, as well as swap their positions in the cache.\r\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\r\n            // elements may be mid-animation which will give us a wrong result.\r\n            if (isHorizontal) {\r\n                // Round the transforms since some browsers will\r\n                // blur the elements, for sub-pixel transforms.\r\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\r\n                adjustClientRect(sibling.clientRect, 0, offset);\r\n            }\r\n            else {\r\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\r\n                adjustClientRect(sibling.clientRect, offset, 0);\r\n            }\r\n        });\r\n        // Note that it's important that we do this after the client rects have been adjusted.\r\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\r\n        this._previousSwap.drag = siblingAtNewPosition.drag;\r\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\r\n        return { previousIndex: currentIndex, currentIndex: newIndex };\r\n    }\r\n    /**\r\n     * Called when an item is being moved into the container.\r\n     * @param item Item that was moved into the container.\r\n     * @param pointerX Position of the item along the X axis.\r\n     * @param pointerY Position of the item along the Y axis.\r\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\r\n     *   out automatically.\r\n     */\r\n    enter(item, pointerX, pointerY, index) {\r\n        const newIndex = index == null || index < 0\r\n            ? // We use the coordinates of where the item entered the drop\r\n                // zone to figure out at which index it should be inserted.\r\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\r\n            : index;\r\n        const activeDraggables = this._activeDraggables;\r\n        const currentIndex = activeDraggables.indexOf(item);\r\n        const placeholder = item.getPlaceholderElement();\r\n        let newPositionReference = activeDraggables[newIndex];\r\n        // If the item at the new position is the same as the item that is being dragged,\r\n        // it means that we're trying to restore the item to its initial position. In this\r\n        // case we should use the next item from the list as the reference.\r\n        if (newPositionReference === item) {\r\n            newPositionReference = activeDraggables[newIndex + 1];\r\n        }\r\n        // If we didn't find a new position reference, it means that either the item didn't start off\r\n        // in this container, or that the item requested to be inserted at the end of the list.\r\n        if (!newPositionReference &&\r\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\r\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\r\n            newPositionReference = activeDraggables[0];\r\n        }\r\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\r\n        // into another container and back again), we have to ensure that it isn't duplicated.\r\n        if (currentIndex > -1) {\r\n            activeDraggables.splice(currentIndex, 1);\r\n        }\r\n        // Don't use items that are being dragged as a reference, because\r\n        // their element has been moved down to the bottom of the body.\r\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\r\n            const element = newPositionReference.getRootElement();\r\n            element.parentElement.insertBefore(placeholder, element);\r\n            activeDraggables.splice(newIndex, 0, item);\r\n        }\r\n        else {\r\n            coerceElement(this._element).appendChild(placeholder);\r\n            activeDraggables.push(item);\r\n        }\r\n        // The transform needs to be cleared so it doesn't throw off the measurements.\r\n        placeholder.style.transform = '';\r\n        // Note that usually `start` is called together with `enter` when an item goes into a new\r\n        // container. This will cache item positions, but we need to refresh them since the amount\r\n        // of items has changed.\r\n        this._cacheItemPositions();\r\n    }\r\n    /** Sets the items that are currently part of the list. */\r\n    withItems(items) {\r\n        this._activeDraggables = items.slice();\r\n        this._cacheItemPositions();\r\n    }\r\n    /** Assigns a sort predicate to the strategy. */\r\n    withSortPredicate(predicate) {\r\n        this._sortPredicate = predicate;\r\n    }\r\n    /** Resets the strategy to its initial state before dragging was started. */\r\n    reset() {\r\n        // TODO(crisbeto): may have to wait for the animations to finish.\r\n        this._activeDraggables.forEach(item => {\r\n            const rootElement = item.getRootElement();\r\n            if (rootElement) {\r\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\r\n                rootElement.style.transform = initialTransform || '';\r\n            }\r\n        });\r\n        this._itemPositions = [];\r\n        this._activeDraggables = [];\r\n        this._previousSwap.drag = null;\r\n        this._previousSwap.delta = 0;\r\n        this._previousSwap.overlaps = false;\r\n    }\r\n    /**\r\n     * Gets a snapshot of items currently in the list.\r\n     * Can include items that we dragged in from another list.\r\n     */\r\n    getActiveItemsSnapshot() {\r\n        return this._activeDraggables;\r\n    }\r\n    /** Gets the index of a specific item. */\r\n    getItemIndex(item) {\r\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\r\n        // The rest of the logic still stands no matter what orientation we're in, however\r\n        // we need to invert the array when determining the index.\r\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\r\n            ? this._itemPositions.slice().reverse()\r\n            : this._itemPositions;\r\n        return items.findIndex(currentItem => currentItem.drag === item);\r\n    }\r\n    /** Used to notify the strategy that the scroll position has changed. */\r\n    updateOnScroll(topDifference, leftDifference) {\r\n        // Since we know the amount that the user has scrolled we can shift all of the\r\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\r\n        // we can avoid inconsistent behavior where we might be measuring the element before\r\n        // its position has changed.\r\n        this._itemPositions.forEach(({ clientRect }) => {\r\n            adjustClientRect(clientRect, topDifference, leftDifference);\r\n        });\r\n        // We need two loops for this, because we want all of the cached\r\n        // positions to be up-to-date before we re-sort the item.\r\n        this._itemPositions.forEach(({ drag }) => {\r\n            if (this._dragDropRegistry.isDragging(drag)) {\r\n                // We need to re-sort the item manually, because the pointer move\r\n                // events won't be dispatched while the user is scrolling.\r\n                drag._sortFromLastPointerPosition();\r\n            }\r\n        });\r\n    }\r\n    /** Refreshes the position cache of the items and sibling containers. */\r\n    _cacheItemPositions() {\r\n        const isHorizontal = this.orientation === 'horizontal';\r\n        this._itemPositions = this._activeDraggables\r\n            .map(drag => {\r\n            const elementToMeasure = drag.getVisibleElement();\r\n            return {\r\n                drag,\r\n                offset: 0,\r\n                initialTransform: elementToMeasure.style.transform || '',\r\n                clientRect: getMutableClientRect(elementToMeasure),\r\n            };\r\n        })\r\n            .sort((a, b) => {\r\n            return isHorizontal\r\n                ? a.clientRect.left - b.clientRect.left\r\n                : a.clientRect.top - b.clientRect.top;\r\n        });\r\n    }\r\n    /**\r\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\r\n     * @param currentPosition Current position of the item.\r\n     * @param newPosition Position of the item where the current item should be moved.\r\n     * @param delta Direction in which the user is moving.\r\n     */\r\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\r\n        const isHorizontal = this.orientation === 'horizontal';\r\n        let itemOffset = isHorizontal\r\n            ? newPosition.left - currentPosition.left\r\n            : newPosition.top - currentPosition.top;\r\n        // Account for differences in the item width/height.\r\n        if (delta === -1) {\r\n            itemOffset += isHorizontal\r\n                ? newPosition.width - currentPosition.width\r\n                : newPosition.height - currentPosition.height;\r\n        }\r\n        return itemOffset;\r\n    }\r\n    /**\r\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\r\n     * @param currentIndex Index of the item currently being dragged.\r\n     * @param siblings All of the items in the list.\r\n     * @param delta Direction in which the user is moving.\r\n     */\r\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\r\n        const isHorizontal = this.orientation === 'horizontal';\r\n        const currentPosition = siblings[currentIndex].clientRect;\r\n        const immediateSibling = siblings[currentIndex + delta * -1];\r\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\r\n        if (immediateSibling) {\r\n            const start = isHorizontal ? 'left' : 'top';\r\n            const end = isHorizontal ? 'right' : 'bottom';\r\n            // Get the spacing between the start of the current item and the end of the one immediately\r\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\r\n            // offset in order to push the element to where it will be when it's inline and is influenced\r\n            // by the `margin` of its siblings.\r\n            if (delta === -1) {\r\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\r\n            }\r\n            else {\r\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\r\n            }\r\n        }\r\n        return siblingOffset;\r\n    }\r\n    /**\r\n     * Checks if pointer is entering in the first position\r\n     * @param pointerX Position of the user's pointer along the X axis.\r\n     * @param pointerY Position of the user's pointer along the Y axis.\r\n     */\r\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\r\n        if (!this._activeDraggables.length) {\r\n            return false;\r\n        }\r\n        const itemPositions = this._itemPositions;\r\n        const isHorizontal = this.orientation === 'horizontal';\r\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\r\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\r\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\r\n        if (reversed) {\r\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\r\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\r\n        }\r\n        else {\r\n            const firstItemRect = itemPositions[0].clientRect;\r\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\r\n        }\r\n    }\r\n    /**\r\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\r\n     * @param item Item that is being sorted.\r\n     * @param pointerX Position of the user's pointer along the X axis.\r\n     * @param pointerY Position of the user's pointer along the Y axis.\r\n     * @param delta Direction in which the user is moving their pointer.\r\n     */\r\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\r\n        const isHorizontal = this.orientation === 'horizontal';\r\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\r\n            // Skip the item itself.\r\n            if (drag === item) {\r\n                return false;\r\n            }\r\n            if (delta) {\r\n                const direction = isHorizontal ? delta.x : delta.y;\r\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\r\n                // the item after we made the swap, and they didn't change the direction in which they're\r\n                // dragging, we don't consider it a direction swap.\r\n                if (drag === this._previousSwap.drag &&\r\n                    this._previousSwap.overlaps &&\r\n                    direction === this._previousSwap.delta) {\r\n                    return false;\r\n                }\r\n            }\r\n            return isHorizontal\r\n                ? // Round these down since most browsers report client rects with\r\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\r\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\r\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\r\n        });\r\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Proximity, as a ratio to width/height, at which a\r\n * dragged item will affect the drop container.\r\n */\r\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\r\n/**\r\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\r\n * viewport. The value comes from trying it out manually until it feels right.\r\n */\r\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\r\n/**\r\n * Reference to a drop list. Used to manipulate or dispose of the container.\r\n */\r\nclass DropListRef {\r\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\r\n        this._dragDropRegistry = _dragDropRegistry;\r\n        this._ngZone = _ngZone;\r\n        this._viewportRuler = _viewportRuler;\r\n        /** Whether starting a dragging sequence from this container is disabled. */\r\n        this.disabled = false;\r\n        /** Whether sorting items within the list is disabled. */\r\n        this.sortingDisabled = false;\r\n        /**\r\n         * Whether auto-scrolling the view when the user\r\n         * moves their pointer close to the edges is disabled.\r\n         */\r\n        this.autoScrollDisabled = false;\r\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\r\n        this.autoScrollStep = 2;\r\n        /**\r\n         * Function that is used to determine whether an item\r\n         * is allowed to be moved into a drop container.\r\n         */\r\n        this.enterPredicate = () => true;\r\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\r\n        this.sortPredicate = () => true;\r\n        /** Emits right before dragging has started. */\r\n        this.beforeStarted = new Subject();\r\n        /**\r\n         * Emits when the user has moved a new drag item into this container.\r\n         */\r\n        this.entered = new Subject();\r\n        /**\r\n         * Emits when the user removes an item from the container\r\n         * by dragging it into another container.\r\n         */\r\n        this.exited = new Subject();\r\n        /** Emits when the user drops an item inside the container. */\r\n        this.dropped = new Subject();\r\n        /** Emits as the user is swapping items while actively dragging. */\r\n        this.sorted = new Subject();\r\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\r\n        this.receivingStarted = new Subject();\r\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\r\n        this.receivingStopped = new Subject();\r\n        /** Whether an item in the list is being dragged. */\r\n        this._isDragging = false;\r\n        /** Draggable items in the container. */\r\n        this._draggables = [];\r\n        /** Drop lists that are connected to the current one. */\r\n        this._siblings = [];\r\n        /** Connected siblings that currently have a dragged item. */\r\n        this._activeSiblings = new Set();\r\n        /** Subscription to the window being scrolled. */\r\n        this._viewportScrollSubscription = Subscription.EMPTY;\r\n        /** Vertical direction in which the list is currently scrolling. */\r\n        this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\r\n        /** Horizontal direction in which the list is currently scrolling. */\r\n        this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\r\n        /** Used to signal to the current auto-scroll sequence when to stop. */\r\n        this._stopScrollTimers = new Subject();\r\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\r\n        this._cachedShadowRoot = null;\r\n        /** Starts the interval that'll auto-scroll the element. */\r\n        this._startScrollInterval = () => {\r\n            this._stopScrolling();\r\n            interval(0, animationFrameScheduler)\r\n                .pipe(takeUntil(this._stopScrollTimers))\r\n                .subscribe(() => {\r\n                const node = this._scrollNode;\r\n                const scrollStep = this.autoScrollStep;\r\n                if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\r\n                    node.scrollBy(0, -scrollStep);\r\n                }\r\n                else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\r\n                    node.scrollBy(0, scrollStep);\r\n                }\r\n                if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\r\n                    node.scrollBy(-scrollStep, 0);\r\n                }\r\n                else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\r\n                    node.scrollBy(scrollStep, 0);\r\n                }\r\n            });\r\n        };\r\n        this.element = coerceElement(element);\r\n        this._document = _document;\r\n        this.withScrollableParents([this.element]);\r\n        _dragDropRegistry.registerDropContainer(this);\r\n        this._parentPositions = new ParentPositionTracker(_document);\r\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\r\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\r\n    }\r\n    /** Removes the drop list functionality from the DOM element. */\r\n    dispose() {\r\n        this._stopScrolling();\r\n        this._stopScrollTimers.complete();\r\n        this._viewportScrollSubscription.unsubscribe();\r\n        this.beforeStarted.complete();\r\n        this.entered.complete();\r\n        this.exited.complete();\r\n        this.dropped.complete();\r\n        this.sorted.complete();\r\n        this.receivingStarted.complete();\r\n        this.receivingStopped.complete();\r\n        this._activeSiblings.clear();\r\n        this._scrollNode = null;\r\n        this._parentPositions.clear();\r\n        this._dragDropRegistry.removeDropContainer(this);\r\n    }\r\n    /** Whether an item from this list is currently being dragged. */\r\n    isDragging() {\r\n        return this._isDragging;\r\n    }\r\n    /** Starts dragging an item. */\r\n    start() {\r\n        this._draggingStarted();\r\n        this._notifyReceivingSiblings();\r\n    }\r\n    /**\r\n     * Attempts to move an item into the container.\r\n     * @param item Item that was moved into the container.\r\n     * @param pointerX Position of the item along the X axis.\r\n     * @param pointerY Position of the item along the Y axis.\r\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\r\n     *   out automatically.\r\n     */\r\n    enter(item, pointerX, pointerY, index) {\r\n        this._draggingStarted();\r\n        // If sorting is disabled, we want the item to return to its starting\r\n        // position if the user is returning it to its initial container.\r\n        if (index == null && this.sortingDisabled) {\r\n            index = this._draggables.indexOf(item);\r\n        }\r\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\r\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\r\n        // can change when the sort strategy moves the item around inside `enter`.\r\n        this._cacheParentPositions();\r\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\r\n        this._notifyReceivingSiblings();\r\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\r\n    }\r\n    /**\r\n     * Removes an item from the container after it was dragged into another container by the user.\r\n     * @param item Item that was dragged out.\r\n     */\r\n    exit(item) {\r\n        this._reset();\r\n        this.exited.next({ item, container: this });\r\n    }\r\n    /**\r\n     * Drops an item into this container.\r\n     * @param item Item being dropped into the container.\r\n     * @param currentIndex Index at which the item should be inserted.\r\n     * @param previousIndex Index of the item when dragging started.\r\n     * @param previousContainer Container from which the item got dragged in.\r\n     * @param isPointerOverContainer Whether the user's pointer was over the\r\n     *    container when the item was dropped.\r\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\r\n     * @param event Event that triggered the dropping sequence.\r\n     *\r\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\r\n     */\r\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\r\n        this._reset();\r\n        this.dropped.next({\r\n            item,\r\n            currentIndex,\r\n            previousIndex,\r\n            container: this,\r\n            previousContainer,\r\n            isPointerOverContainer,\r\n            distance,\r\n            dropPoint,\r\n            event,\r\n        });\r\n    }\r\n    /**\r\n     * Sets the draggable items that are a part of this list.\r\n     * @param items Items that are a part of this list.\r\n     */\r\n    withItems(items) {\r\n        const previousItems = this._draggables;\r\n        this._draggables = items;\r\n        items.forEach(item => item._withDropContainer(this));\r\n        if (this.isDragging()) {\r\n            const draggedItems = previousItems.filter(item => item.isDragging());\r\n            // If all of the items being dragged were removed\r\n            // from the list, abort the current drag sequence.\r\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\r\n                this._reset();\r\n            }\r\n            else {\r\n                this._sortStrategy.withItems(this._draggables);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /** Sets the layout direction of the drop list. */\r\n    withDirection(direction) {\r\n        this._sortStrategy.direction = direction;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the containers that are connected to this one. When two or more containers are\r\n     * connected, the user will be allowed to transfer items between them.\r\n     * @param connectedTo Other containers that the current containers should be connected to.\r\n     */\r\n    connectedTo(connectedTo) {\r\n        this._siblings = connectedTo.slice();\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets the orientation of the container.\r\n     * @param orientation New orientation for the container.\r\n     */\r\n    withOrientation(orientation) {\r\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\r\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\r\n        this._sortStrategy.orientation = orientation;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets which parent elements are can be scrolled while the user is dragging.\r\n     * @param elements Elements that can be scrolled.\r\n     */\r\n    withScrollableParents(elements) {\r\n        const element = coerceElement(this.element);\r\n        // We always allow the current element to be scrollable\r\n        // so we need to ensure that it's in the array.\r\n        this._scrollableElements =\r\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\r\n        return this;\r\n    }\r\n    /** Gets the scrollable parents that are registered with this drop container. */\r\n    getScrollableParents() {\r\n        return this._scrollableElements;\r\n    }\r\n    /**\r\n     * Figures out the index of an item in the container.\r\n     * @param item Item whose index should be determined.\r\n     */\r\n    getItemIndex(item) {\r\n        return this._isDragging\r\n            ? this._sortStrategy.getItemIndex(item)\r\n            : this._draggables.indexOf(item);\r\n    }\r\n    /**\r\n     * Whether the list is able to receive the item that\r\n     * is currently being dragged inside a connected drop list.\r\n     */\r\n    isReceiving() {\r\n        return this._activeSiblings.size > 0;\r\n    }\r\n    /**\r\n     * Sorts an item inside the container based on its position.\r\n     * @param item Item to be sorted.\r\n     * @param pointerX Position of the item along the X axis.\r\n     * @param pointerY Position of the item along the Y axis.\r\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\r\n     */\r\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\r\n        // Don't sort the item if sorting is disabled or it's out of range.\r\n        if (this.sortingDisabled ||\r\n            !this._clientRect ||\r\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\r\n            return;\r\n        }\r\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\r\n        if (result) {\r\n            this.sorted.next({\r\n                previousIndex: result.previousIndex,\r\n                currentIndex: result.currentIndex,\r\n                container: this,\r\n                item,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Checks whether the user's pointer is close to the edges of either the\r\n     * viewport or the drop list and starts the auto-scroll sequence.\r\n     * @param pointerX User's pointer position along the x axis.\r\n     * @param pointerY User's pointer position along the y axis.\r\n     */\r\n    _startScrollingIfNecessary(pointerX, pointerY) {\r\n        if (this.autoScrollDisabled) {\r\n            return;\r\n        }\r\n        let scrollNode;\r\n        let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\r\n        let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\r\n        // Check whether we should start scrolling any of the parent containers.\r\n        this._parentPositions.positions.forEach((position, element) => {\r\n            // We have special handling for the `document` below. Also this would be\r\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\r\n            if (element === this._document || !position.clientRect || scrollNode) {\r\n                return;\r\n            }\r\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\r\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\r\n                if (verticalScrollDirection || horizontalScrollDirection) {\r\n                    scrollNode = element;\r\n                }\r\n            }\r\n        });\r\n        // Otherwise check if we can start scrolling the viewport.\r\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\r\n            const { width, height } = this._viewportRuler.getViewportSize();\r\n            const clientRect = {\r\n                width,\r\n                height,\r\n                top: 0,\r\n                right: width,\r\n                bottom: height,\r\n                left: 0,\r\n            };\r\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\r\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\r\n            scrollNode = window;\r\n        }\r\n        if (scrollNode &&\r\n            (verticalScrollDirection !== this._verticalScrollDirection ||\r\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\r\n                scrollNode !== this._scrollNode)) {\r\n            this._verticalScrollDirection = verticalScrollDirection;\r\n            this._horizontalScrollDirection = horizontalScrollDirection;\r\n            this._scrollNode = scrollNode;\r\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\r\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\r\n            }\r\n            else {\r\n                this._stopScrolling();\r\n            }\r\n        }\r\n    }\r\n    /** Stops any currently-running auto-scroll sequences. */\r\n    _stopScrolling() {\r\n        this._stopScrollTimers.next();\r\n    }\r\n    /** Starts the dragging sequence within the list. */\r\n    _draggingStarted() {\r\n        const styles = coerceElement(this.element).style;\r\n        this.beforeStarted.next();\r\n        this._isDragging = true;\r\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\r\n        // scrolling. The browser seems to round the value based on the snapping points which means\r\n        // that we can't increment/decrement the scroll position.\r\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\r\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\r\n        this._sortStrategy.start(this._draggables);\r\n        this._cacheParentPositions();\r\n        this._viewportScrollSubscription.unsubscribe();\r\n        this._listenToScrollEvents();\r\n    }\r\n    /** Caches the positions of the configured scrollable parents. */\r\n    _cacheParentPositions() {\r\n        const element = coerceElement(this.element);\r\n        this._parentPositions.cache(this._scrollableElements);\r\n        // The list element is always in the `scrollableElements`\r\n        // so we can take advantage of the cached `ClientRect`.\r\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\r\n    }\r\n    /** Resets the container to its initial state. */\r\n    _reset() {\r\n        this._isDragging = false;\r\n        const styles = coerceElement(this.element).style;\r\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\r\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\r\n        this._sortStrategy.reset();\r\n        this._stopScrolling();\r\n        this._viewportScrollSubscription.unsubscribe();\r\n        this._parentPositions.clear();\r\n    }\r\n    /**\r\n     * Checks whether the user's pointer is positioned over the container.\r\n     * @param x Pointer position along the X axis.\r\n     * @param y Pointer position along the Y axis.\r\n     */\r\n    _isOverContainer(x, y) {\r\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\r\n    }\r\n    /**\r\n     * Figures out whether an item should be moved into a sibling\r\n     * drop container, based on its current position.\r\n     * @param item Drag item that is being moved.\r\n     * @param x Position of the item along the X axis.\r\n     * @param y Position of the item along the Y axis.\r\n     */\r\n    _getSiblingContainerFromPosition(item, x, y) {\r\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\r\n    }\r\n    /**\r\n     * Checks whether the drop list can receive the passed-in item.\r\n     * @param item Item that is being dragged into the list.\r\n     * @param x Position of the item along the X axis.\r\n     * @param y Position of the item along the Y axis.\r\n     */\r\n    _canReceive(item, x, y) {\r\n        if (!this._clientRect ||\r\n            !isInsideClientRect(this._clientRect, x, y) ||\r\n            !this.enterPredicate(item, this)) {\r\n            return false;\r\n        }\r\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\r\n        // If there's no element at the pointer position, then\r\n        // the client rect is probably scrolled out of the view.\r\n        if (!elementFromPoint) {\r\n            return false;\r\n        }\r\n        const nativeElement = coerceElement(this.element);\r\n        // The `ClientRect`, that we're using to find the container over which the user is\r\n        // hovering, doesn't give us any information on whether the element has been scrolled\r\n        // out of the view or whether it's overlapping with other containers. This means that\r\n        // we could end up transferring the item into a container that's invisible or is positioned\r\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\r\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\r\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\r\n    }\r\n    /**\r\n     * Called by one of the connected drop lists when a dragging sequence has started.\r\n     * @param sibling Sibling in which dragging has started.\r\n     */\r\n    _startReceiving(sibling, items) {\r\n        const activeSiblings = this._activeSiblings;\r\n        if (!activeSiblings.has(sibling) &&\r\n            items.every(item => {\r\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\r\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\r\n                // container, if it has left the initial container and none of the connected containers\r\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\r\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\r\n            })) {\r\n            activeSiblings.add(sibling);\r\n            this._cacheParentPositions();\r\n            this._listenToScrollEvents();\r\n            this.receivingStarted.next({\r\n                initiator: sibling,\r\n                receiver: this,\r\n                items,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Called by a connected drop list when dragging has stopped.\r\n     * @param sibling Sibling whose dragging has stopped.\r\n     */\r\n    _stopReceiving(sibling) {\r\n        this._activeSiblings.delete(sibling);\r\n        this._viewportScrollSubscription.unsubscribe();\r\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\r\n    }\r\n    /**\r\n     * Starts listening to scroll events on the viewport.\r\n     * Used for updating the internal state of the list.\r\n     */\r\n    _listenToScrollEvents() {\r\n        this._viewportScrollSubscription = this._dragDropRegistry\r\n            .scrolled(this._getShadowRoot())\r\n            .subscribe(event => {\r\n            if (this.isDragging()) {\r\n                const scrollDifference = this._parentPositions.handleScroll(event);\r\n                if (scrollDifference) {\r\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\r\n                }\r\n            }\r\n            else if (this.isReceiving()) {\r\n                this._cacheParentPositions();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\r\n     * than saving it in property directly on init, because we want to resolve it as late as possible\r\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\r\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\r\n     */\r\n    _getShadowRoot() {\r\n        if (!this._cachedShadowRoot) {\r\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\r\n            this._cachedShadowRoot = (shadowRoot || this._document);\r\n        }\r\n        return this._cachedShadowRoot;\r\n    }\r\n    /** Notifies any siblings that may potentially receive the item. */\r\n    _notifyReceivingSiblings() {\r\n        const draggedItems = this._sortStrategy\r\n            .getActiveItemsSnapshot()\r\n            .filter(item => item.isDragging());\r\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\r\n    }\r\n}\r\n/**\r\n * Gets whether the vertical auto-scroll direction of a node.\r\n * @param clientRect Dimensions of the node.\r\n * @param pointerY Position of the user's pointer along the y axis.\r\n */\r\nfunction getVerticalScrollDirection(clientRect, pointerY) {\r\n    const { top, bottom, height } = clientRect;\r\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\r\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\r\n        return 1 /* AutoScrollVerticalDirection.UP */;\r\n    }\r\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\r\n        return 2 /* AutoScrollVerticalDirection.DOWN */;\r\n    }\r\n    return 0 /* AutoScrollVerticalDirection.NONE */;\r\n}\r\n/**\r\n * Gets whether the horizontal auto-scroll direction of a node.\r\n * @param clientRect Dimensions of the node.\r\n * @param pointerX Position of the user's pointer along the x axis.\r\n */\r\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\r\n    const { left, right, width } = clientRect;\r\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\r\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\r\n        return 1 /* AutoScrollHorizontalDirection.LEFT */;\r\n    }\r\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\r\n        return 2 /* AutoScrollHorizontalDirection.RIGHT */;\r\n    }\r\n    return 0 /* AutoScrollHorizontalDirection.NONE */;\r\n}\r\n/**\r\n * Gets the directions in which an element node should be scrolled,\r\n * assuming that the user's pointer is already within it scrollable region.\r\n * @param element Element for which we should calculate the scroll direction.\r\n * @param clientRect Bounding client rectangle of the element.\r\n * @param pointerX Position of the user's pointer along the x axis.\r\n * @param pointerY Position of the user's pointer along the y axis.\r\n */\r\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\r\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\r\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\r\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\r\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\r\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\r\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\r\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\r\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\r\n    if (computedVertical) {\r\n        const scrollTop = element.scrollTop;\r\n        if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\r\n            if (scrollTop > 0) {\r\n                verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\r\n            }\r\n        }\r\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\r\n            verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\r\n        }\r\n    }\r\n    if (computedHorizontal) {\r\n        const scrollLeft = element.scrollLeft;\r\n        if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\r\n            if (scrollLeft > 0) {\r\n                horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\r\n            }\r\n        }\r\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\r\n            horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\r\n        }\r\n    }\r\n    return [verticalScrollDirection, horizontalScrollDirection];\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Event options that can be used to bind an active, capturing event. */\r\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\r\n    passive: false,\r\n    capture: true,\r\n});\r\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * @docs-private\r\n */\r\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\r\n// to avoid circular imports. If we were to reference them here, importing the registry into the\r\n// classes that are registering themselves will introduce a circular import.\r\nclass DragDropRegistry {\r\n    constructor(_ngZone, _document) {\r\n        this._ngZone = _ngZone;\r\n        /** Registered drop container instances. */\r\n        this._dropInstances = new Set();\r\n        /** Registered drag item instances. */\r\n        this._dragInstances = new Set();\r\n        /** Drag item instances that are currently being dragged. */\r\n        this._activeDragInstances = [];\r\n        /** Keeps track of the event listeners that we've bound to the `document`. */\r\n        this._globalListeners = new Map();\r\n        /**\r\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\r\n         * because it'll be called a lot and we don't want to create a new function every time.\r\n         */\r\n        this._draggingPredicate = (item) => item.isDragging();\r\n        /**\r\n         * Emits the `touchmove` or `mousemove` events that are dispatched\r\n         * while the user is dragging a drag item instance.\r\n         */\r\n        this.pointerMove = new Subject();\r\n        /**\r\n         * Emits the `touchend` or `mouseup` events that are dispatched\r\n         * while the user is dragging a drag item instance.\r\n         */\r\n        this.pointerUp = new Subject();\r\n        /**\r\n         * Emits when the viewport has been scrolled while the user is dragging an item.\r\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\r\n         * @breaking-change 13.0.0\r\n         */\r\n        this.scroll = new Subject();\r\n        /**\r\n         * Event listener that will prevent the default browser action while the user is dragging.\r\n         * @param event Event whose default action should be prevented.\r\n         */\r\n        this._preventDefaultWhileDragging = (event) => {\r\n            if (this._activeDragInstances.length > 0) {\r\n                event.preventDefault();\r\n            }\r\n        };\r\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\r\n        this._persistentTouchmoveListener = (event) => {\r\n            if (this._activeDragInstances.length > 0) {\r\n                // Note that we only want to prevent the default action after dragging has actually started.\r\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\r\n                // but it could be pushed back if the user has set up a drag delay or threshold.\r\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\r\n                    event.preventDefault();\r\n                }\r\n                this.pointerMove.next(event);\r\n            }\r\n        };\r\n        this._document = _document;\r\n    }\r\n    /** Adds a drop container to the registry. */\r\n    registerDropContainer(drop) {\r\n        if (!this._dropInstances.has(drop)) {\r\n            this._dropInstances.add(drop);\r\n        }\r\n    }\r\n    /** Adds a drag item instance to the registry. */\r\n    registerDragItem(drag) {\r\n        this._dragInstances.add(drag);\r\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\r\n        // won't preventDefault on a dynamically-added `touchmove` listener.\r\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\r\n        if (this._dragInstances.size === 1) {\r\n            this._ngZone.runOutsideAngular(() => {\r\n                // The event handler has to be explicitly active,\r\n                // because newer browsers make it passive by default.\r\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\r\n            });\r\n        }\r\n    }\r\n    /** Removes a drop container from the registry. */\r\n    removeDropContainer(drop) {\r\n        this._dropInstances.delete(drop);\r\n    }\r\n    /** Removes a drag item instance from the registry. */\r\n    removeDragItem(drag) {\r\n        this._dragInstances.delete(drag);\r\n        this.stopDragging(drag);\r\n        if (this._dragInstances.size === 0) {\r\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\r\n        }\r\n    }\r\n    /**\r\n     * Starts the dragging sequence for a drag instance.\r\n     * @param drag Drag instance which is being dragged.\r\n     * @param event Event that initiated the dragging.\r\n     */\r\n    startDragging(drag, event) {\r\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\r\n        if (this._activeDragInstances.indexOf(drag) > -1) {\r\n            return;\r\n        }\r\n        this._activeDragInstances.push(drag);\r\n        if (this._activeDragInstances.length === 1) {\r\n            const isTouchEvent = event.type.startsWith('touch');\r\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\r\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\r\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\r\n            this._globalListeners\r\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\r\n                handler: (e) => this.pointerUp.next(e),\r\n                options: true,\r\n            })\r\n                .set('scroll', {\r\n                handler: (e) => this.scroll.next(e),\r\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\r\n                // the document. See https://github.com/angular/components/issues/17144.\r\n                options: true,\r\n            })\r\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\r\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\r\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\r\n                // recalculation which can be expensive on pages with a lot of elements.\r\n                .set('selectstart', {\r\n                handler: this._preventDefaultWhileDragging,\r\n                options: activeCapturingEventOptions,\r\n            });\r\n            // We don't have to bind a move event for touch drag sequences, because\r\n            // we already have a persistent global one bound from `registerDragItem`.\r\n            if (!isTouchEvent) {\r\n                this._globalListeners.set('mousemove', {\r\n                    handler: (e) => this.pointerMove.next(e),\r\n                    options: activeCapturingEventOptions,\r\n                });\r\n            }\r\n            this._ngZone.runOutsideAngular(() => {\r\n                this._globalListeners.forEach((config, name) => {\r\n                    this._document.addEventListener(name, config.handler, config.options);\r\n                });\r\n            });\r\n        }\r\n    }\r\n    /** Stops dragging a drag item instance. */\r\n    stopDragging(drag) {\r\n        const index = this._activeDragInstances.indexOf(drag);\r\n        if (index > -1) {\r\n            this._activeDragInstances.splice(index, 1);\r\n            if (this._activeDragInstances.length === 0) {\r\n                this._clearGlobalListeners();\r\n            }\r\n        }\r\n    }\r\n    /** Gets whether a drag item instance is currently being dragged. */\r\n    isDragging(drag) {\r\n        return this._activeDragInstances.indexOf(drag) > -1;\r\n    }\r\n    /**\r\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\r\n     * dragged.\r\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\r\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\r\n     *   be used to include an additional top-level listener at the shadow root level.\r\n     */\r\n    scrolled(shadowRoot) {\r\n        const streams = [this.scroll];\r\n        if (shadowRoot && shadowRoot !== this._document) {\r\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\r\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\r\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\r\n            streams.push(new Observable((observer) => {\r\n                return this._ngZone.runOutsideAngular(() => {\r\n                    const eventOptions = true;\r\n                    const callback = (event) => {\r\n                        if (this._activeDragInstances.length) {\r\n                            observer.next(event);\r\n                        }\r\n                    };\r\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\r\n                    return () => {\r\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\r\n                    };\r\n                });\r\n            }));\r\n        }\r\n        return merge(...streams);\r\n    }\r\n    ngOnDestroy() {\r\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\r\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\r\n        this._clearGlobalListeners();\r\n        this.pointerMove.complete();\r\n        this.pointerUp.complete();\r\n    }\r\n    /** Clears out the global event listeners from the `document`. */\r\n    _clearGlobalListeners() {\r\n        this._globalListeners.forEach((config, name) => {\r\n            this._document.removeEventListener(name, config.handler, config.options);\r\n        });\r\n        this._globalListeners.clear();\r\n    }\r\n}\r\nDragDropRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\r\nDragDropRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Default configuration to be used when creating a `DragRef`. */\r\nconst DEFAULT_CONFIG = {\r\n    dragStartThreshold: 5,\r\n    pointerDirectionChangeThreshold: 5,\r\n};\r\n/**\r\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\r\n */\r\nclass DragDrop {\r\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\r\n        this._document = _document;\r\n        this._ngZone = _ngZone;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._dragDropRegistry = _dragDropRegistry;\r\n    }\r\n    /**\r\n     * Turns an element into a draggable item.\r\n     * @param element Element to which to attach the dragging functionality.\r\n     * @param config Object used to configure the dragging behavior.\r\n     */\r\n    createDrag(element, config = DEFAULT_CONFIG) {\r\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\r\n    }\r\n    /**\r\n     * Turns an element into a drop list.\r\n     * @param element Element to which to attach the drop list functionality.\r\n     */\r\n    createDropList(element) {\r\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\r\n    }\r\n}\r\nDragDrop.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable });\r\nDragDrop.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: DragDrop, providedIn: 'root' });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: DragDrop, decorators: [{\r\n            type: Injectable,\r\n            args: [{ providedIn: 'root' }]\r\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\r\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\r\n * to avoid circular imports.\r\n * @docs-private\r\n */\r\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\r\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\r\n/**\r\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\r\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\r\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\r\n * from `cdkDropList`.\r\n */\r\nclass CdkDropListGroup {\r\n    constructor() {\r\n        /** Drop lists registered inside the group. */\r\n        this._items = new Set();\r\n        this._disabled = false;\r\n    }\r\n    /** Whether starting a dragging sequence from inside this group is disabled. */\r\n    get disabled() {\r\n        return this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n    }\r\n    ngOnDestroy() {\r\n        this._items.clear();\r\n    }\r\n}\r\nCdkDropListGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\nCdkDropListGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkDropListGroup]',\r\n                    exportAs: 'cdkDropListGroup',\r\n                    standalone: true,\r\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\r\n                }]\r\n        }], propDecorators: { disabled: [{\r\n                type: Input,\r\n                args: ['cdkDropListGroupDisabled']\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used to configure the\r\n * behavior of the drag&drop-related components.\r\n */\r\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Asserts that a particular node is an element.\r\n * @param node Node to be checked.\r\n * @param name Name to attach to the error message.\r\n */\r\nfunction assertElementNode(node, name) {\r\n    if (node.nodeType !== 1) {\r\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Counter used to generate unique ids for drop zones. */\r\nlet _uniqueIdCounter = 0;\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\r\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\r\n/** Container that wraps a set of draggable items. */\r\nclass CdkDropList {\r\n    /** Whether starting a dragging sequence from this container is disabled. */\r\n    get disabled() {\r\n        return this._disabled || (!!this._group && this._group.disabled);\r\n    }\r\n    set disabled(value) {\r\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\r\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\r\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\r\n        // the user in a disabled state, so we also need to sync it as it's being set.\r\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\r\n    }\r\n    constructor(\r\n    /** Element that the drop list is attached to. */\r\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\r\n        this.element = element;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._scrollDispatcher = _scrollDispatcher;\r\n        this._dir = _dir;\r\n        this._group = _group;\r\n        /** Emits when the list has been destroyed. */\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * Other draggable containers that this container is connected to and into which the\r\n         * container's items can be transferred. Can either be references to other drop containers,\r\n         * or their unique IDs.\r\n         */\r\n        this.connectedTo = [];\r\n        /**\r\n         * Unique ID for the drop zone. Can be used as a reference\r\n         * in the `connectedTo` of another `CdkDropList`.\r\n         */\r\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\r\n        /**\r\n         * Function that is used to determine whether an item\r\n         * is allowed to be moved into a drop container.\r\n         */\r\n        this.enterPredicate = () => true;\r\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\r\n        this.sortPredicate = () => true;\r\n        /** Emits when the user drops an item inside the container. */\r\n        this.dropped = new EventEmitter();\r\n        /**\r\n         * Emits when the user has moved a new drag item into this container.\r\n         */\r\n        this.entered = new EventEmitter();\r\n        /**\r\n         * Emits when the user removes an item from the container\r\n         * by dragging it into another container.\r\n         */\r\n        this.exited = new EventEmitter();\r\n        /** Emits as the user is swapping items while actively dragging. */\r\n        this.sorted = new EventEmitter();\r\n        /**\r\n         * Keeps track of the items that are registered with this container. Historically we used to\r\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\r\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\r\n         * correctly. What we do instead is to have the items register themselves with the container\r\n         * and then we sort them based on their position in the DOM.\r\n         */\r\n        this._unsortedItems = new Set();\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            assertElementNode(element.nativeElement, 'cdkDropList');\r\n        }\r\n        this._dropListRef = dragDrop.createDropList(element);\r\n        this._dropListRef.data = this;\r\n        if (config) {\r\n            this._assignDefaults(config);\r\n        }\r\n        this._dropListRef.enterPredicate = (drag, drop) => {\r\n            return this.enterPredicate(drag.data, drop.data);\r\n        };\r\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\r\n            return this.sortPredicate(index, drag.data, drop.data);\r\n        };\r\n        this._setupInputSyncSubscription(this._dropListRef);\r\n        this._handleEvents(this._dropListRef);\r\n        CdkDropList._dropLists.push(this);\r\n        if (_group) {\r\n            _group._items.add(this);\r\n        }\r\n    }\r\n    /** Registers an items with the drop list. */\r\n    addItem(item) {\r\n        this._unsortedItems.add(item);\r\n        if (this._dropListRef.isDragging()) {\r\n            this._syncItemsWithRef();\r\n        }\r\n    }\r\n    /** Removes an item from the drop list. */\r\n    removeItem(item) {\r\n        this._unsortedItems.delete(item);\r\n        if (this._dropListRef.isDragging()) {\r\n            this._syncItemsWithRef();\r\n        }\r\n    }\r\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\r\n    getSortedItems() {\r\n        return Array.from(this._unsortedItems).sort((a, b) => {\r\n            const documentPosition = a._dragRef\r\n                .getVisibleElement()\r\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\r\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\r\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\r\n            // tslint:disable-next-line:no-bitwise\r\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        const index = CdkDropList._dropLists.indexOf(this);\r\n        if (index > -1) {\r\n            CdkDropList._dropLists.splice(index, 1);\r\n        }\r\n        if (this._group) {\r\n            this._group._items.delete(this);\r\n        }\r\n        this._unsortedItems.clear();\r\n        this._dropListRef.dispose();\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    }\r\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\r\n    _setupInputSyncSubscription(ref) {\r\n        if (this._dir) {\r\n            this._dir.change\r\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\r\n                .subscribe(value => ref.withDirection(value));\r\n        }\r\n        ref.beforeStarted.subscribe(() => {\r\n            const siblings = coerceArray(this.connectedTo).map(drop => {\r\n                if (typeof drop === 'string') {\r\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\r\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\r\n                    }\r\n                    return correspondingDropList;\r\n                }\r\n                return drop;\r\n            });\r\n            if (this._group) {\r\n                this._group._items.forEach(drop => {\r\n                    if (siblings.indexOf(drop) === -1) {\r\n                        siblings.push(drop);\r\n                    }\r\n                });\r\n            }\r\n            // Note that we resolve the scrollable parents here so that we delay the resolution\r\n            // as long as possible, ensuring that the element is in its final place in the DOM.\r\n            if (!this._scrollableParentsResolved) {\r\n                const scrollableParents = this._scrollDispatcher\r\n                    .getAncestorScrollContainers(this.element)\r\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\r\n                this._dropListRef.withScrollableParents(scrollableParents);\r\n                // Only do this once since it involves traversing the DOM and the parents\r\n                // shouldn't be able to change without the drop list being destroyed.\r\n                this._scrollableParentsResolved = true;\r\n            }\r\n            ref.disabled = this.disabled;\r\n            ref.lockAxis = this.lockAxis;\r\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\r\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\r\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\r\n            ref\r\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\r\n                .withOrientation(this.orientation);\r\n        });\r\n    }\r\n    /** Handles events from the underlying DropListRef. */\r\n    _handleEvents(ref) {\r\n        ref.beforeStarted.subscribe(() => {\r\n            this._syncItemsWithRef();\r\n            this._changeDetectorRef.markForCheck();\r\n        });\r\n        ref.entered.subscribe(event => {\r\n            this.entered.emit({\r\n                container: this,\r\n                item: event.item.data,\r\n                currentIndex: event.currentIndex,\r\n            });\r\n        });\r\n        ref.exited.subscribe(event => {\r\n            this.exited.emit({\r\n                container: this,\r\n                item: event.item.data,\r\n            });\r\n            this._changeDetectorRef.markForCheck();\r\n        });\r\n        ref.sorted.subscribe(event => {\r\n            this.sorted.emit({\r\n                previousIndex: event.previousIndex,\r\n                currentIndex: event.currentIndex,\r\n                container: this,\r\n                item: event.item.data,\r\n            });\r\n        });\r\n        ref.dropped.subscribe(dropEvent => {\r\n            this.dropped.emit({\r\n                previousIndex: dropEvent.previousIndex,\r\n                currentIndex: dropEvent.currentIndex,\r\n                previousContainer: dropEvent.previousContainer.data,\r\n                container: dropEvent.container.data,\r\n                item: dropEvent.item.data,\r\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\r\n                distance: dropEvent.distance,\r\n                dropPoint: dropEvent.dropPoint,\r\n                event: dropEvent.event,\r\n            });\r\n            // Mark for check since all of these events run outside of change\r\n            // detection and we're not guaranteed for something else to have triggered it.\r\n            this._changeDetectorRef.markForCheck();\r\n        });\r\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\r\n    }\r\n    /** Assigns the default input values based on a provided config object. */\r\n    _assignDefaults(config) {\r\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\r\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\r\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\r\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\r\n        this.orientation = listOrientation || 'vertical';\r\n        if (lockAxis) {\r\n            this.lockAxis = lockAxis;\r\n        }\r\n    }\r\n    /** Syncs up the registered drag items with underlying drop list ref. */\r\n    _syncItemsWithRef() {\r\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\r\n    }\r\n}\r\n/** Keeps track of the drop lists that are currently on the page. */\r\nCdkDropList._dropLists = [];\r\nCdkDropList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i3.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\nCdkDropList.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\r\n        // Prevent child drop lists from picking up the same group as their parent.\r\n        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\r\n        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\r\n    ], exportAs: [\"cdkDropList\"], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDropList, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkDropList], cdk-drop-list',\r\n                    exportAs: 'cdkDropList',\r\n                    standalone: true,\r\n                    providers: [\r\n                        // Prevent child drop lists from picking up the same group as their parent.\r\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\r\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\r\n                    ],\r\n                    host: {\r\n                        'class': 'cdk-drop-list',\r\n                        '[attr.id]': 'id',\r\n                        '[class.cdk-drop-list-disabled]': 'disabled',\r\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\r\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\r\n                    },\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i3.Directionality, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: CdkDropListGroup, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [CDK_DROP_LIST_GROUP]\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [CDK_DRAG_CONFIG]\r\n                }] }]; }, propDecorators: { connectedTo: [{\r\n                type: Input,\r\n                args: ['cdkDropListConnectedTo']\r\n            }], data: [{\r\n                type: Input,\r\n                args: ['cdkDropListData']\r\n            }], orientation: [{\r\n                type: Input,\r\n                args: ['cdkDropListOrientation']\r\n            }], id: [{\r\n                type: Input\r\n            }], lockAxis: [{\r\n                type: Input,\r\n                args: ['cdkDropListLockAxis']\r\n            }], disabled: [{\r\n                type: Input,\r\n                args: ['cdkDropListDisabled']\r\n            }], sortingDisabled: [{\r\n                type: Input,\r\n                args: ['cdkDropListSortingDisabled']\r\n            }], enterPredicate: [{\r\n                type: Input,\r\n                args: ['cdkDropListEnterPredicate']\r\n            }], sortPredicate: [{\r\n                type: Input,\r\n                args: ['cdkDropListSortPredicate']\r\n            }], autoScrollDisabled: [{\r\n                type: Input,\r\n                args: ['cdkDropListAutoScrollDisabled']\r\n            }], autoScrollStep: [{\r\n                type: Input,\r\n                args: ['cdkDropListAutoScrollStep']\r\n            }], dropped: [{\r\n                type: Output,\r\n                args: ['cdkDropListDropped']\r\n            }], entered: [{\r\n                type: Output,\r\n                args: ['cdkDropListEntered']\r\n            }], exited: [{\r\n                type: Output,\r\n                args: ['cdkDropListExited']\r\n            }], sorted: [{\r\n                type: Output,\r\n                args: ['cdkDropListSorted']\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\r\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\r\n/** Handle that can be used to drag a CdkDrag instance. */\r\nclass CdkDragHandle {\r\n    /** Whether starting to drag through this handle is disabled. */\r\n    get disabled() {\r\n        return this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._stateChanges.next(this);\r\n    }\r\n    constructor(element, parentDrag) {\r\n        this.element = element;\r\n        /** Emits when the state of the handle has changed. */\r\n        this._stateChanges = new Subject();\r\n        this._disabled = false;\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\r\n        }\r\n        this._parentDrag = parentDrag;\r\n    }\r\n    ngOnDestroy() {\r\n        this._stateChanges.complete();\r\n    }\r\n}\r\nCdkDragHandle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });\r\nCdkDragHandle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkDragHandle]',\r\n                    standalone: true,\r\n                    host: {\r\n                        'class': 'cdk-drag-handle',\r\n                    },\r\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [CDK_DRAG_PARENT]\r\n                }, {\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }]; }, propDecorators: { disabled: [{\r\n                type: Input,\r\n                args: ['cdkDragHandleDisabled']\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\r\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\r\n/**\r\n * Element that will be used as a template for the placeholder of a CdkDrag when\r\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\r\n */\r\nclass CdkDragPlaceholder {\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n    }\r\n}\r\nCdkDragPlaceholder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nCdkDragPlaceholder.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'ng-template[cdkDragPlaceholder]',\r\n                    standalone: true,\r\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\r\n                type: Input\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\r\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\r\n/**\r\n * Element that will be used as a template for the preview\r\n * of a CdkDrag when it is being dragged.\r\n */\r\nclass CdkDragPreview {\r\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\r\n    get matchSize() {\r\n        return this._matchSize;\r\n    }\r\n    set matchSize(value) {\r\n        this._matchSize = coerceBooleanProperty(value);\r\n    }\r\n    constructor(templateRef) {\r\n        this.templateRef = templateRef;\r\n        this._matchSize = false;\r\n    }\r\n}\r\nCdkDragPreview.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nCdkDragPreview.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'ng-template[cdkDragPreview]',\r\n                    standalone: true,\r\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\r\n                type: Input\r\n            }], matchSize: [{\r\n                type: Input\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst DRAG_HOST_CLASS = 'cdk-drag';\r\n/** Element that can be moved inside a CdkDropList container. */\r\nclass CdkDrag {\r\n    /** Whether starting to drag this element is disabled. */\r\n    get disabled() {\r\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._dragRef.disabled = this._disabled;\r\n    }\r\n    constructor(\r\n    /** Element that the draggable is attached to. */\r\n    element, \r\n    /** Droppable container that the draggable is a part of. */\r\n    dropContainer, \r\n    /**\r\n     * @deprecated `_document` parameter no longer being used and will be removed.\r\n     * @breaking-change 12.0.0\r\n     */\r\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\r\n        this.element = element;\r\n        this.dropContainer = dropContainer;\r\n        this._ngZone = _ngZone;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._dir = _dir;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._selfHandle = _selfHandle;\r\n        this._parentDrag = _parentDrag;\r\n        this._destroyed = new Subject();\r\n        /** Emits when the user starts dragging the item. */\r\n        this.started = new EventEmitter();\r\n        /** Emits when the user has released a drag item, before any animations have started. */\r\n        this.released = new EventEmitter();\r\n        /** Emits when the user stops dragging an item in the container. */\r\n        this.ended = new EventEmitter();\r\n        /** Emits when the user has moved the item into a new container. */\r\n        this.entered = new EventEmitter();\r\n        /** Emits when the user removes the item its container by dragging it into another container. */\r\n        this.exited = new EventEmitter();\r\n        /** Emits when the user drops the item inside a container. */\r\n        this.dropped = new EventEmitter();\r\n        /**\r\n         * Emits as the user is dragging the item. Use with caution,\r\n         * because this event will fire for every pixel that the user has dragged.\r\n         */\r\n        this.moved = new Observable((observer) => {\r\n            const subscription = this._dragRef.moved\r\n                .pipe(map(movedEvent => ({\r\n                source: this,\r\n                pointerPosition: movedEvent.pointerPosition,\r\n                event: movedEvent.event,\r\n                delta: movedEvent.delta,\r\n                distance: movedEvent.distance,\r\n            })))\r\n                .subscribe(observer);\r\n            return () => {\r\n                subscription.unsubscribe();\r\n            };\r\n        });\r\n        this._dragRef = dragDrop.createDrag(element, {\r\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\r\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\r\n                ? config.pointerDirectionChangeThreshold\r\n                : 5,\r\n            zIndex: config?.zIndex,\r\n        });\r\n        this._dragRef.data = this;\r\n        // We have to keep track of the drag instances in order to be able to match an element to\r\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\r\n        // element could be different.\r\n        CdkDrag._dragInstances.push(this);\r\n        if (config) {\r\n            this._assignDefaults(config);\r\n        }\r\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\r\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\r\n        // where there are no items on the first change detection pass, but the items get picked up as\r\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\r\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\r\n        // is too late since the two modes save different kinds of information. We work around it by\r\n        // assigning the drop container both from here and the list.\r\n        if (dropContainer) {\r\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\r\n            dropContainer.addItem(this);\r\n        }\r\n        this._syncInputs(this._dragRef);\r\n        this._handleEvents(this._dragRef);\r\n    }\r\n    /**\r\n     * Returns the element that is being used as a placeholder\r\n     * while the current element is being dragged.\r\n     */\r\n    getPlaceholderElement() {\r\n        return this._dragRef.getPlaceholderElement();\r\n    }\r\n    /** Returns the root draggable element. */\r\n    getRootElement() {\r\n        return this._dragRef.getRootElement();\r\n    }\r\n    /** Resets a standalone drag item to its initial position. */\r\n    reset() {\r\n        this._dragRef.reset();\r\n    }\r\n    /**\r\n     * Gets the pixel coordinates of the draggable outside of a drop container.\r\n     */\r\n    getFreeDragPosition() {\r\n        return this._dragRef.getFreeDragPosition();\r\n    }\r\n    /**\r\n     * Sets the current position in pixels the draggable outside of a drop container.\r\n     * @param value New position to be set.\r\n     */\r\n    setFreeDragPosition(value) {\r\n        this._dragRef.setFreeDragPosition(value);\r\n    }\r\n    ngAfterViewInit() {\r\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\r\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\r\n        this._ngZone.runOutsideAngular(() => {\r\n            // We need to wait for the zone to stabilize, in order for the reference\r\n            // element to be in the proper place in the DOM. This is mostly relevant\r\n            // for draggable elements inside portals since they get stamped out in\r\n            // their original DOM position and then they get transferred to the portal.\r\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\r\n                this._updateRootElement();\r\n                this._setupHandlesListener();\r\n                if (this.freeDragPosition) {\r\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    ngOnChanges(changes) {\r\n        const rootSelectorChange = changes['rootElementSelector'];\r\n        const positionChange = changes['freeDragPosition'];\r\n        // We don't have to react to the first change since it's being\r\n        // handled in `ngAfterViewInit` where it needs to be deferred.\r\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\r\n            this._updateRootElement();\r\n        }\r\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\r\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\r\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.dropContainer) {\r\n            this.dropContainer.removeItem(this);\r\n        }\r\n        const index = CdkDrag._dragInstances.indexOf(this);\r\n        if (index > -1) {\r\n            CdkDrag._dragInstances.splice(index, 1);\r\n        }\r\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\r\n        this._ngZone.runOutsideAngular(() => {\r\n            this._destroyed.next();\r\n            this._destroyed.complete();\r\n            this._dragRef.dispose();\r\n        });\r\n    }\r\n    /** Syncs the root element with the `DragRef`. */\r\n    _updateRootElement() {\r\n        const element = this.element.nativeElement;\r\n        let rootElement = element;\r\n        if (this.rootElementSelector) {\r\n            rootElement =\r\n                element.closest !== undefined\r\n                    ? element.closest(this.rootElementSelector)\r\n                    : // Comment tag doesn't have closest method, so use parent's one.\r\n                        element.parentElement?.closest(this.rootElementSelector);\r\n        }\r\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            assertElementNode(rootElement, 'cdkDrag');\r\n        }\r\n        this._dragRef.withRootElement(rootElement || element);\r\n    }\r\n    /** Gets the boundary element, based on the `boundaryElement` value. */\r\n    _getBoundaryElement() {\r\n        const boundary = this.boundaryElement;\r\n        if (!boundary) {\r\n            return null;\r\n        }\r\n        if (typeof boundary === 'string') {\r\n            return this.element.nativeElement.closest(boundary);\r\n        }\r\n        return coerceElement(boundary);\r\n    }\r\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\r\n    _syncInputs(ref) {\r\n        ref.beforeStarted.subscribe(() => {\r\n            if (!ref.isDragging()) {\r\n                const dir = this._dir;\r\n                const dragStartDelay = this.dragStartDelay;\r\n                const placeholder = this._placeholderTemplate\r\n                    ? {\r\n                        template: this._placeholderTemplate.templateRef,\r\n                        context: this._placeholderTemplate.data,\r\n                        viewContainer: this._viewContainerRef,\r\n                    }\r\n                    : null;\r\n                const preview = this._previewTemplate\r\n                    ? {\r\n                        template: this._previewTemplate.templateRef,\r\n                        context: this._previewTemplate.data,\r\n                        matchSize: this._previewTemplate.matchSize,\r\n                        viewContainer: this._viewContainerRef,\r\n                    }\r\n                    : null;\r\n                ref.disabled = this.disabled;\r\n                ref.lockAxis = this.lockAxis;\r\n                ref.dragStartDelay =\r\n                    typeof dragStartDelay === 'object' && dragStartDelay\r\n                        ? dragStartDelay\r\n                        : coerceNumberProperty(dragStartDelay);\r\n                ref.constrainPosition = this.constrainPosition;\r\n                ref.previewClass = this.previewClass;\r\n                ref\r\n                    .withBoundaryElement(this._getBoundaryElement())\r\n                    .withPlaceholderTemplate(placeholder)\r\n                    .withPreviewTemplate(preview)\r\n                    .withPreviewContainer(this.previewContainer || 'global');\r\n                if (dir) {\r\n                    ref.withDirection(dir.value);\r\n                }\r\n            }\r\n        });\r\n        // This only needs to be resolved once.\r\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\r\n            // If we managed to resolve a parent through DI, use it.\r\n            if (this._parentDrag) {\r\n                ref.withParent(this._parentDrag._dragRef);\r\n                return;\r\n            }\r\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\r\n            // the item was projected into another item by something like `ngTemplateOutlet`.\r\n            let parent = this.element.nativeElement.parentElement;\r\n            while (parent) {\r\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\r\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\r\n                        return drag.element.nativeElement === parent;\r\n                    })?._dragRef || null);\r\n                    break;\r\n                }\r\n                parent = parent.parentElement;\r\n            }\r\n        });\r\n    }\r\n    /** Handles the events from the underlying `DragRef`. */\r\n    _handleEvents(ref) {\r\n        ref.started.subscribe(startEvent => {\r\n            this.started.emit({ source: this, event: startEvent.event });\r\n            // Since all of these events run outside of change detection,\r\n            // we need to ensure that everything is marked correctly.\r\n            this._changeDetectorRef.markForCheck();\r\n        });\r\n        ref.released.subscribe(releaseEvent => {\r\n            this.released.emit({ source: this, event: releaseEvent.event });\r\n        });\r\n        ref.ended.subscribe(endEvent => {\r\n            this.ended.emit({\r\n                source: this,\r\n                distance: endEvent.distance,\r\n                dropPoint: endEvent.dropPoint,\r\n                event: endEvent.event,\r\n            });\r\n            // Since all of these events run outside of change detection,\r\n            // we need to ensure that everything is marked correctly.\r\n            this._changeDetectorRef.markForCheck();\r\n        });\r\n        ref.entered.subscribe(enterEvent => {\r\n            this.entered.emit({\r\n                container: enterEvent.container.data,\r\n                item: this,\r\n                currentIndex: enterEvent.currentIndex,\r\n            });\r\n        });\r\n        ref.exited.subscribe(exitEvent => {\r\n            this.exited.emit({\r\n                container: exitEvent.container.data,\r\n                item: this,\r\n            });\r\n        });\r\n        ref.dropped.subscribe(dropEvent => {\r\n            this.dropped.emit({\r\n                previousIndex: dropEvent.previousIndex,\r\n                currentIndex: dropEvent.currentIndex,\r\n                previousContainer: dropEvent.previousContainer.data,\r\n                container: dropEvent.container.data,\r\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\r\n                item: this,\r\n                distance: dropEvent.distance,\r\n                dropPoint: dropEvent.dropPoint,\r\n                event: dropEvent.event,\r\n            });\r\n        });\r\n    }\r\n    /** Assigns the default input values based on a provided config object. */\r\n    _assignDefaults(config) {\r\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\r\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\r\n        this.dragStartDelay = dragStartDelay || 0;\r\n        if (lockAxis) {\r\n            this.lockAxis = lockAxis;\r\n        }\r\n        if (constrainPosition) {\r\n            this.constrainPosition = constrainPosition;\r\n        }\r\n        if (previewClass) {\r\n            this.previewClass = previewClass;\r\n        }\r\n        if (boundaryElement) {\r\n            this.boundaryElement = boundaryElement;\r\n        }\r\n        if (rootElementSelector) {\r\n            this.rootElementSelector = rootElementSelector;\r\n        }\r\n        if (previewContainer) {\r\n            this.previewContainer = previewContainer;\r\n        }\r\n    }\r\n    /** Sets up the listener that syncs the handles with the drag ref. */\r\n    _setupHandlesListener() {\r\n        // Listen for any newly-added handles.\r\n        this._handles.changes\r\n            .pipe(startWith(this._handles), \r\n        // Sync the new handles with the DragRef.\r\n        tap((handles) => {\r\n            const childHandleElements = handles\r\n                .filter(handle => handle._parentDrag === this)\r\n                .map(handle => handle.element);\r\n            // Usually handles are only allowed to be a descendant of the drag element, but if\r\n            // the consumer defined a different drag root, we should allow the drag element\r\n            // itself to be a handle too.\r\n            if (this._selfHandle && this.rootElementSelector) {\r\n                childHandleElements.push(this.element);\r\n            }\r\n            this._dragRef.withHandles(childHandleElements);\r\n        }), \r\n        // Listen if the state of any of the handles changes.\r\n        switchMap((handles) => {\r\n            return merge(...handles.map(item => {\r\n                return item._stateChanges.pipe(startWith(item));\r\n            }));\r\n        }), takeUntil(this._destroyed))\r\n            .subscribe(handleInstance => {\r\n            // Enabled/disable the handle that changed in the DragRef.\r\n            const dragRef = this._dragRef;\r\n            const handle = handleInstance.element.nativeElement;\r\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\r\n        });\r\n    }\r\n}\r\nCdkDrag._dragInstances = [];\r\nCdkDrag.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i3.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });\r\nCdkDrag.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkDrag, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkDrag]',\r\n                    exportAs: 'cdkDrag',\r\n                    standalone: true,\r\n                    host: {\r\n                        'class': DRAG_HOST_CLASS,\r\n                        '[class.cdk-drag-disabled]': 'disabled',\r\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\r\n                    },\r\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [CDK_DROP_LIST]\r\n                }, {\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DOCUMENT]\r\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [CDK_DRAG_CONFIG]\r\n                }] }, { type: i3.Directionality, decorators: [{\r\n                    type: Optional\r\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Self\r\n                }, {\r\n                    type: Inject,\r\n                    args: [CDK_DRAG_HANDLE]\r\n                }] }, { type: CdkDrag, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: SkipSelf\r\n                }, {\r\n                    type: Inject,\r\n                    args: [CDK_DRAG_PARENT]\r\n                }] }]; }, propDecorators: { _handles: [{\r\n                type: ContentChildren,\r\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\r\n            }], _previewTemplate: [{\r\n                type: ContentChild,\r\n                args: [CDK_DRAG_PREVIEW]\r\n            }], _placeholderTemplate: [{\r\n                type: ContentChild,\r\n                args: [CDK_DRAG_PLACEHOLDER]\r\n            }], data: [{\r\n                type: Input,\r\n                args: ['cdkDragData']\r\n            }], lockAxis: [{\r\n                type: Input,\r\n                args: ['cdkDragLockAxis']\r\n            }], rootElementSelector: [{\r\n                type: Input,\r\n                args: ['cdkDragRootElement']\r\n            }], boundaryElement: [{\r\n                type: Input,\r\n                args: ['cdkDragBoundary']\r\n            }], dragStartDelay: [{\r\n                type: Input,\r\n                args: ['cdkDragStartDelay']\r\n            }], freeDragPosition: [{\r\n                type: Input,\r\n                args: ['cdkDragFreeDragPosition']\r\n            }], disabled: [{\r\n                type: Input,\r\n                args: ['cdkDragDisabled']\r\n            }], constrainPosition: [{\r\n                type: Input,\r\n                args: ['cdkDragConstrainPosition']\r\n            }], previewClass: [{\r\n                type: Input,\r\n                args: ['cdkDragPreviewClass']\r\n            }], previewContainer: [{\r\n                type: Input,\r\n                args: ['cdkDragPreviewContainer']\r\n            }], started: [{\r\n                type: Output,\r\n                args: ['cdkDragStarted']\r\n            }], released: [{\r\n                type: Output,\r\n                args: ['cdkDragReleased']\r\n            }], ended: [{\r\n                type: Output,\r\n                args: ['cdkDragEnded']\r\n            }], entered: [{\r\n                type: Output,\r\n                args: ['cdkDragEntered']\r\n            }], exited: [{\r\n                type: Output,\r\n                args: ['cdkDragExited']\r\n            }], dropped: [{\r\n                type: Output,\r\n                args: ['cdkDragDropped']\r\n            }], moved: [{\r\n                type: Output,\r\n                args: ['cdkDragMoved']\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst DRAG_DROP_DIRECTIVES = [\r\n    CdkDropList,\r\n    CdkDropListGroup,\r\n    CdkDrag,\r\n    CdkDragHandle,\r\n    CdkDragPreview,\r\n    CdkDragPlaceholder,\r\n];\r\nclass DragDropModule {\r\n}\r\nDragDropModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nDragDropModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\r\n        CdkDropListGroup,\r\n        CdkDrag,\r\n        CdkDragHandle,\r\n        CdkDragPreview,\r\n        CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\r\n        CdkDropListGroup,\r\n        CdkDrag,\r\n        CdkDragHandle,\r\n        CdkDragPreview,\r\n        CdkDragPlaceholder] });\r\nDragDropModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: DragDropModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: DRAG_DROP_DIRECTIVES,\r\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\r\n                    providers: [DragDrop],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}