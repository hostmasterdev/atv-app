{"ast":null,"code":"var _class;\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./app.component.scss?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./app.component.html?ngResource\";\nimport { HttpClient } from '@angular/common/http';\nimport { Component, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { merge, of as observableOf } from 'rxjs';\nimport { catchError, map, startWith, switchMap } from 'rxjs/operators';\n/**\r\n * @title Table retrieving data through HTTP\r\n */\nlet AppComponent = (_class = class AppComponent {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n    this.displayedColumns = ['created', 'state', 'number', 'title'];\n    this.data = [];\n    this.resultsLength = 0;\n    this.isLoadingResults = true;\n    this.isRateLimitReached = false;\n  }\n  ngAfterViewInit() {\n    this.exampleDatabase = new ExampleHttpDatabase(this._httpClient);\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => this.paginator.pageIndex = 0);\n    merge(this.sort.sortChange, this.paginator.page).pipe(startWith({}), switchMap(() => {\n      this.isLoadingResults = true;\n      return this.exampleDatabase.getRepoIssues(this.sort.active, this.sort.direction, this.paginator.pageIndex).pipe(catchError(() => observableOf(null)));\n    }), map(data => {\n      // Flip flag to show that loading has finished.\n      this.isLoadingResults = false;\n      this.isRateLimitReached = data === null;\n      if (data === null) {\n        return [];\n      }\n      // Only refresh the result length if there is new data. In case of rate\n      // limit errors, we do not want to reset the paginator to zero, as that\n      // would prevent users from re-triggering requests.\n      this.resultsLength = data.total_count;\n      return data.items;\n    })).subscribe(data => this.data = data);\n  }\n}, _class.ctorParameters = () => [{\n  type: HttpClient\n}], _class.propDecorators = {\n  paginator: [{\n    type: ViewChild,\n    args: [MatPaginator]\n  }],\n  sort: [{\n    type: ViewChild,\n    args: [MatSort]\n  }]\n}, _class);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  template: __NG_CLI_RESOURCE__1,\n  styles: [__NG_CLI_RESOURCE__0]\n})], AppComponent);\nexport { AppComponent };\n/** An example database that the data source uses to retrieve data for the table. */\nexport class ExampleHttpDatabase {\n  constructor(_httpClient) {\n    this._httpClient = _httpClient;\n  }\n  getRepoIssues(sort, order, page) {\n    const href = 'https://run.mocky.io/v3/0d105fe2-0e98-47a6-af35-161b5972035f';\n    const requestUrl = `${href}?q=repo:angular/components&sort=${sort}&order=${order}&page=${page + 1}`;\n    return this._httpClient.get(requestUrl);\n  }\n}\n/**  Copyright 2023 Google LLC. All Rights Reserved.\r\n    Use of this source code is governed by an MIT-style license that\r\n    can be found in the LICENSE file at https://angular.io/license */","map":{"version":3,"mappings":";;;;AAAA,SAAQA,UAAU,QAAO,sBAAsB;AAC/C,SAAQC,SAAS,EAAEC,SAAS,QAAsB,eAAe;AACjE,SAAQC,YAAY,QAAO,6BAA6B;AACxD,SAAQC,OAAO,QAAsB,wBAAwB;AAC7D,SAAQC,KAAK,EAAcC,EAAE,IAAIC,YAAY,QAAO,MAAM;AAC1D,SAAQC,UAAU,EAAEC,GAAG,EAAEC,SAAS,EAAEC,SAAS,QAAO,gBAAgB;AAEpE;;;AAQO,IAAMC,YAAY,aAAlB,MAAMA,YAAY;EAavBC,YAAoBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;IAZ/B,qBAAgB,GAAa,CAAC,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;IAGpE,SAAI,GAAkB,EAAE;IAExB,kBAAa,GAAG,CAAC;IACjB,qBAAgB,GAAG,IAAI;IACvB,uBAAkB,GAAG,KAAK;EAKoB;EAE9CC,eAAe;IACb,IAAI,CAACC,eAAe,GAAG,IAAIC,mBAAmB,CAAC,IAAI,CAACH,WAAW,CAAC;IAEhE;IACA,IAAI,CAACI,IAAI,CAACC,UAAU,CAACC,SAAS,CAAC,MAAO,IAAI,CAACC,SAAS,CAACC,SAAS,GAAG,CAAE,CAAC;IAEpEjB,KAAK,CAAC,IAAI,CAACa,IAAI,CAACC,UAAU,EAAE,IAAI,CAACE,SAAS,CAACE,IAAI,CAAC,CAC7CC,IAAI,CACHd,SAAS,CAAC,EAAE,CAAC,EACbC,SAAS,CAAC,MAAK;MACb,IAAI,CAACc,gBAAgB,GAAG,IAAI;MAC5B,OAAO,IAAI,CAACT,eAAgB,CAACU,aAAa,CACxC,IAAI,CAACR,IAAI,CAACS,MAAM,EAChB,IAAI,CAACT,IAAI,CAACU,SAAS,EACnB,IAAI,CAACP,SAAS,CAACC,SAAS,CACzB,CAACE,IAAI,CAAChB,UAAU,CAAC,MAAMD,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,CAAC,CAAC,EACFE,GAAG,CAACoB,IAAI,IAAG;MACT;MACA,IAAI,CAACJ,gBAAgB,GAAG,KAAK;MAC7B,IAAI,CAACK,kBAAkB,GAAGD,IAAI,KAAK,IAAI;MAEvC,IAAIA,IAAI,KAAK,IAAI,EAAE;QACjB,OAAO,EAAE;;MAGX;MACA;MACA;MACA,IAAI,CAACE,aAAa,GAAGF,IAAI,CAACG,WAAW;MACrC,OAAOH,IAAI,CAACI,KAAK;IACnB,CAAC,CAAC,CACH,CACAb,SAAS,CAACS,IAAI,IAAK,IAAI,CAACA,IAAI,GAAGA,IAAK,CAAC;EAC1C;;;;;UAvCC3B,SAAS;IAAAgC,OAAC/B,YAAY;EAAA;;UACtBD,SAAS;IAAAgC,OAAC9B,OAAO;EAAA;;AAXPQ,YAAY,eALxBX,SAAS,CAAC;EACTkC,QAAQ,EAAE,UAAU;EAEpBC,8BAAiC;;CAClC,CAAC,GACWxB,YAAY,CAkDxB;SAlDYA,YAAY;AAgEzB;AACA,OAAM,MAAOK,mBAAmB;EAC9BJ,YAAoBC,WAAuB;IAAvB,gBAAW,GAAXA,WAAW;EAAe;EAE9CY,aAAa,CAACR,IAAY,EAAEmB,KAAoB,EAAEd,IAAY;IAC5D,MAAMe,IAAI,GAAG,8DAA8D;IAC3E,MAAMC,UAAU,GAAG,GAAGD,IAAI,mCAAmCpB,IAAI,UAAUmB,KAAK,SAC9Ed,IAAI,GAAG,CACT,EAAE;IAEF,OAAO,IAAI,CAACT,WAAW,CAAC0B,GAAG,CAAYD,UAAU,CAAC;EACpD;;AAIF","names":["HttpClient","Component","ViewChild","MatPaginator","MatSort","merge","of","observableOf","catchError","map","startWith","switchMap","AppComponent","constructor","_httpClient","ngAfterViewInit","exampleDatabase","ExampleHttpDatabase","sort","sortChange","subscribe","paginator","pageIndex","page","pipe","isLoadingResults","getRepoIssues","active","direction","data","isRateLimitReached","resultsLength","total_count","items","args","selector","template","order","href","requestUrl","get"],"sourceRoot":"","sources":["C:\\atv-app\\atv-app\\src\\app\\app.component.ts"],"sourcesContent":["import {HttpClient} from '@angular/common/http';\nimport {Component, ViewChild, AfterViewInit} from '@angular/core';\nimport {MatPaginator} from '@angular/material/paginator';\nimport {MatSort, SortDirection} from '@angular/material/sort';\nimport {merge, Observable, of as observableOf} from 'rxjs';\nimport {catchError, map, startWith, switchMap} from 'rxjs/operators';\n\n/**\n * @title Table retrieving data through HTTP\n */\n@Component({\n  selector: 'app-root',\n  styleUrls: ['app.component.scss'],\n  templateUrl: 'app.component.html',\n})\nexport class AppComponent implements AfterViewInit {\n  displayedColumns: string[] = ['created', 'state', 'number', 'title'];\n  /**MAY NEED TO REMOVE ! FROM LINE BELOW: https://stackoverflow.com/questions/49699067/property-has-no-initializer-and-is-not-definitely-assigned-in-the-construc */\n  exampleDatabase: ExampleHttpDatabase | null;\n  data: GithubIssue[] = [];\n\n  resultsLength = 0;\n  isLoadingResults = true;\n  isRateLimitReached = false;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private _httpClient: HttpClient) {}\n\n  ngAfterViewInit() {\n    this.exampleDatabase = new ExampleHttpDatabase(this._httpClient);\n\n    // If the user changes the sort order, reset back to the first page.\n    this.sort.sortChange.subscribe(() => (this.paginator.pageIndex = 0));\n\n    merge(this.sort.sortChange, this.paginator.page)\n      .pipe(\n        startWith({}),\n        switchMap(() => {\n          this.isLoadingResults = true;\n          return this.exampleDatabase!.getRepoIssues(\n            this.sort.active,\n            this.sort.direction,\n            this.paginator.pageIndex,\n          ).pipe(catchError(() => observableOf(null)));\n        }),\n        map(data => {\n          // Flip flag to show that loading has finished.\n          this.isLoadingResults = false;\n          this.isRateLimitReached = data === null;\n\n          if (data === null) {\n            return [];\n          }\n\n          // Only refresh the result length if there is new data. In case of rate\n          // limit errors, we do not want to reset the paginator to zero, as that\n          // would prevent users from re-triggering requests.\n          this.resultsLength = data.total_count;\n          return data.items;\n        }),\n      )\n      .subscribe(data => (this.data = data));\n  }\n}\n\nexport interface GithubApi {\n  items: GithubIssue[];\n  total_count: number;\n}\n\nexport interface GithubIssue {\n  created_at: string;\n  number: string;\n  state: string;\n  title: string;\n}\n\n/** An example database that the data source uses to retrieve data for the table. */\nexport class ExampleHttpDatabase {\n  constructor(private _httpClient: HttpClient) {}\n\n  getRepoIssues(sort: string, order: SortDirection, page: number): Observable<GithubApi> {\n    const href = 'https://run.mocky.io/v3/0d105fe2-0e98-47a6-af35-161b5972035f';\n    const requestUrl = `${href}?q=repo:angular/components&sort=${sort}&order=${order}&page=${\n      page + 1\n    }`;\n\n    return this._httpClient.get<GithubApi>(requestUrl);\n  }\n}\n\n\n/**  Copyright 2023 Google LLC. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license that\n    can be found in the LICENSE file at https://angular.io/license */"]},"metadata":{},"sourceType":"module","externalDependencies":[]}