{"ast":null,"code":"import * as i1 from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/**\r\n * Injection token that can be used to configure the\r\n * default options for all button toggles within an app.\r\n */\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\r\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\r\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\r\n * could cause unnecessary retention of the class and its component metadata.\r\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\r\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n// Counter used to generate unique IDs.\nlet uniqueIdCounter = 0;\n/** Change event object emitted by button toggle. */\nclass MatButtonToggleChange {\n  constructor( /** The button toggle that emits the event. */\n  source, /** The value assigned to the button toggle. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n  /** `name` attribute for the underlying `input` element. */\n  get name() {\n    return this._name;\n  }\n  set name(value) {\n    this._name = value;\n    this._markButtonsForCheck();\n  }\n  /** Whether the toggle group is vertical. */\n  get vertical() {\n    return this._vertical;\n  }\n  set vertical(value) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  /** Value of the toggle group. */\n  get value() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n    return this.multiple ? selected : selected[0] || null;\n  }\n  /** Whether multiple button toggles can be selected. */\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n    this._markButtonsForCheck();\n  }\n  /** Whether multiple button toggle group is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markButtonsForCheck();\n  }\n  constructor(_changeDetector, defaultOptions) {\n    this._changeDetector = _changeDetector;\n    this._vertical = false;\n    this._multiple = false;\n    this._disabled = false;\n    /**\r\n     * The method to be called in order to update ngModel.\r\n     * Now `ngModel` binding is not supported in multiple selection mode.\r\n     */\n    this._controlValueAccessorChangeFn = () => {};\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    this._onTouched = () => {};\n    this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\n    /**\r\n     * Event that emits whenever the value of the group changes.\r\n     * Used to facilitate two-way data binding.\r\n     * @docs-private\r\n     */\n    this.valueChange = new EventEmitter();\n    /** Event emitted when the group's value changes. */\n    this.change = new EventEmitter();\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n  }\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n  /**\r\n   * Sets the model value. Implemented as part of ControlValueAccessor.\r\n   * @param value Value to be set to the model.\r\n   */\n  writeValue(value) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(toggle) {\n    const event = new MatButtonToggleChange(toggle, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n  /**\r\n   * Syncs a button toggle's selected state with the model value.\r\n   * @param toggle Toggle to be synced.\r\n   * @param select Whether the toggle should be selected.\r\n   * @param isUserInput Whether the change was a result of a user interaction.\r\n   * @param deferEvents Whether to defer emitting the change events.\r\n   */\n  _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      this.selected.checked = false;\n    }\n    if (this._selectionModel) {\n      if (select) {\n        this._selectionModel.select(toggle);\n      } else {\n        this._selectionModel.deselect(toggle);\n      }\n    } else {\n      deferEvents = true;\n    }\n    // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n    // the side-effect is that we may end up updating the model value out of sequence in others\n    // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n    if (deferEvents) {\n      Promise.resolve().then(() => this._updateModelValue(toggle, isUserInput));\n    } else {\n      this._updateModelValue(toggle, isUserInput);\n    }\n  }\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle) {\n    return this._selectionModel && this._selectionModel.isSelected(toggle);\n  }\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n    return toggle.value === this._rawValue;\n  }\n  /** Updates the selection state of the toggles in the group based on a value. */\n  _setSelectionByValue(value) {\n    this._rawValue = value;\n    if (!this._buttonToggles) {\n      return;\n    }\n    if (this.multiple && value) {\n      if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n      this._clearSelection();\n      value.forEach(currentValue => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n  /** Clears the selected toggles. */\n  _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n  /** Selects a value if there's a toggle that corresponds to it. */\n  _selectValue(value) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n  /** Syncs up the group's value with the model and emits the change event. */\n  _updateModelValue(toggle, isUserInput) {\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent(toggle);\n    }\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n  /** Marks all of the child button toggles to be checked. */\n  _markButtonsForCheck() {\n    this._buttonToggles?.forEach(toggle => toggle._markForCheck());\n  }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) {\n  return new (t || MatButtonToggleGroup)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\nMatButtonToggleGroup.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatButtonToggleGroup,\n  selectors: [[\"mat-button-toggle-group\"]],\n  contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"],\n  hostVars: 5,\n  hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n      i0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    appearance: \"appearance\",\n    name: \"name\",\n    vertical: \"vertical\",\n    value: \"value\",\n    multiple: \"multiple\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    valueChange: \"valueChange\",\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggleGroup\"],\n  features: [i0.ɵɵProvidersFeature([MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n    provide: MAT_BUTTON_TOGGLE_GROUP,\n    useExisting: MatButtonToggleGroup\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-button-toggle-group',\n      providers: [MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, {\n        provide: MAT_BUTTON_TOGGLE_GROUP,\n        useExisting: MatButtonToggleGroup\n      }],\n      host: {\n        'role': 'group',\n        'class': 'mat-button-toggle-group',\n        '[attr.aria-disabled]': 'disabled',\n        '[class.mat-button-toggle-vertical]': 'vertical',\n        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n      },\n      exportAs: 'matButtonToggleGroup'\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    _buttonToggles: [{\n      type: ContentChildren,\n      args: [forwardRef(() => MatButtonToggle), {\n        // Note that this would technically pick up toggles\n        // from nested groups, but that's not a case that we support.\n        descendants: true\n      }]\n    }],\n    appearance: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    vertical: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }]\n  });\n})();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nconst _MatButtonToggleBase = mixinDisableRipple(class {});\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleBase {\n  /** Unique ID for the underlying `button` element. */\n  get buttonId() {\n    return `${this.id}-button`;\n  }\n  /** The appearance style of the button. */\n  get appearance() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value) {\n    this._appearance = value;\n  }\n  /** Whether the button is checked. */\n  get checked() {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Whether the button is disabled. */\n  get disabled() {\n    return this._disabled || this.buttonToggleGroup && this.buttonToggleGroup.disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n    super();\n    this._changeDetectorRef = _changeDetectorRef;\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this._checked = false;\n    /**\r\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n     */\n    this.ariaLabelledby = null;\n    this._disabled = false;\n    /** Event emitted when the group value changes. */\n    this.change = new EventEmitter();\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance = defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n  ngOnInit() {\n    const group = this.buttonToggleGroup;\n    this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\n    if (group) {\n      if (group._isPrechecked(this)) {\n        this.checked = true;\n      } else if (group._isSelected(this) !== this._checked) {\n        // As as side effect of the circular dependency between the toggle group and the button,\n        // we may end up in a state where the button is supposed to be checked on init, but it\n        // isn't, because the checked value was assigned too early. This can happen when Ivy\n        // assigns the static input value before the `ngOnInit` has run.\n        group._syncButtonToggle(this, this._checked);\n      }\n    }\n  }\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n  ngOnDestroy() {\n    const group = this.buttonToggleGroup;\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    // Remove the toggle from the selection once it's destroyed. Needs to happen\n    // on the next tick in order to avoid \"changed after checked\" errors.\n    if (group && group._isSelected(this)) {\n      group._syncButtonToggle(this, false, false, true);\n    }\n  }\n  /** Focuses the button. */\n  focus(options) {\n    this._buttonElement.nativeElement.focus(options);\n  }\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector() ? true : !this._checked;\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n  /**\r\n   * Marks the button toggle as needing checking for change detection.\r\n   * This method is exposed because the parent button toggle group will directly\r\n   * update bound properties of the radio button.\r\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n  /** Gets the name that should be assigned to the inner DOM node. */\n  _getButtonName() {\n    if (this._isSingleSelector()) {\n      return this.buttonToggleGroup.name;\n    }\n    return this.name || null;\n  }\n  /** Whether the toggle is in single selection mode. */\n  _isSingleSelector() {\n    return this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n  }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) {\n  return new (t || MatButtonToggle)(i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵinjectAttribute('tabindex'), i0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8));\n};\nMatButtonToggle.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatButtonToggle,\n  selectors: [[\"mat-button-toggle\"]],\n  viewQuery: function MatButtonToggle_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"],\n  hostVars: 12,\n  hostBindings: function MatButtonToggle_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() {\n        return ctx.focus();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n      i0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    }\n  },\n  inputs: {\n    disableRipple: \"disableRipple\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    id: \"id\",\n    name: \"name\",\n    value: \"value\",\n    tabIndex: \"tabIndex\",\n    appearance: \"appearance\",\n    checked: \"checked\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    change: \"change\"\n  },\n  exportAs: [\"matButtonToggle\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 6,\n  vars: 9,\n  consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]],\n  template: function MatButtonToggle_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"button\", 0, 1);\n      i0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() {\n        return ctx._onButtonClick();\n      });\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵprojection(3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(4, \"span\", 3)(5, \"span\", 4);\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      i0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n      i0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx._getButtonName())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    }\n  },\n  dependencies: [i2.MatRipple],\n  styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatButtonToggle, [{\n    type: Component,\n    args: [{\n      selector: 'mat-button-toggle',\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matButtonToggle',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      inputs: ['disableRipple'],\n      host: {\n        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mat-button-toggle-checked]': 'checked',\n        '[class.mat-button-toggle-disabled]': 'disabled',\n        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n        'class': 'mat-button-toggle',\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.id]': 'id',\n        '[attr.name]': 'null',\n        '(focus)': 'focus()',\n        'role': 'presentation'\n      },\n      template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"_getButtonName()\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n      styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"]\n    }]\n  }], function () {\n    return [{\n      type: MatButtonToggleGroup,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_GROUP]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    _buttonElement: [{\n      type: ViewChild,\n      args: ['button']\n    }],\n    id: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    appearance: [{\n      type: Input\n    }],\n    checked: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }]\n  });\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nclass MatButtonToggleModule {}\nMatButtonToggleModule.ɵfac = function MatButtonToggleModule_Factory(t) {\n  return new (t || MatButtonToggleModule)();\n};\nMatButtonToggleModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatButtonToggleModule\n});\nMatButtonToggleModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [MatCommonModule, MatRippleModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatButtonToggleModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatRippleModule],\n      exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n      declarations: [MatButtonToggleGroup, MatButtonToggle]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };","map":{"version":3,"names":["i1","coerceBooleanProperty","SelectionModel","i0","InjectionToken","forwardRef","EventEmitter","Directive","Optional","Inject","ContentChildren","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Attribute","ViewChild","NgModule","NG_VALUE_ACCESSOR","i2","mixinDisableRipple","MatCommonModule","MatRippleModule","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","provide","useExisting","MatButtonToggleGroup","multi","uniqueIdCounter","MatButtonToggleChange","constructor","source","value","name","_name","_markButtonsForCheck","vertical","_vertical","selected","_selectionModel","multiple","map","toggle","undefined","newValue","_setSelectionByValue","valueChange","emit","_multiple","disabled","_disabled","_changeDetector","defaultOptions","_controlValueAccessorChangeFn","_onTouched","change","appearance","ngOnInit","ngAfterContentInit","select","_buttonToggles","filter","checked","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_emitChangeEvent","event","_syncButtonToggle","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","_isSelected","isSelected","_isPrechecked","_rawValue","Array","isArray","some","ngDevMode","Error","_clearSelection","forEach","currentValue","_selectValue","clear","correspondingOption","find","_markForCheck","ɵfac","ChangeDetectorRef","ɵdir","MatButtonToggle","type","args","selector","providers","host","exportAs","decorators","descendants","_MatButtonToggleBase","buttonId","id","buttonToggleGroup","_appearance","_checked","_changeDetectorRef","toggleGroup","_elementRef","_focusMonitor","defaultTabIndex","ariaLabelledby","parsedTabIndex","Number","tabIndex","group","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","focus","options","_buttonElement","nativeElement","_onButtonClick","newChecked","_isSingleSelector","_getButtonName","ElementRef","FocusMonitor","ɵcmp","MatRipple","encapsulation","None","changeDetection","OnPush","inputs","template","styles","ariaLabel","MatButtonToggleModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/atv-app/node_modules/@angular/material/fesm2020/button-toggle.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport * as i0 from '@angular/core';\r\nimport { InjectionToken, forwardRef, EventEmitter, Directive, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, ViewChild, NgModule } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport * as i2 from '@angular/material/core';\r\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Injection token that can be used to configure the\r\n * default options for all button toggles within an app.\r\n */\r\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\r\n/**\r\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\r\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\r\n * could cause unnecessary retention of the class and its component metadata.\r\n */\r\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\r\n/**\r\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * @docs-private\r\n */\r\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => MatButtonToggleGroup),\r\n    multi: true,\r\n};\r\n// Counter used to generate unique IDs.\r\nlet uniqueIdCounter = 0;\r\n/** Change event object emitted by button toggle. */\r\nclass MatButtonToggleChange {\r\n    constructor(\r\n    /** The button toggle that emits the event. */\r\n    source, \r\n    /** The value assigned to the button toggle. */\r\n    value) {\r\n        this.source = source;\r\n        this.value = value;\r\n    }\r\n}\r\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\r\nclass MatButtonToggleGroup {\r\n    /** `name` attribute for the underlying `input` element. */\r\n    get name() {\r\n        return this._name;\r\n    }\r\n    set name(value) {\r\n        this._name = value;\r\n        this._markButtonsForCheck();\r\n    }\r\n    /** Whether the toggle group is vertical. */\r\n    get vertical() {\r\n        return this._vertical;\r\n    }\r\n    set vertical(value) {\r\n        this._vertical = coerceBooleanProperty(value);\r\n    }\r\n    /** Value of the toggle group. */\r\n    get value() {\r\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\r\n        if (this.multiple) {\r\n            return selected.map(toggle => toggle.value);\r\n        }\r\n        return selected[0] ? selected[0].value : undefined;\r\n    }\r\n    set value(newValue) {\r\n        this._setSelectionByValue(newValue);\r\n        this.valueChange.emit(this.value);\r\n    }\r\n    /** Selected button toggles in the group. */\r\n    get selected() {\r\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\r\n        return this.multiple ? selected : selected[0] || null;\r\n    }\r\n    /** Whether multiple button toggles can be selected. */\r\n    get multiple() {\r\n        return this._multiple;\r\n    }\r\n    set multiple(value) {\r\n        this._multiple = coerceBooleanProperty(value);\r\n        this._markButtonsForCheck();\r\n    }\r\n    /** Whether multiple button toggle group is disabled. */\r\n    get disabled() {\r\n        return this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._markButtonsForCheck();\r\n    }\r\n    constructor(_changeDetector, defaultOptions) {\r\n        this._changeDetector = _changeDetector;\r\n        this._vertical = false;\r\n        this._multiple = false;\r\n        this._disabled = false;\r\n        /**\r\n         * The method to be called in order to update ngModel.\r\n         * Now `ngModel` binding is not supported in multiple selection mode.\r\n         */\r\n        this._controlValueAccessorChangeFn = () => { };\r\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\r\n        this._onTouched = () => { };\r\n        this._name = `mat-button-toggle-group-${uniqueIdCounter++}`;\r\n        /**\r\n         * Event that emits whenever the value of the group changes.\r\n         * Used to facilitate two-way data binding.\r\n         * @docs-private\r\n         */\r\n        this.valueChange = new EventEmitter();\r\n        /** Event emitted when the group's value changes. */\r\n        this.change = new EventEmitter();\r\n        this.appearance =\r\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\r\n    }\r\n    ngOnInit() {\r\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\r\n    }\r\n    ngAfterContentInit() {\r\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\r\n    }\r\n    /**\r\n     * Sets the model value. Implemented as part of ControlValueAccessor.\r\n     * @param value Value to be set to the model.\r\n     */\r\n    writeValue(value) {\r\n        this.value = value;\r\n        this._changeDetector.markForCheck();\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnChange(fn) {\r\n        this._controlValueAccessorChangeFn = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    /** Dispatch change event with current selection and group value. */\r\n    _emitChangeEvent(toggle) {\r\n        const event = new MatButtonToggleChange(toggle, this.value);\r\n        this._controlValueAccessorChangeFn(event.value);\r\n        this.change.emit(event);\r\n    }\r\n    /**\r\n     * Syncs a button toggle's selected state with the model value.\r\n     * @param toggle Toggle to be synced.\r\n     * @param select Whether the toggle should be selected.\r\n     * @param isUserInput Whether the change was a result of a user interaction.\r\n     * @param deferEvents Whether to defer emitting the change events.\r\n     */\r\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\r\n        // Deselect the currently-selected toggle, if we're in single-selection\r\n        // mode and the button being toggled isn't selected at the moment.\r\n        if (!this.multiple && this.selected && !toggle.checked) {\r\n            this.selected.checked = false;\r\n        }\r\n        if (this._selectionModel) {\r\n            if (select) {\r\n                this._selectionModel.select(toggle);\r\n            }\r\n            else {\r\n                this._selectionModel.deselect(toggle);\r\n            }\r\n        }\r\n        else {\r\n            deferEvents = true;\r\n        }\r\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\r\n        // the side-effect is that we may end up updating the model value out of sequence in others\r\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\r\n        if (deferEvents) {\r\n            Promise.resolve().then(() => this._updateModelValue(toggle, isUserInput));\r\n        }\r\n        else {\r\n            this._updateModelValue(toggle, isUserInput);\r\n        }\r\n    }\r\n    /** Checks whether a button toggle is selected. */\r\n    _isSelected(toggle) {\r\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\r\n    }\r\n    /** Determines whether a button toggle should be checked on init. */\r\n    _isPrechecked(toggle) {\r\n        if (typeof this._rawValue === 'undefined') {\r\n            return false;\r\n        }\r\n        if (this.multiple && Array.isArray(this._rawValue)) {\r\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\r\n        }\r\n        return toggle.value === this._rawValue;\r\n    }\r\n    /** Updates the selection state of the toggles in the group based on a value. */\r\n    _setSelectionByValue(value) {\r\n        this._rawValue = value;\r\n        if (!this._buttonToggles) {\r\n            return;\r\n        }\r\n        if (this.multiple && value) {\r\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n                throw Error('Value must be an array in multiple-selection mode.');\r\n            }\r\n            this._clearSelection();\r\n            value.forEach((currentValue) => this._selectValue(currentValue));\r\n        }\r\n        else {\r\n            this._clearSelection();\r\n            this._selectValue(value);\r\n        }\r\n    }\r\n    /** Clears the selected toggles. */\r\n    _clearSelection() {\r\n        this._selectionModel.clear();\r\n        this._buttonToggles.forEach(toggle => (toggle.checked = false));\r\n    }\r\n    /** Selects a value if there's a toggle that corresponds to it. */\r\n    _selectValue(value) {\r\n        const correspondingOption = this._buttonToggles.find(toggle => {\r\n            return toggle.value != null && toggle.value === value;\r\n        });\r\n        if (correspondingOption) {\r\n            correspondingOption.checked = true;\r\n            this._selectionModel.select(correspondingOption);\r\n        }\r\n    }\r\n    /** Syncs up the group's value with the model and emits the change event. */\r\n    _updateModelValue(toggle, isUserInput) {\r\n        // Only emit the change event for user input.\r\n        if (isUserInput) {\r\n            this._emitChangeEvent(toggle);\r\n        }\r\n        // Note: we emit this one no matter whether it was a user interaction, because\r\n        // it is used by Angular to sync up the two-way data binding.\r\n        this.valueChange.emit(this.value);\r\n    }\r\n    /** Marks all of the child button toggles to be checked. */\r\n    _markButtonsForCheck() {\r\n        this._buttonToggles?.forEach(toggle => toggle._markForCheck());\r\n    }\r\n}\r\nMatButtonToggleGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleGroup, deps: [{ token: i0.ChangeDetectorRef }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\r\nMatButtonToggleGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatButtonToggleGroup, selector: \"mat-button-toggle-group\", inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, host: { attributes: { \"role\": \"group\" }, properties: { \"attr.aria-disabled\": \"disabled\", \"class.mat-button-toggle-vertical\": \"vertical\", \"class.mat-button-toggle-group-appearance-standard\": \"appearance === \\\"standard\\\"\" }, classAttribute: \"mat-button-toggle-group\" }, providers: [\r\n        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\r\n        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\r\n    ], queries: [{ propertyName: \"_buttonToggles\", predicate: i0.forwardRef(function () { return MatButtonToggle; }), descendants: true }], exportAs: [\"matButtonToggleGroup\"], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleGroup, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: 'mat-button-toggle-group',\r\n                    providers: [\r\n                        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\r\n                        { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\r\n                    ],\r\n                    host: {\r\n                        'role': 'group',\r\n                        'class': 'mat-button-toggle-group',\r\n                        '[attr.aria-disabled]': 'disabled',\r\n                        '[class.mat-button-toggle-vertical]': 'vertical',\r\n                        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\r\n                    },\r\n                    exportAs: 'matButtonToggleGroup',\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\r\n                }] }]; }, propDecorators: { _buttonToggles: [{\r\n                type: ContentChildren,\r\n                args: [forwardRef(() => MatButtonToggle), {\r\n                        // Note that this would technically pick up toggles\r\n                        // from nested groups, but that's not a case that we support.\r\n                        descendants: true,\r\n                    }]\r\n            }], appearance: [{\r\n                type: Input\r\n            }], name: [{\r\n                type: Input\r\n            }], vertical: [{\r\n                type: Input\r\n            }], value: [{\r\n                type: Input\r\n            }], valueChange: [{\r\n                type: Output\r\n            }], multiple: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], change: [{\r\n                type: Output\r\n            }] } });\r\n// Boilerplate for applying mixins to the MatButtonToggle class.\r\n/** @docs-private */\r\nconst _MatButtonToggleBase = mixinDisableRipple(class {\r\n});\r\n/** Single button inside of a toggle group. */\r\nclass MatButtonToggle extends _MatButtonToggleBase {\r\n    /** Unique ID for the underlying `button` element. */\r\n    get buttonId() {\r\n        return `${this.id}-button`;\r\n    }\r\n    /** The appearance style of the button. */\r\n    get appearance() {\r\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\r\n    }\r\n    set appearance(value) {\r\n        this._appearance = value;\r\n    }\r\n    /** Whether the button is checked. */\r\n    get checked() {\r\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\r\n    }\r\n    set checked(value) {\r\n        const newValue = coerceBooleanProperty(value);\r\n        if (newValue !== this._checked) {\r\n            this._checked = newValue;\r\n            if (this.buttonToggleGroup) {\r\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\r\n            }\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /** Whether the button is disabled. */\r\n    get disabled() {\r\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n    }\r\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\r\n        super();\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._elementRef = _elementRef;\r\n        this._focusMonitor = _focusMonitor;\r\n        this._checked = false;\r\n        /**\r\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n         */\r\n        this.ariaLabelledby = null;\r\n        this._disabled = false;\r\n        /** Event emitted when the group value changes. */\r\n        this.change = new EventEmitter();\r\n        const parsedTabIndex = Number(defaultTabIndex);\r\n        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\r\n        this.buttonToggleGroup = toggleGroup;\r\n        this.appearance =\r\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\r\n    }\r\n    ngOnInit() {\r\n        const group = this.buttonToggleGroup;\r\n        this.id = this.id || `mat-button-toggle-${uniqueIdCounter++}`;\r\n        if (group) {\r\n            if (group._isPrechecked(this)) {\r\n                this.checked = true;\r\n            }\r\n            else if (group._isSelected(this) !== this._checked) {\r\n                // As as side effect of the circular dependency between the toggle group and the button,\r\n                // we may end up in a state where the button is supposed to be checked on init, but it\r\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\r\n                // assigns the static input value before the `ngOnInit` has run.\r\n                group._syncButtonToggle(this, this._checked);\r\n            }\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        this._focusMonitor.monitor(this._elementRef, true);\r\n    }\r\n    ngOnDestroy() {\r\n        const group = this.buttonToggleGroup;\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\r\n        // on the next tick in order to avoid \"changed after checked\" errors.\r\n        if (group && group._isSelected(this)) {\r\n            group._syncButtonToggle(this, false, false, true);\r\n        }\r\n    }\r\n    /** Focuses the button. */\r\n    focus(options) {\r\n        this._buttonElement.nativeElement.focus(options);\r\n    }\r\n    /** Checks the button toggle due to an interaction with the underlying native button. */\r\n    _onButtonClick() {\r\n        const newChecked = this._isSingleSelector() ? true : !this._checked;\r\n        if (newChecked !== this._checked) {\r\n            this._checked = newChecked;\r\n            if (this.buttonToggleGroup) {\r\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\r\n                this.buttonToggleGroup._onTouched();\r\n            }\r\n        }\r\n        // Emit a change event when it's the single selector\r\n        this.change.emit(new MatButtonToggleChange(this, this.value));\r\n    }\r\n    /**\r\n     * Marks the button toggle as needing checking for change detection.\r\n     * This method is exposed because the parent button toggle group will directly\r\n     * update bound properties of the radio button.\r\n     */\r\n    _markForCheck() {\r\n        // When the group value changes, the button will not be notified.\r\n        // Use `markForCheck` to explicit update button toggle's status.\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /** Gets the name that should be assigned to the inner DOM node. */\r\n    _getButtonName() {\r\n        if (this._isSingleSelector()) {\r\n            return this.buttonToggleGroup.name;\r\n        }\r\n        return this.name || null;\r\n    }\r\n    /** Whether the toggle is in single selection mode. */\r\n    _isSingleSelector() {\r\n        return this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\r\n    }\r\n}\r\nMatButtonToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggle, deps: [{ token: MAT_BUTTON_TOGGLE_GROUP, optional: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i1.FocusMonitor }, { token: 'tabindex', attribute: true }, { token: MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\r\nMatButtonToggle.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: MatButtonToggle, selector: \"mat-button-toggle\", inputs: { disableRipple: \"disableRipple\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", name: \"name\", value: \"value\", tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\" }, outputs: { change: \"change\" }, host: { attributes: { \"role\": \"presentation\" }, listeners: { \"focus\": \"focus()\" }, properties: { \"class.mat-button-toggle-standalone\": \"!buttonToggleGroup\", \"class.mat-button-toggle-checked\": \"checked\", \"class.mat-button-toggle-disabled\": \"disabled\", \"class.mat-button-toggle-appearance-standard\": \"appearance === \\\"standard\\\"\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.id\": \"id\", \"attr.name\": \"null\" }, classAttribute: \"mat-button-toggle\" }, viewQueries: [{ propertyName: \"_buttonElement\", first: true, predicate: [\"button\"], descendants: true }], exportAs: [\"matButtonToggle\"], usesInheritance: true, ngImport: i0, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"_getButtonName()\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"], dependencies: [{ kind: \"directive\", type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggle, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'mat-button-toggle', encapsulation: ViewEncapsulation.None, exportAs: 'matButtonToggle', changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disableRipple'], host: {\r\n                        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\r\n                        '[class.mat-button-toggle-checked]': 'checked',\r\n                        '[class.mat-button-toggle-disabled]': 'disabled',\r\n                        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\r\n                        'class': 'mat-button-toggle',\r\n                        '[attr.aria-label]': 'null',\r\n                        '[attr.aria-labelledby]': 'null',\r\n                        '[attr.id]': 'id',\r\n                        '[attr.name]': 'null',\r\n                        '(focus)': 'focus()',\r\n                        'role': 'presentation',\r\n                    }, template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"_getButtonName()\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\", styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:rgba(0,0,0,0);transform:translateZ(0)}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;pointer-events:none;opacity:0}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px;opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked:hover .mat-button-toggle-focus-overlay{opacity:.6}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"] }]\r\n        }], ctorParameters: function () { return [{ type: MatButtonToggleGroup, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_BUTTON_TOGGLE_GROUP]\r\n                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\r\n                    type: Attribute,\r\n                    args: ['tabindex']\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Optional\r\n                }, {\r\n                    type: Inject,\r\n                    args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\r\n                }] }]; }, propDecorators: { ariaLabel: [{\r\n                type: Input,\r\n                args: ['aria-label']\r\n            }], ariaLabelledby: [{\r\n                type: Input,\r\n                args: ['aria-labelledby']\r\n            }], _buttonElement: [{\r\n                type: ViewChild,\r\n                args: ['button']\r\n            }], id: [{\r\n                type: Input\r\n            }], name: [{\r\n                type: Input\r\n            }], value: [{\r\n                type: Input\r\n            }], tabIndex: [{\r\n                type: Input\r\n            }], appearance: [{\r\n                type: Input\r\n            }], checked: [{\r\n                type: Input\r\n            }], disabled: [{\r\n                type: Input\r\n            }], change: [{\r\n                type: Output\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MatButtonToggleModule {\r\n}\r\nMatButtonToggleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nMatButtonToggleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleModule, declarations: [MatButtonToggleGroup, MatButtonToggle], imports: [MatCommonModule, MatRippleModule], exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle] });\r\nMatButtonToggleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleModule, imports: [MatCommonModule, MatRippleModule, MatCommonModule] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: MatButtonToggleModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [MatCommonModule, MatRippleModule],\r\n                    exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\r\n                    declarations: [MatButtonToggleGroup, MatButtonToggle],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}