{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { inject, ElementRef, Directive, Input, ChangeDetectorRef, forwardRef, Output, ContentChildren, NgModule } from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { A, hasModifierKey, SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport { coerceBooleanProperty, coerceArray } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, map, takeUntil, filter } from 'rxjs/operators';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n/** The next id to use for creating unique DOM IDs. */\nlet nextId = 0;\n/**\r\n * An implementation of SelectionModel that internally always represents the selection as a\r\n * multi-selection. This is necessary so that we can recover the full selection if the user\r\n * switches the listbox from single-selection to multi-selection after initialization.\r\n *\r\n * This selection model may report multiple selected values, even if it is in single-selection\r\n * mode. It is up to the user (CdkListbox) to check for invalid selections.\r\n */\nclass ListboxSelectionModel extends SelectionModel {\n  constructor(multiple = false, initiallySelectedValues, emitChanges = true, compareWith) {\n    super(true, initiallySelectedValues, emitChanges, compareWith);\n    this.multiple = multiple;\n  }\n  isMultipleSelection() {\n    return this.multiple;\n  }\n  select(...values) {\n    // The super class is always in multi-selection mode, so we need to override the behavior if\n    // this selection model actually belongs to a single-selection listbox.\n    if (this.multiple) {\n      return super.select(...values);\n    } else {\n      return super.setSelection(...values);\n    }\n  }\n}\n/** A selectable option in a listbox. */\nclass CdkOption {\n  constructor() {\n    this._generatedId = `cdk-option-${nextId++}`;\n    this._disabled = false;\n    /** The option's host element */\n    this.element = inject(ElementRef).nativeElement;\n    /** The parent listbox this option belongs to. */\n    this.listbox = inject(CdkListbox);\n    /** Emits when the option is destroyed. */\n    this.destroyed = new Subject();\n    /** Emits when the option is clicked. */\n    this._clicked = new Subject();\n  }\n  /** The id of the option's host element. */\n  get id() {\n    return this._id || this._generatedId;\n  }\n  set id(value) {\n    this._id = value;\n  }\n  /** Whether this option is disabled. */\n  get disabled() {\n    return this.listbox.disabled || this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** The tabindex of the option when it is enabled. */\n  get enabledTabIndex() {\n    return this._enabledTabIndex === undefined ? this.listbox.enabledTabIndex : this._enabledTabIndex;\n  }\n  set enabledTabIndex(value) {\n    this._enabledTabIndex = value;\n  }\n  ngOnDestroy() {\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n  /** Whether this option is selected. */\n  isSelected() {\n    return this.listbox.isSelected(this);\n  }\n  /** Whether this option is active. */\n  isActive() {\n    return this.listbox.isActive(this);\n  }\n  /** Toggle the selected state of this option. */\n  toggle() {\n    this.listbox.toggle(this);\n  }\n  /** Select this option if it is not selected. */\n  select() {\n    this.listbox.select(this);\n  }\n  /** Deselect this option if it is selected. */\n  deselect() {\n    this.listbox.deselect(this);\n  }\n  /** Focus this option. */\n  focus() {\n    this.element.focus();\n  }\n  /** Get the label for this element which is required by the FocusableOption interface. */\n  getLabel() {\n    return (this.typeaheadLabel ?? this.element.textContent?.trim()) || '';\n  }\n  /**\r\n   * No-op implemented as a part of `Highlightable`.\r\n   * @docs-private\r\n   */\n  setActiveStyles() {}\n  /**\r\n   * No-op implemented as a part of `Highlightable`.\r\n   * @docs-private\r\n   */\n  setInactiveStyles() {}\n  /** Handle focus events on the option. */\n  _handleFocus() {\n    // Options can wind up getting focused in active descendant mode if the user clicks on them.\n    // In this case, we push focus back to the parent listbox to prevent an extra tab stop when\n    // the user performs a shift+tab.\n    if (this.listbox.useActiveDescendant) {\n      this.listbox._setActiveOption(this);\n      this.listbox.focus();\n    }\n  }\n  /** Get the tabindex for this option. */\n  _getTabIndex() {\n    if (this.listbox.useActiveDescendant || this.disabled) {\n      return -1;\n    }\n    return this.isActive() ? this.enabledTabIndex : -1;\n  }\n}\nCdkOption.ɵfac = function CdkOption_Factory(t) {\n  return new (t || CdkOption)();\n};\nCdkOption.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkOption,\n  selectors: [[\"\", \"cdkOption\", \"\"]],\n  hostAttrs: [\"role\", \"option\", 1, \"cdk-option\"],\n  hostVars: 6,\n  hostBindings: function CdkOption_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function CdkOption_click_HostBindingHandler($event) {\n        return ctx._clicked.next($event);\n      })(\"focus\", function CdkOption_focus_HostBindingHandler() {\n        return ctx._handleFocus();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n      i0.ɵɵattribute(\"aria-selected\", ctx.isSelected())(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled);\n      i0.ɵɵclassProp(\"cdk-option-active\", ctx.isActive());\n    }\n  },\n  inputs: {\n    id: \"id\",\n    value: [\"cdkOption\", \"value\"],\n    typeaheadLabel: [\"cdkOptionTypeaheadLabel\", \"typeaheadLabel\"],\n    disabled: [\"cdkOptionDisabled\", \"disabled\"],\n    enabledTabIndex: [\"tabindex\", \"enabledTabIndex\"]\n  },\n  exportAs: [\"cdkOption\"],\n  standalone: true\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkOption, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkOption]',\n      standalone: true,\n      exportAs: 'cdkOption',\n      host: {\n        'role': 'option',\n        'class': 'cdk-option',\n        '[id]': 'id',\n        '[attr.aria-selected]': 'isSelected()',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled',\n        '[class.cdk-option-active]': 'isActive()',\n        '(click)': '_clicked.next($event)',\n        '(focus)': '_handleFocus()'\n      }\n    }]\n  }], null, {\n    id: [{\n      type: Input\n    }],\n    value: [{\n      type: Input,\n      args: ['cdkOption']\n    }],\n    typeaheadLabel: [{\n      type: Input,\n      args: ['cdkOptionTypeaheadLabel']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkOptionDisabled']\n    }],\n    enabledTabIndex: [{\n      type: Input,\n      args: ['tabindex']\n    }]\n  });\n})();\nclass CdkListbox {\n  constructor() {\n    this._generatedId = `cdk-listbox-${nextId++}`;\n    this._disabled = false;\n    this._useActiveDescendant = false;\n    this._orientation = 'vertical';\n    this._navigationWrapDisabled = false;\n    this._navigateDisabledOptions = false;\n    /** Emits when the selected value(s) in the listbox change. */\n    this.valueChange = new Subject();\n    /** The selection model used by the listbox. */\n    this.selectionModel = new ListboxSelectionModel();\n    /** Emits when the listbox is destroyed. */\n    this.destroyed = new Subject();\n    /** The host element of the listbox. */\n    this.element = inject(ElementRef).nativeElement;\n    /** The change detector for this listbox. */\n    this.changeDetectorRef = inject(ChangeDetectorRef);\n    /** Whether the currently selected value in the selection model is invalid. */\n    this._invalid = false;\n    /** The last user-triggered option. */\n    this._lastTriggered = null;\n    /** Callback called when the listbox has been touched */\n    this._onTouched = () => {};\n    /** Callback called when the listbox value changes */\n    this._onChange = () => {};\n    /** Emits when an option has been clicked. */\n    this._optionClicked = defer(() => this.options.changes.pipe(startWith(this.options), switchMap(options => merge(...options.map(option => option._clicked.pipe(map(event => ({\n      option,\n      event\n    }))))))));\n    /** The directionality of the page. */\n    this._dir = inject(Directionality, {\n      optional: true\n    });\n    /** A predicate that skips disabled options. */\n    this._skipDisabledPredicate = option => option.disabled;\n    /** A predicate that does not skip any options. */\n    this._skipNonePredicate = () => false;\n    /** Whether the listbox currently has focus. */\n    this._hasFocus = false;\n  }\n  /** The id of the option's host element. */\n  get id() {\n    return this._id || this._generatedId;\n  }\n  set id(value) {\n    this._id = value;\n  }\n  /** The tabindex to use when the listbox is enabled. */\n  get enabledTabIndex() {\n    return this._enabledTabIndex === undefined ? 0 : this._enabledTabIndex;\n  }\n  set enabledTabIndex(value) {\n    this._enabledTabIndex = value;\n  }\n  /** The value selected in the listbox, represented as an array of option values. */\n  get value() {\n    return this._invalid ? [] : this.selectionModel.selected;\n  }\n  set value(value) {\n    this._setSelection(value);\n  }\n  /**\r\n   * Whether the listbox allows multiple options to be selected. If the value switches from `true`\r\n   * to `false`, and more than one option is selected, all options are deselected.\r\n   */\n  get multiple() {\n    return this.selectionModel.multiple;\n  }\n  set multiple(value) {\n    this.selectionModel.multiple = coerceBooleanProperty(value);\n    if (this.options) {\n      this._updateInternalValue();\n    }\n  }\n  /** Whether the listbox is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Whether the listbox will use active descendant or will move focus onto the options. */\n  get useActiveDescendant() {\n    return this._useActiveDescendant;\n  }\n  set useActiveDescendant(shouldUseActiveDescendant) {\n    this._useActiveDescendant = coerceBooleanProperty(shouldUseActiveDescendant);\n  }\n  /** The orientation of the listbox. Only affects keyboard interaction, not visual layout. */\n  get orientation() {\n    return this._orientation;\n  }\n  set orientation(value) {\n    this._orientation = value === 'horizontal' ? 'horizontal' : 'vertical';\n    if (value === 'horizontal') {\n      this.listKeyManager?.withHorizontalOrientation(this._dir?.value || 'ltr');\n    } else {\n      this.listKeyManager?.withVerticalOrientation();\n    }\n  }\n  /** The function used to compare option values. */\n  get compareWith() {\n    return this.selectionModel.compareWith;\n  }\n  set compareWith(fn) {\n    this.selectionModel.compareWith = fn;\n  }\n  /**\r\n   * Whether the keyboard navigation should wrap when the user presses arrow down on the last item\r\n   * or arrow up on the first item.\r\n   */\n  get navigationWrapDisabled() {\n    return this._navigationWrapDisabled;\n  }\n  set navigationWrapDisabled(wrap) {\n    this._navigationWrapDisabled = coerceBooleanProperty(wrap);\n    this.listKeyManager?.withWrap(!this._navigationWrapDisabled);\n  }\n  /** Whether keyboard navigation should skip over disabled items. */\n  get navigateDisabledOptions() {\n    return this._navigateDisabledOptions;\n  }\n  set navigateDisabledOptions(skip) {\n    this._navigateDisabledOptions = coerceBooleanProperty(skip);\n    this.listKeyManager?.skipPredicate(this._navigateDisabledOptions ? this._skipNonePredicate : this._skipDisabledPredicate);\n  }\n  ngAfterContentInit() {\n    if (typeof ngDevMode === 'undefined' || ngDevMode) {\n      this._verifyNoOptionValueCollisions();\n      this._verifyOptionValues();\n    }\n    this._initKeyManager();\n    // Update the internal value whenever the options or the model value changes.\n    merge(this.selectionModel.changed, this.options.changes).pipe(startWith(null), takeUntil(this.destroyed)).subscribe(() => this._updateInternalValue());\n    this._optionClicked.pipe(filter(({\n      option\n    }) => !option.disabled), takeUntil(this.destroyed)).subscribe(({\n      option,\n      event\n    }) => this._handleOptionClicked(option, event));\n  }\n  ngOnDestroy() {\n    this.listKeyManager?.destroy();\n    this.destroyed.next();\n    this.destroyed.complete();\n  }\n  /**\r\n   * Toggle the selected state of the given option.\r\n   * @param option The option to toggle\r\n   */\n  toggle(option) {\n    this.toggleValue(option.value);\n  }\n  /**\r\n   * Toggle the selected state of the given value.\r\n   * @param value The value to toggle\r\n   */\n  toggleValue(value) {\n    if (this._invalid) {\n      this.selectionModel.clear(false);\n    }\n    this.selectionModel.toggle(value);\n  }\n  /**\r\n   * Select the given option.\r\n   * @param option The option to select\r\n   */\n  select(option) {\n    this.selectValue(option.value);\n  }\n  /**\r\n   * Select the given value.\r\n   * @param value The value to select\r\n   */\n  selectValue(value) {\n    if (this._invalid) {\n      this.selectionModel.clear(false);\n    }\n    this.selectionModel.select(value);\n  }\n  /**\r\n   * Deselect the given option.\r\n   * @param option The option to deselect\r\n   */\n  deselect(option) {\n    this.deselectValue(option.value);\n  }\n  /**\r\n   * Deselect the given value.\r\n   * @param value The value to deselect\r\n   */\n  deselectValue(value) {\n    if (this._invalid) {\n      this.selectionModel.clear(false);\n    }\n    this.selectionModel.deselect(value);\n  }\n  /**\r\n   * Set the selected state of all options.\r\n   * @param isSelected The new selected state to set\r\n   */\n  setAllSelected(isSelected) {\n    if (!isSelected) {\n      this.selectionModel.clear();\n    } else {\n      if (this._invalid) {\n        this.selectionModel.clear(false);\n      }\n      this.selectionModel.select(...this.options.map(option => option.value));\n    }\n  }\n  /**\r\n   * Get whether the given option is selected.\r\n   * @param option The option to get the selected state of\r\n   */\n  isSelected(option) {\n    return this.isValueSelected(option.value);\n  }\n  /**\r\n   * Get whether the given option is active.\r\n   * @param option The option to get the active state of\r\n   */\n  isActive(option) {\n    return !!(this.listKeyManager?.activeItem === option);\n  }\n  /**\r\n   * Get whether the given value is selected.\r\n   * @param value The value to get the selected state of\r\n   */\n  isValueSelected(value) {\n    if (this._invalid) {\n      return false;\n    }\n    return this.selectionModel.isSelected(value);\n  }\n  /**\r\n   * Registers a callback to be invoked when the listbox's value changes from user input.\r\n   * @param fn The callback to register\r\n   * @docs-private\r\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\r\n   * Registers a callback to be invoked when the listbox is blurred by the user.\r\n   * @param fn The callback to register\r\n   * @docs-private\r\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\r\n   * Sets the listbox's value.\r\n   * @param value The new value of the listbox\r\n   * @docs-private\r\n   */\n  writeValue(value) {\n    this._setSelection(value);\n    this._verifyOptionValues();\n  }\n  /**\r\n   * Sets the disabled state of the listbox.\r\n   * @param isDisabled The new disabled state\r\n   * @docs-private\r\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /** Focus the listbox's host element. */\n  focus() {\n    this.element.focus();\n  }\n  /**\r\n   * Triggers the given option in response to user interaction.\r\n   * - In single selection mode: selects the option and deselects any other selected option.\r\n   * - In multi selection mode: toggles the selected state of the option.\r\n   * @param option The option to trigger\r\n   */\n  triggerOption(option) {\n    if (option && !option.disabled) {\n      this._lastTriggered = option;\n      const changed = this.multiple ? this.selectionModel.toggle(option.value) : this.selectionModel.select(option.value);\n      if (changed) {\n        this._onChange(this.value);\n        this.valueChange.next({\n          value: this.value,\n          listbox: this,\n          option: option\n        });\n      }\n    }\n  }\n  /**\r\n   * Trigger the given range of options in response to user interaction.\r\n   * Should only be called in multi-selection mode.\r\n   * @param trigger The option that was triggered\r\n   * @param from The start index of the options to toggle\r\n   * @param to The end index of the options to toggle\r\n   * @param on Whether to toggle the option range on\r\n   */\n  triggerRange(trigger, from, to, on) {\n    if (this.disabled || trigger && trigger.disabled) {\n      return;\n    }\n    this._lastTriggered = trigger;\n    const isEqual = this.compareWith ?? Object.is;\n    const updateValues = [...this.options].slice(Math.max(0, Math.min(from, to)), Math.min(this.options.length, Math.max(from, to) + 1)).filter(option => !option.disabled).map(option => option.value);\n    const selected = [...this.value];\n    for (const updateValue of updateValues) {\n      const selectedIndex = selected.findIndex(selectedValue => isEqual(selectedValue, updateValue));\n      if (on && selectedIndex === -1) {\n        selected.push(updateValue);\n      } else if (!on && selectedIndex !== -1) {\n        selected.splice(selectedIndex, 1);\n      }\n    }\n    let changed = this.selectionModel.setSelection(...selected);\n    if (changed) {\n      this._onChange(this.value);\n      this.valueChange.next({\n        value: this.value,\n        listbox: this,\n        option: trigger\n      });\n    }\n  }\n  /**\r\n   * Sets the given option as active.\r\n   * @param option The option to make active\r\n   */\n  _setActiveOption(option) {\n    this.listKeyManager.setActiveItem(option);\n  }\n  /** Called when the listbox receives focus. */\n  _handleFocus() {\n    if (!this.useActiveDescendant) {\n      if (this.selectionModel.selected.length > 0) {\n        this._setNextFocusToSelectedOption();\n      } else {\n        this.listKeyManager.setNextItemActive();\n      }\n      this._focusActiveOption();\n    }\n  }\n  /** Called when the user presses keydown on the listbox. */\n  _handleKeydown(event) {\n    if (this._disabled) {\n      return;\n    }\n    const {\n      keyCode\n    } = event;\n    const previousActiveIndex = this.listKeyManager.activeItemIndex;\n    const ctrlKeys = ['ctrlKey', 'metaKey'];\n    if (this.multiple && keyCode === A && hasModifierKey(event, ...ctrlKeys)) {\n      // Toggle all options off if they're all selected, otherwise toggle them all on.\n      this.triggerRange(null, 0, this.options.length - 1, this.options.length !== this.value.length);\n      event.preventDefault();\n      return;\n    }\n    if (this.multiple && (keyCode === SPACE || keyCode === ENTER) && hasModifierKey(event, 'shiftKey')) {\n      if (this.listKeyManager.activeItem && this.listKeyManager.activeItemIndex != null) {\n        this.triggerRange(this.listKeyManager.activeItem, this._getLastTriggeredIndex() ?? this.listKeyManager.activeItemIndex, this.listKeyManager.activeItemIndex, !this.listKeyManager.activeItem.isSelected());\n      }\n      event.preventDefault();\n      return;\n    }\n    if (this.multiple && keyCode === HOME && hasModifierKey(event, ...ctrlKeys) && hasModifierKey(event, 'shiftKey')) {\n      const trigger = this.listKeyManager.activeItem;\n      if (trigger) {\n        const from = this.listKeyManager.activeItemIndex;\n        this.listKeyManager.setFirstItemActive();\n        this.triggerRange(trigger, from, this.listKeyManager.activeItemIndex, !trigger.isSelected());\n      }\n      event.preventDefault();\n      return;\n    }\n    if (this.multiple && keyCode === END && hasModifierKey(event, ...ctrlKeys) && hasModifierKey(event, 'shiftKey')) {\n      const trigger = this.listKeyManager.activeItem;\n      if (trigger) {\n        const from = this.listKeyManager.activeItemIndex;\n        this.listKeyManager.setLastItemActive();\n        this.triggerRange(trigger, from, this.listKeyManager.activeItemIndex, !trigger.isSelected());\n      }\n      event.preventDefault();\n      return;\n    }\n    if (keyCode === SPACE || keyCode === ENTER) {\n      this.triggerOption(this.listKeyManager.activeItem);\n      event.preventDefault();\n      return;\n    }\n    const isNavKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW || keyCode === HOME || keyCode === END;\n    this.listKeyManager.onKeydown(event);\n    // Will select an option if shift was pressed while navigating to the option\n    if (isNavKey && event.shiftKey && previousActiveIndex !== this.listKeyManager.activeItemIndex) {\n      this.triggerOption(this.listKeyManager.activeItem);\n    }\n  }\n  /** Called when a focus moves into the listbox. */\n  _handleFocusIn() {\n    // Note that we use a `focusin` handler for this instead of the existing `focus` handler,\n    // because focus won't land on the listbox if `useActiveDescendant` is enabled.\n    this._hasFocus = true;\n  }\n  /**\r\n   * Called when the focus leaves an element in the listbox.\r\n   * @param event The focusout event\r\n   */\n  _handleFocusOut(event) {\n    const otherElement = event.relatedTarget;\n    if (this.element !== otherElement && !this.element.contains(otherElement)) {\n      this._onTouched();\n      this._hasFocus = false;\n      this._setNextFocusToSelectedOption();\n    }\n  }\n  /** Get the id of the active option if active descendant is being used. */\n  _getAriaActiveDescendant() {\n    return this._useActiveDescendant ? this.listKeyManager?.activeItem?.id : null;\n  }\n  /** Get the tabindex for the listbox. */\n  _getTabIndex() {\n    if (this.disabled) {\n      return -1;\n    }\n    return this.useActiveDescendant || !this.listKeyManager.activeItem ? this.enabledTabIndex : -1;\n  }\n  /** Initialize the key manager. */\n  _initKeyManager() {\n    this.listKeyManager = new ActiveDescendantKeyManager(this.options).withWrap(!this._navigationWrapDisabled).withTypeAhead().withHomeAndEnd().withAllowedModifierKeys(['shiftKey']).skipPredicate(this._navigateDisabledOptions ? this._skipNonePredicate : this._skipDisabledPredicate);\n    if (this.orientation === 'vertical') {\n      this.listKeyManager.withVerticalOrientation();\n    } else {\n      this.listKeyManager.withHorizontalOrientation(this._dir?.value || 'ltr');\n    }\n    if (this.selectionModel.selected.length) {\n      Promise.resolve().then(() => this._setNextFocusToSelectedOption());\n    }\n    this.listKeyManager.change.subscribe(() => this._focusActiveOption());\n  }\n  /** Focus the active option. */\n  _focusActiveOption() {\n    if (!this.useActiveDescendant) {\n      this.listKeyManager.activeItem?.focus();\n    }\n    this.changeDetectorRef.markForCheck();\n  }\n  /**\r\n   * Set the selected values.\r\n   * @param value The list of new selected values.\r\n   */\n  _setSelection(value) {\n    if (this._invalid) {\n      this.selectionModel.clear(false);\n    }\n    this.selectionModel.setSelection(...this._coerceValue(value));\n    if (!this._hasFocus) {\n      this._setNextFocusToSelectedOption();\n    }\n  }\n  /** Sets the first selected option as first in the keyboard focus order. */\n  _setNextFocusToSelectedOption() {\n    // Null check the options since they only get defined after `ngAfterContentInit`.\n    const selected = this.options?.find(option => option.isSelected());\n    if (selected) {\n      this.listKeyManager.updateActiveItem(selected);\n    }\n  }\n  /** Update the internal value of the listbox based on the selection model. */\n  _updateInternalValue() {\n    const indexCache = new Map();\n    this.selectionModel.sort((a, b) => {\n      const aIndex = this._getIndexForValue(indexCache, a);\n      const bIndex = this._getIndexForValue(indexCache, b);\n      return aIndex - bIndex;\n    });\n    const selected = this.selectionModel.selected;\n    this._invalid = !this.multiple && selected.length > 1 || !!this._getInvalidOptionValues(selected).length;\n    this.changeDetectorRef.markForCheck();\n  }\n  /**\r\n   * Gets the index of the given value in the given list of options.\r\n   * @param cache The cache of indices found so far\r\n   * @param value The value to find\r\n   * @return The index of the value in the options list\r\n   */\n  _getIndexForValue(cache, value) {\n    const isEqual = this.compareWith || Object.is;\n    if (!cache.has(value)) {\n      let index = -1;\n      for (let i = 0; i < this.options.length; i++) {\n        if (isEqual(value, this.options.get(i).value)) {\n          index = i;\n          break;\n        }\n      }\n      cache.set(value, index);\n    }\n    return cache.get(value);\n  }\n  /**\r\n   * Handle the user clicking an option.\r\n   * @param option The option that was clicked.\r\n   */\n  _handleOptionClicked(option, event) {\n    event.preventDefault();\n    this.listKeyManager.setActiveItem(option);\n    if (event.shiftKey && this.multiple) {\n      this.triggerRange(option, this._getLastTriggeredIndex() ?? this.listKeyManager.activeItemIndex, this.listKeyManager.activeItemIndex, !option.isSelected());\n    } else {\n      this.triggerOption(option);\n    }\n  }\n  /** Verifies that no two options represent the same value under the compareWith function. */\n  _verifyNoOptionValueCollisions() {\n    this.options.changes.pipe(startWith(this.options), takeUntil(this.destroyed)).subscribe(() => {\n      const isEqual = this.compareWith ?? Object.is;\n      for (let i = 0; i < this.options.length; i++) {\n        const option = this.options.get(i);\n        let duplicate = null;\n        for (let j = i + 1; j < this.options.length; j++) {\n          const other = this.options.get(j);\n          if (isEqual(option.value, other.value)) {\n            duplicate = other;\n            break;\n          }\n        }\n        if (duplicate) {\n          // TODO(mmalerba): Link to docs about this.\n          if (this.compareWith) {\n            console.warn(`Found multiple CdkOption representing the same value under the given compareWith function`, {\n              option1: option.element,\n              option2: duplicate.element,\n              compareWith: this.compareWith\n            });\n          } else {\n            console.warn(`Found multiple CdkOption with the same value`, {\n              option1: option.element,\n              option2: duplicate.element\n            });\n          }\n          return;\n        }\n      }\n    });\n  }\n  /** Verifies that the option values are valid. */\n  _verifyOptionValues() {\n    if (this.options && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      const selected = this.selectionModel.selected;\n      const invalidValues = this._getInvalidOptionValues(selected);\n      if (!this.multiple && selected.length > 1) {\n        throw Error('Listbox cannot have more than one selected value in multi-selection mode.');\n      }\n      if (invalidValues.length) {\n        throw Error('Listbox has selected values that do not match any of its options.');\n      }\n    }\n  }\n  /**\r\n   * Coerces a value into an array representing a listbox selection.\r\n   * @param value The value to coerce\r\n   * @return An array\r\n   */\n  _coerceValue(value) {\n    return value == null ? [] : coerceArray(value);\n  }\n  /**\r\n   * Get the sublist of values that do not represent valid option values in this listbox.\r\n   * @param values The list of values\r\n   * @return The sublist of values that are not valid option values\r\n   */\n  _getInvalidOptionValues(values) {\n    const isEqual = this.compareWith || Object.is;\n    const validValues = (this.options || []).map(option => option.value);\n    return values.filter(value => !validValues.some(validValue => isEqual(value, validValue)));\n  }\n  /** Get the index of the last triggered option. */\n  _getLastTriggeredIndex() {\n    const index = this.options.toArray().indexOf(this._lastTriggered);\n    return index === -1 ? null : index;\n  }\n}\nCdkListbox.ɵfac = function CdkListbox_Factory(t) {\n  return new (t || CdkListbox)();\n};\nCdkListbox.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CdkListbox,\n  selectors: [[\"\", \"cdkListbox\", \"\"]],\n  contentQueries: function CdkListbox_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, CdkOption, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n    }\n  },\n  hostAttrs: [\"role\", \"listbox\", 1, \"cdk-listbox\"],\n  hostVars: 6,\n  hostBindings: function CdkListbox_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function CdkListbox_focus_HostBindingHandler() {\n        return ctx._handleFocus();\n      })(\"keydown\", function CdkListbox_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focusout\", function CdkListbox_focusout_HostBindingHandler($event) {\n        return ctx._handleFocusOut($event);\n      })(\"focusin\", function CdkListbox_focusin_HostBindingHandler() {\n        return ctx._handleFocusIn();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n      i0.ɵɵattribute(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled)(\"aria-multiselectable\", ctx.multiple)(\"aria-activedescendant\", ctx._getAriaActiveDescendant())(\"aria-orientation\", ctx.orientation);\n    }\n  },\n  inputs: {\n    id: \"id\",\n    enabledTabIndex: [\"tabindex\", \"enabledTabIndex\"],\n    value: [\"cdkListboxValue\", \"value\"],\n    multiple: [\"cdkListboxMultiple\", \"multiple\"],\n    disabled: [\"cdkListboxDisabled\", \"disabled\"],\n    useActiveDescendant: [\"cdkListboxUseActiveDescendant\", \"useActiveDescendant\"],\n    orientation: [\"cdkListboxOrientation\", \"orientation\"],\n    compareWith: [\"cdkListboxCompareWith\", \"compareWith\"],\n    navigationWrapDisabled: [\"cdkListboxNavigationWrapDisabled\", \"navigationWrapDisabled\"],\n    navigateDisabledOptions: [\"cdkListboxNavigatesDisabledOptions\", \"navigateDisabledOptions\"]\n  },\n  outputs: {\n    valueChange: \"cdkListboxValueChange\"\n  },\n  exportAs: [\"cdkListbox\"],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CdkListbox),\n    multi: true\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkListbox, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkListbox]',\n      standalone: true,\n      exportAs: 'cdkListbox',\n      host: {\n        'role': 'listbox',\n        'class': 'cdk-listbox',\n        '[id]': 'id',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[attr.aria-orientation]': 'orientation',\n        '(focus)': '_handleFocus()',\n        '(keydown)': '_handleKeydown($event)',\n        '(focusout)': '_handleFocusOut($event)',\n        '(focusin)': '_handleFocusIn()'\n      },\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => CdkListbox),\n        multi: true\n      }]\n    }]\n  }], null, {\n    id: [{\n      type: Input\n    }],\n    enabledTabIndex: [{\n      type: Input,\n      args: ['tabindex']\n    }],\n    value: [{\n      type: Input,\n      args: ['cdkListboxValue']\n    }],\n    multiple: [{\n      type: Input,\n      args: ['cdkListboxMultiple']\n    }],\n    disabled: [{\n      type: Input,\n      args: ['cdkListboxDisabled']\n    }],\n    useActiveDescendant: [{\n      type: Input,\n      args: ['cdkListboxUseActiveDescendant']\n    }],\n    orientation: [{\n      type: Input,\n      args: ['cdkListboxOrientation']\n    }],\n    compareWith: [{\n      type: Input,\n      args: ['cdkListboxCompareWith']\n    }],\n    navigationWrapDisabled: [{\n      type: Input,\n      args: ['cdkListboxNavigationWrapDisabled']\n    }],\n    navigateDisabledOptions: [{\n      type: Input,\n      args: ['cdkListboxNavigatesDisabledOptions']\n    }],\n    valueChange: [{\n      type: Output,\n      args: ['cdkListboxValueChange']\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [CdkOption, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\nconst EXPORTED_DECLARATIONS = [CdkListbox, CdkOption];\nclass CdkListboxModule {}\nCdkListboxModule.ɵfac = function CdkListboxModule_Factory(t) {\n  return new (t || CdkListboxModule)();\n};\nCdkListboxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CdkListboxModule\n});\nCdkListboxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CdkListboxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [...EXPORTED_DECLARATIONS],\n      exports: [...EXPORTED_DECLARATIONS]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { CdkListbox, CdkListboxModule, CdkOption };","map":{"version":3,"names":["i0","inject","ElementRef","Directive","Input","ChangeDetectorRef","forwardRef","Output","ContentChildren","NgModule","ActiveDescendantKeyManager","A","hasModifierKey","SPACE","ENTER","HOME","END","UP_ARROW","DOWN_ARROW","LEFT_ARROW","RIGHT_ARROW","coerceBooleanProperty","coerceArray","SelectionModel","Subject","defer","merge","startWith","switchMap","map","takeUntil","filter","NG_VALUE_ACCESSOR","Directionality","nextId","ListboxSelectionModel","constructor","multiple","initiallySelectedValues","emitChanges","compareWith","isMultipleSelection","select","values","setSelection","CdkOption","_generatedId","_disabled","element","nativeElement","listbox","CdkListbox","destroyed","_clicked","id","_id","value","disabled","enabledTabIndex","_enabledTabIndex","undefined","ngOnDestroy","next","complete","isSelected","isActive","toggle","deselect","focus","getLabel","typeaheadLabel","textContent","trim","setActiveStyles","setInactiveStyles","_handleFocus","useActiveDescendant","_setActiveOption","_getTabIndex","ɵfac","ɵdir","type","args","selector","standalone","exportAs","host","_useActiveDescendant","_orientation","_navigationWrapDisabled","_navigateDisabledOptions","valueChange","selectionModel","changeDetectorRef","_invalid","_lastTriggered","_onTouched","_onChange","_optionClicked","options","changes","pipe","option","event","_dir","optional","_skipDisabledPredicate","_skipNonePredicate","_hasFocus","selected","_setSelection","_updateInternalValue","shouldUseActiveDescendant","orientation","listKeyManager","withHorizontalOrientation","withVerticalOrientation","fn","navigationWrapDisabled","wrap","withWrap","navigateDisabledOptions","skip","skipPredicate","ngAfterContentInit","ngDevMode","_verifyNoOptionValueCollisions","_verifyOptionValues","_initKeyManager","changed","subscribe","_handleOptionClicked","destroy","toggleValue","clear","selectValue","deselectValue","setAllSelected","isValueSelected","activeItem","registerOnChange","registerOnTouched","writeValue","setDisabledState","isDisabled","triggerOption","triggerRange","trigger","from","to","on","isEqual","Object","is","updateValues","slice","Math","max","min","length","updateValue","selectedIndex","findIndex","selectedValue","push","splice","setActiveItem","_setNextFocusToSelectedOption","setNextItemActive","_focusActiveOption","_handleKeydown","keyCode","previousActiveIndex","activeItemIndex","ctrlKeys","preventDefault","_getLastTriggeredIndex","setFirstItemActive","setLastItemActive","isNavKey","onKeydown","shiftKey","_handleFocusIn","_handleFocusOut","otherElement","relatedTarget","contains","_getAriaActiveDescendant","withTypeAhead","withHomeAndEnd","withAllowedModifierKeys","Promise","resolve","then","change","markForCheck","_coerceValue","find","updateActiveItem","indexCache","Map","sort","a","b","aIndex","_getIndexForValue","bIndex","_getInvalidOptionValues","cache","has","index","i","get","set","duplicate","j","other","console","warn","option1","option2","invalidValues","Error","validValues","some","validValue","toArray","indexOf","provide","useExisting","multi","providers","descendants","EXPORTED_DECLARATIONS","CdkListboxModule","ɵmod","ɵinj","imports","exports"],"sources":["C:/atv-app/node_modules/@angular/cdk/fesm2020/listbox.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\r\nimport { inject, ElementRef, Directive, Input, ChangeDetectorRef, forwardRef, Output, ContentChildren, NgModule } from '@angular/core';\r\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\r\nimport { A, hasModifierKey, SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\r\nimport { coerceBooleanProperty, coerceArray } from '@angular/cdk/coercion';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { Subject, defer, merge } from 'rxjs';\r\nimport { startWith, switchMap, map, takeUntil, filter } from 'rxjs/operators';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** The next id to use for creating unique DOM IDs. */\r\nlet nextId = 0;\r\n/**\r\n * An implementation of SelectionModel that internally always represents the selection as a\r\n * multi-selection. This is necessary so that we can recover the full selection if the user\r\n * switches the listbox from single-selection to multi-selection after initialization.\r\n *\r\n * This selection model may report multiple selected values, even if it is in single-selection\r\n * mode. It is up to the user (CdkListbox) to check for invalid selections.\r\n */\r\nclass ListboxSelectionModel extends SelectionModel {\r\n    constructor(multiple = false, initiallySelectedValues, emitChanges = true, compareWith) {\r\n        super(true, initiallySelectedValues, emitChanges, compareWith);\r\n        this.multiple = multiple;\r\n    }\r\n    isMultipleSelection() {\r\n        return this.multiple;\r\n    }\r\n    select(...values) {\r\n        // The super class is always in multi-selection mode, so we need to override the behavior if\r\n        // this selection model actually belongs to a single-selection listbox.\r\n        if (this.multiple) {\r\n            return super.select(...values);\r\n        }\r\n        else {\r\n            return super.setSelection(...values);\r\n        }\r\n    }\r\n}\r\n/** A selectable option in a listbox. */\r\nclass CdkOption {\r\n    constructor() {\r\n        this._generatedId = `cdk-option-${nextId++}`;\r\n        this._disabled = false;\r\n        /** The option's host element */\r\n        this.element = inject(ElementRef).nativeElement;\r\n        /** The parent listbox this option belongs to. */\r\n        this.listbox = inject(CdkListbox);\r\n        /** Emits when the option is destroyed. */\r\n        this.destroyed = new Subject();\r\n        /** Emits when the option is clicked. */\r\n        this._clicked = new Subject();\r\n    }\r\n    /** The id of the option's host element. */\r\n    get id() {\r\n        return this._id || this._generatedId;\r\n    }\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n    /** Whether this option is disabled. */\r\n    get disabled() {\r\n        return this.listbox.disabled || this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n    }\r\n    /** The tabindex of the option when it is enabled. */\r\n    get enabledTabIndex() {\r\n        return this._enabledTabIndex === undefined\r\n            ? this.listbox.enabledTabIndex\r\n            : this._enabledTabIndex;\r\n    }\r\n    set enabledTabIndex(value) {\r\n        this._enabledTabIndex = value;\r\n    }\r\n    ngOnDestroy() {\r\n        this.destroyed.next();\r\n        this.destroyed.complete();\r\n    }\r\n    /** Whether this option is selected. */\r\n    isSelected() {\r\n        return this.listbox.isSelected(this);\r\n    }\r\n    /** Whether this option is active. */\r\n    isActive() {\r\n        return this.listbox.isActive(this);\r\n    }\r\n    /** Toggle the selected state of this option. */\r\n    toggle() {\r\n        this.listbox.toggle(this);\r\n    }\r\n    /** Select this option if it is not selected. */\r\n    select() {\r\n        this.listbox.select(this);\r\n    }\r\n    /** Deselect this option if it is selected. */\r\n    deselect() {\r\n        this.listbox.deselect(this);\r\n    }\r\n    /** Focus this option. */\r\n    focus() {\r\n        this.element.focus();\r\n    }\r\n    /** Get the label for this element which is required by the FocusableOption interface. */\r\n    getLabel() {\r\n        return (this.typeaheadLabel ?? this.element.textContent?.trim()) || '';\r\n    }\r\n    /**\r\n     * No-op implemented as a part of `Highlightable`.\r\n     * @docs-private\r\n     */\r\n    setActiveStyles() { }\r\n    /**\r\n     * No-op implemented as a part of `Highlightable`.\r\n     * @docs-private\r\n     */\r\n    setInactiveStyles() { }\r\n    /** Handle focus events on the option. */\r\n    _handleFocus() {\r\n        // Options can wind up getting focused in active descendant mode if the user clicks on them.\r\n        // In this case, we push focus back to the parent listbox to prevent an extra tab stop when\r\n        // the user performs a shift+tab.\r\n        if (this.listbox.useActiveDescendant) {\r\n            this.listbox._setActiveOption(this);\r\n            this.listbox.focus();\r\n        }\r\n    }\r\n    /** Get the tabindex for this option. */\r\n    _getTabIndex() {\r\n        if (this.listbox.useActiveDescendant || this.disabled) {\r\n            return -1;\r\n        }\r\n        return this.isActive() ? this.enabledTabIndex : -1;\r\n    }\r\n}\r\nCdkOption.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkOption, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\nCdkOption.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkOption, isStandalone: true, selector: \"[cdkOption]\", inputs: { id: \"id\", value: [\"cdkOption\", \"value\"], typeaheadLabel: [\"cdkOptionTypeaheadLabel\", \"typeaheadLabel\"], disabled: [\"cdkOptionDisabled\", \"disabled\"], enabledTabIndex: [\"tabindex\", \"enabledTabIndex\"] }, host: { attributes: { \"role\": \"option\" }, listeners: { \"click\": \"_clicked.next($event)\", \"focus\": \"_handleFocus()\" }, properties: { \"id\": \"id\", \"attr.aria-selected\": \"isSelected()\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"class.cdk-option-active\": \"isActive()\" }, classAttribute: \"cdk-option\" }, exportAs: [\"cdkOption\"], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkOption, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkOption]',\r\n                    standalone: true,\r\n                    exportAs: 'cdkOption',\r\n                    host: {\r\n                        'role': 'option',\r\n                        'class': 'cdk-option',\r\n                        '[id]': 'id',\r\n                        '[attr.aria-selected]': 'isSelected()',\r\n                        '[attr.tabindex]': '_getTabIndex()',\r\n                        '[attr.aria-disabled]': 'disabled',\r\n                        '[class.cdk-option-active]': 'isActive()',\r\n                        '(click)': '_clicked.next($event)',\r\n                        '(focus)': '_handleFocus()',\r\n                    },\r\n                }]\r\n        }], propDecorators: { id: [{\r\n                type: Input\r\n            }], value: [{\r\n                type: Input,\r\n                args: ['cdkOption']\r\n            }], typeaheadLabel: [{\r\n                type: Input,\r\n                args: ['cdkOptionTypeaheadLabel']\r\n            }], disabled: [{\r\n                type: Input,\r\n                args: ['cdkOptionDisabled']\r\n            }], enabledTabIndex: [{\r\n                type: Input,\r\n                args: ['tabindex']\r\n            }] } });\r\nclass CdkListbox {\r\n    constructor() {\r\n        this._generatedId = `cdk-listbox-${nextId++}`;\r\n        this._disabled = false;\r\n        this._useActiveDescendant = false;\r\n        this._orientation = 'vertical';\r\n        this._navigationWrapDisabled = false;\r\n        this._navigateDisabledOptions = false;\r\n        /** Emits when the selected value(s) in the listbox change. */\r\n        this.valueChange = new Subject();\r\n        /** The selection model used by the listbox. */\r\n        this.selectionModel = new ListboxSelectionModel();\r\n        /** Emits when the listbox is destroyed. */\r\n        this.destroyed = new Subject();\r\n        /** The host element of the listbox. */\r\n        this.element = inject(ElementRef).nativeElement;\r\n        /** The change detector for this listbox. */\r\n        this.changeDetectorRef = inject(ChangeDetectorRef);\r\n        /** Whether the currently selected value in the selection model is invalid. */\r\n        this._invalid = false;\r\n        /** The last user-triggered option. */\r\n        this._lastTriggered = null;\r\n        /** Callback called when the listbox has been touched */\r\n        this._onTouched = () => { };\r\n        /** Callback called when the listbox value changes */\r\n        this._onChange = () => { };\r\n        /** Emits when an option has been clicked. */\r\n        this._optionClicked = defer(() => this.options.changes.pipe(startWith(this.options), switchMap(options => merge(...options.map(option => option._clicked.pipe(map(event => ({ option, event }))))))));\r\n        /** The directionality of the page. */\r\n        this._dir = inject(Directionality, { optional: true });\r\n        /** A predicate that skips disabled options. */\r\n        this._skipDisabledPredicate = (option) => option.disabled;\r\n        /** A predicate that does not skip any options. */\r\n        this._skipNonePredicate = () => false;\r\n        /** Whether the listbox currently has focus. */\r\n        this._hasFocus = false;\r\n    }\r\n    /** The id of the option's host element. */\r\n    get id() {\r\n        return this._id || this._generatedId;\r\n    }\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n    /** The tabindex to use when the listbox is enabled. */\r\n    get enabledTabIndex() {\r\n        return this._enabledTabIndex === undefined ? 0 : this._enabledTabIndex;\r\n    }\r\n    set enabledTabIndex(value) {\r\n        this._enabledTabIndex = value;\r\n    }\r\n    /** The value selected in the listbox, represented as an array of option values. */\r\n    get value() {\r\n        return this._invalid ? [] : this.selectionModel.selected;\r\n    }\r\n    set value(value) {\r\n        this._setSelection(value);\r\n    }\r\n    /**\r\n     * Whether the listbox allows multiple options to be selected. If the value switches from `true`\r\n     * to `false`, and more than one option is selected, all options are deselected.\r\n     */\r\n    get multiple() {\r\n        return this.selectionModel.multiple;\r\n    }\r\n    set multiple(value) {\r\n        this.selectionModel.multiple = coerceBooleanProperty(value);\r\n        if (this.options) {\r\n            this._updateInternalValue();\r\n        }\r\n    }\r\n    /** Whether the listbox is disabled. */\r\n    get disabled() {\r\n        return this._disabled;\r\n    }\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n    }\r\n    /** Whether the listbox will use active descendant or will move focus onto the options. */\r\n    get useActiveDescendant() {\r\n        return this._useActiveDescendant;\r\n    }\r\n    set useActiveDescendant(shouldUseActiveDescendant) {\r\n        this._useActiveDescendant = coerceBooleanProperty(shouldUseActiveDescendant);\r\n    }\r\n    /** The orientation of the listbox. Only affects keyboard interaction, not visual layout. */\r\n    get orientation() {\r\n        return this._orientation;\r\n    }\r\n    set orientation(value) {\r\n        this._orientation = value === 'horizontal' ? 'horizontal' : 'vertical';\r\n        if (value === 'horizontal') {\r\n            this.listKeyManager?.withHorizontalOrientation(this._dir?.value || 'ltr');\r\n        }\r\n        else {\r\n            this.listKeyManager?.withVerticalOrientation();\r\n        }\r\n    }\r\n    /** The function used to compare option values. */\r\n    get compareWith() {\r\n        return this.selectionModel.compareWith;\r\n    }\r\n    set compareWith(fn) {\r\n        this.selectionModel.compareWith = fn;\r\n    }\r\n    /**\r\n     * Whether the keyboard navigation should wrap when the user presses arrow down on the last item\r\n     * or arrow up on the first item.\r\n     */\r\n    get navigationWrapDisabled() {\r\n        return this._navigationWrapDisabled;\r\n    }\r\n    set navigationWrapDisabled(wrap) {\r\n        this._navigationWrapDisabled = coerceBooleanProperty(wrap);\r\n        this.listKeyManager?.withWrap(!this._navigationWrapDisabled);\r\n    }\r\n    /** Whether keyboard navigation should skip over disabled items. */\r\n    get navigateDisabledOptions() {\r\n        return this._navigateDisabledOptions;\r\n    }\r\n    set navigateDisabledOptions(skip) {\r\n        this._navigateDisabledOptions = coerceBooleanProperty(skip);\r\n        this.listKeyManager?.skipPredicate(this._navigateDisabledOptions ? this._skipNonePredicate : this._skipDisabledPredicate);\r\n    }\r\n    ngAfterContentInit() {\r\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\r\n            this._verifyNoOptionValueCollisions();\r\n            this._verifyOptionValues();\r\n        }\r\n        this._initKeyManager();\r\n        // Update the internal value whenever the options or the model value changes.\r\n        merge(this.selectionModel.changed, this.options.changes)\r\n            .pipe(startWith(null), takeUntil(this.destroyed))\r\n            .subscribe(() => this._updateInternalValue());\r\n        this._optionClicked\r\n            .pipe(filter(({ option }) => !option.disabled), takeUntil(this.destroyed))\r\n            .subscribe(({ option, event }) => this._handleOptionClicked(option, event));\r\n    }\r\n    ngOnDestroy() {\r\n        this.listKeyManager?.destroy();\r\n        this.destroyed.next();\r\n        this.destroyed.complete();\r\n    }\r\n    /**\r\n     * Toggle the selected state of the given option.\r\n     * @param option The option to toggle\r\n     */\r\n    toggle(option) {\r\n        this.toggleValue(option.value);\r\n    }\r\n    /**\r\n     * Toggle the selected state of the given value.\r\n     * @param value The value to toggle\r\n     */\r\n    toggleValue(value) {\r\n        if (this._invalid) {\r\n            this.selectionModel.clear(false);\r\n        }\r\n        this.selectionModel.toggle(value);\r\n    }\r\n    /**\r\n     * Select the given option.\r\n     * @param option The option to select\r\n     */\r\n    select(option) {\r\n        this.selectValue(option.value);\r\n    }\r\n    /**\r\n     * Select the given value.\r\n     * @param value The value to select\r\n     */\r\n    selectValue(value) {\r\n        if (this._invalid) {\r\n            this.selectionModel.clear(false);\r\n        }\r\n        this.selectionModel.select(value);\r\n    }\r\n    /**\r\n     * Deselect the given option.\r\n     * @param option The option to deselect\r\n     */\r\n    deselect(option) {\r\n        this.deselectValue(option.value);\r\n    }\r\n    /**\r\n     * Deselect the given value.\r\n     * @param value The value to deselect\r\n     */\r\n    deselectValue(value) {\r\n        if (this._invalid) {\r\n            this.selectionModel.clear(false);\r\n        }\r\n        this.selectionModel.deselect(value);\r\n    }\r\n    /**\r\n     * Set the selected state of all options.\r\n     * @param isSelected The new selected state to set\r\n     */\r\n    setAllSelected(isSelected) {\r\n        if (!isSelected) {\r\n            this.selectionModel.clear();\r\n        }\r\n        else {\r\n            if (this._invalid) {\r\n                this.selectionModel.clear(false);\r\n            }\r\n            this.selectionModel.select(...this.options.map(option => option.value));\r\n        }\r\n    }\r\n    /**\r\n     * Get whether the given option is selected.\r\n     * @param option The option to get the selected state of\r\n     */\r\n    isSelected(option) {\r\n        return this.isValueSelected(option.value);\r\n    }\r\n    /**\r\n     * Get whether the given option is active.\r\n     * @param option The option to get the active state of\r\n     */\r\n    isActive(option) {\r\n        return !!(this.listKeyManager?.activeItem === option);\r\n    }\r\n    /**\r\n     * Get whether the given value is selected.\r\n     * @param value The value to get the selected state of\r\n     */\r\n    isValueSelected(value) {\r\n        if (this._invalid) {\r\n            return false;\r\n        }\r\n        return this.selectionModel.isSelected(value);\r\n    }\r\n    /**\r\n     * Registers a callback to be invoked when the listbox's value changes from user input.\r\n     * @param fn The callback to register\r\n     * @docs-private\r\n     */\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    /**\r\n     * Registers a callback to be invoked when the listbox is blurred by the user.\r\n     * @param fn The callback to register\r\n     * @docs-private\r\n     */\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    /**\r\n     * Sets the listbox's value.\r\n     * @param value The new value of the listbox\r\n     * @docs-private\r\n     */\r\n    writeValue(value) {\r\n        this._setSelection(value);\r\n        this._verifyOptionValues();\r\n    }\r\n    /**\r\n     * Sets the disabled state of the listbox.\r\n     * @param isDisabled The new disabled state\r\n     * @docs-private\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    /** Focus the listbox's host element. */\r\n    focus() {\r\n        this.element.focus();\r\n    }\r\n    /**\r\n     * Triggers the given option in response to user interaction.\r\n     * - In single selection mode: selects the option and deselects any other selected option.\r\n     * - In multi selection mode: toggles the selected state of the option.\r\n     * @param option The option to trigger\r\n     */\r\n    triggerOption(option) {\r\n        if (option && !option.disabled) {\r\n            this._lastTriggered = option;\r\n            const changed = this.multiple\r\n                ? this.selectionModel.toggle(option.value)\r\n                : this.selectionModel.select(option.value);\r\n            if (changed) {\r\n                this._onChange(this.value);\r\n                this.valueChange.next({\r\n                    value: this.value,\r\n                    listbox: this,\r\n                    option: option,\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Trigger the given range of options in response to user interaction.\r\n     * Should only be called in multi-selection mode.\r\n     * @param trigger The option that was triggered\r\n     * @param from The start index of the options to toggle\r\n     * @param to The end index of the options to toggle\r\n     * @param on Whether to toggle the option range on\r\n     */\r\n    triggerRange(trigger, from, to, on) {\r\n        if (this.disabled || (trigger && trigger.disabled)) {\r\n            return;\r\n        }\r\n        this._lastTriggered = trigger;\r\n        const isEqual = this.compareWith ?? Object.is;\r\n        const updateValues = [...this.options]\r\n            .slice(Math.max(0, Math.min(from, to)), Math.min(this.options.length, Math.max(from, to) + 1))\r\n            .filter(option => !option.disabled)\r\n            .map(option => option.value);\r\n        const selected = [...this.value];\r\n        for (const updateValue of updateValues) {\r\n            const selectedIndex = selected.findIndex(selectedValue => isEqual(selectedValue, updateValue));\r\n            if (on && selectedIndex === -1) {\r\n                selected.push(updateValue);\r\n            }\r\n            else if (!on && selectedIndex !== -1) {\r\n                selected.splice(selectedIndex, 1);\r\n            }\r\n        }\r\n        let changed = this.selectionModel.setSelection(...selected);\r\n        if (changed) {\r\n            this._onChange(this.value);\r\n            this.valueChange.next({\r\n                value: this.value,\r\n                listbox: this,\r\n                option: trigger,\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Sets the given option as active.\r\n     * @param option The option to make active\r\n     */\r\n    _setActiveOption(option) {\r\n        this.listKeyManager.setActiveItem(option);\r\n    }\r\n    /** Called when the listbox receives focus. */\r\n    _handleFocus() {\r\n        if (!this.useActiveDescendant) {\r\n            if (this.selectionModel.selected.length > 0) {\r\n                this._setNextFocusToSelectedOption();\r\n            }\r\n            else {\r\n                this.listKeyManager.setNextItemActive();\r\n            }\r\n            this._focusActiveOption();\r\n        }\r\n    }\r\n    /** Called when the user presses keydown on the listbox. */\r\n    _handleKeydown(event) {\r\n        if (this._disabled) {\r\n            return;\r\n        }\r\n        const { keyCode } = event;\r\n        const previousActiveIndex = this.listKeyManager.activeItemIndex;\r\n        const ctrlKeys = ['ctrlKey', 'metaKey'];\r\n        if (this.multiple && keyCode === A && hasModifierKey(event, ...ctrlKeys)) {\r\n            // Toggle all options off if they're all selected, otherwise toggle them all on.\r\n            this.triggerRange(null, 0, this.options.length - 1, this.options.length !== this.value.length);\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n        if (this.multiple &&\r\n            (keyCode === SPACE || keyCode === ENTER) &&\r\n            hasModifierKey(event, 'shiftKey')) {\r\n            if (this.listKeyManager.activeItem && this.listKeyManager.activeItemIndex != null) {\r\n                this.triggerRange(this.listKeyManager.activeItem, this._getLastTriggeredIndex() ?? this.listKeyManager.activeItemIndex, this.listKeyManager.activeItemIndex, !this.listKeyManager.activeItem.isSelected());\r\n            }\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n        if (this.multiple &&\r\n            keyCode === HOME &&\r\n            hasModifierKey(event, ...ctrlKeys) &&\r\n            hasModifierKey(event, 'shiftKey')) {\r\n            const trigger = this.listKeyManager.activeItem;\r\n            if (trigger) {\r\n                const from = this.listKeyManager.activeItemIndex;\r\n                this.listKeyManager.setFirstItemActive();\r\n                this.triggerRange(trigger, from, this.listKeyManager.activeItemIndex, !trigger.isSelected());\r\n            }\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n        if (this.multiple &&\r\n            keyCode === END &&\r\n            hasModifierKey(event, ...ctrlKeys) &&\r\n            hasModifierKey(event, 'shiftKey')) {\r\n            const trigger = this.listKeyManager.activeItem;\r\n            if (trigger) {\r\n                const from = this.listKeyManager.activeItemIndex;\r\n                this.listKeyManager.setLastItemActive();\r\n                this.triggerRange(trigger, from, this.listKeyManager.activeItemIndex, !trigger.isSelected());\r\n            }\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n        if (keyCode === SPACE || keyCode === ENTER) {\r\n            this.triggerOption(this.listKeyManager.activeItem);\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n        const isNavKey = keyCode === UP_ARROW ||\r\n            keyCode === DOWN_ARROW ||\r\n            keyCode === LEFT_ARROW ||\r\n            keyCode === RIGHT_ARROW ||\r\n            keyCode === HOME ||\r\n            keyCode === END;\r\n        this.listKeyManager.onKeydown(event);\r\n        // Will select an option if shift was pressed while navigating to the option\r\n        if (isNavKey && event.shiftKey && previousActiveIndex !== this.listKeyManager.activeItemIndex) {\r\n            this.triggerOption(this.listKeyManager.activeItem);\r\n        }\r\n    }\r\n    /** Called when a focus moves into the listbox. */\r\n    _handleFocusIn() {\r\n        // Note that we use a `focusin` handler for this instead of the existing `focus` handler,\r\n        // because focus won't land on the listbox if `useActiveDescendant` is enabled.\r\n        this._hasFocus = true;\r\n    }\r\n    /**\r\n     * Called when the focus leaves an element in the listbox.\r\n     * @param event The focusout event\r\n     */\r\n    _handleFocusOut(event) {\r\n        const otherElement = event.relatedTarget;\r\n        if (this.element !== otherElement && !this.element.contains(otherElement)) {\r\n            this._onTouched();\r\n            this._hasFocus = false;\r\n            this._setNextFocusToSelectedOption();\r\n        }\r\n    }\r\n    /** Get the id of the active option if active descendant is being used. */\r\n    _getAriaActiveDescendant() {\r\n        return this._useActiveDescendant ? this.listKeyManager?.activeItem?.id : null;\r\n    }\r\n    /** Get the tabindex for the listbox. */\r\n    _getTabIndex() {\r\n        if (this.disabled) {\r\n            return -1;\r\n        }\r\n        return this.useActiveDescendant || !this.listKeyManager.activeItem ? this.enabledTabIndex : -1;\r\n    }\r\n    /** Initialize the key manager. */\r\n    _initKeyManager() {\r\n        this.listKeyManager = new ActiveDescendantKeyManager(this.options)\r\n            .withWrap(!this._navigationWrapDisabled)\r\n            .withTypeAhead()\r\n            .withHomeAndEnd()\r\n            .withAllowedModifierKeys(['shiftKey'])\r\n            .skipPredicate(this._navigateDisabledOptions ? this._skipNonePredicate : this._skipDisabledPredicate);\r\n        if (this.orientation === 'vertical') {\r\n            this.listKeyManager.withVerticalOrientation();\r\n        }\r\n        else {\r\n            this.listKeyManager.withHorizontalOrientation(this._dir?.value || 'ltr');\r\n        }\r\n        if (this.selectionModel.selected.length) {\r\n            Promise.resolve().then(() => this._setNextFocusToSelectedOption());\r\n        }\r\n        this.listKeyManager.change.subscribe(() => this._focusActiveOption());\r\n    }\r\n    /** Focus the active option. */\r\n    _focusActiveOption() {\r\n        if (!this.useActiveDescendant) {\r\n            this.listKeyManager.activeItem?.focus();\r\n        }\r\n        this.changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Set the selected values.\r\n     * @param value The list of new selected values.\r\n     */\r\n    _setSelection(value) {\r\n        if (this._invalid) {\r\n            this.selectionModel.clear(false);\r\n        }\r\n        this.selectionModel.setSelection(...this._coerceValue(value));\r\n        if (!this._hasFocus) {\r\n            this._setNextFocusToSelectedOption();\r\n        }\r\n    }\r\n    /** Sets the first selected option as first in the keyboard focus order. */\r\n    _setNextFocusToSelectedOption() {\r\n        // Null check the options since they only get defined after `ngAfterContentInit`.\r\n        const selected = this.options?.find(option => option.isSelected());\r\n        if (selected) {\r\n            this.listKeyManager.updateActiveItem(selected);\r\n        }\r\n    }\r\n    /** Update the internal value of the listbox based on the selection model. */\r\n    _updateInternalValue() {\r\n        const indexCache = new Map();\r\n        this.selectionModel.sort((a, b) => {\r\n            const aIndex = this._getIndexForValue(indexCache, a);\r\n            const bIndex = this._getIndexForValue(indexCache, b);\r\n            return aIndex - bIndex;\r\n        });\r\n        const selected = this.selectionModel.selected;\r\n        this._invalid =\r\n            (!this.multiple && selected.length > 1) || !!this._getInvalidOptionValues(selected).length;\r\n        this.changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Gets the index of the given value in the given list of options.\r\n     * @param cache The cache of indices found so far\r\n     * @param value The value to find\r\n     * @return The index of the value in the options list\r\n     */\r\n    _getIndexForValue(cache, value) {\r\n        const isEqual = this.compareWith || Object.is;\r\n        if (!cache.has(value)) {\r\n            let index = -1;\r\n            for (let i = 0; i < this.options.length; i++) {\r\n                if (isEqual(value, this.options.get(i).value)) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n            cache.set(value, index);\r\n        }\r\n        return cache.get(value);\r\n    }\r\n    /**\r\n     * Handle the user clicking an option.\r\n     * @param option The option that was clicked.\r\n     */\r\n    _handleOptionClicked(option, event) {\r\n        event.preventDefault();\r\n        this.listKeyManager.setActiveItem(option);\r\n        if (event.shiftKey && this.multiple) {\r\n            this.triggerRange(option, this._getLastTriggeredIndex() ?? this.listKeyManager.activeItemIndex, this.listKeyManager.activeItemIndex, !option.isSelected());\r\n        }\r\n        else {\r\n            this.triggerOption(option);\r\n        }\r\n    }\r\n    /** Verifies that no two options represent the same value under the compareWith function. */\r\n    _verifyNoOptionValueCollisions() {\r\n        this.options.changes.pipe(startWith(this.options), takeUntil(this.destroyed)).subscribe(() => {\r\n            const isEqual = this.compareWith ?? Object.is;\r\n            for (let i = 0; i < this.options.length; i++) {\r\n                const option = this.options.get(i);\r\n                let duplicate = null;\r\n                for (let j = i + 1; j < this.options.length; j++) {\r\n                    const other = this.options.get(j);\r\n                    if (isEqual(option.value, other.value)) {\r\n                        duplicate = other;\r\n                        break;\r\n                    }\r\n                }\r\n                if (duplicate) {\r\n                    // TODO(mmalerba): Link to docs about this.\r\n                    if (this.compareWith) {\r\n                        console.warn(`Found multiple CdkOption representing the same value under the given compareWith function`, {\r\n                            option1: option.element,\r\n                            option2: duplicate.element,\r\n                            compareWith: this.compareWith,\r\n                        });\r\n                    }\r\n                    else {\r\n                        console.warn(`Found multiple CdkOption with the same value`, {\r\n                            option1: option.element,\r\n                            option2: duplicate.element,\r\n                        });\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /** Verifies that the option values are valid. */\r\n    _verifyOptionValues() {\r\n        if (this.options && (typeof ngDevMode === 'undefined' || ngDevMode)) {\r\n            const selected = this.selectionModel.selected;\r\n            const invalidValues = this._getInvalidOptionValues(selected);\r\n            if (!this.multiple && selected.length > 1) {\r\n                throw Error('Listbox cannot have more than one selected value in multi-selection mode.');\r\n            }\r\n            if (invalidValues.length) {\r\n                throw Error('Listbox has selected values that do not match any of its options.');\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Coerces a value into an array representing a listbox selection.\r\n     * @param value The value to coerce\r\n     * @return An array\r\n     */\r\n    _coerceValue(value) {\r\n        return value == null ? [] : coerceArray(value);\r\n    }\r\n    /**\r\n     * Get the sublist of values that do not represent valid option values in this listbox.\r\n     * @param values The list of values\r\n     * @return The sublist of values that are not valid option values\r\n     */\r\n    _getInvalidOptionValues(values) {\r\n        const isEqual = this.compareWith || Object.is;\r\n        const validValues = (this.options || []).map(option => option.value);\r\n        return values.filter(value => !validValues.some(validValue => isEqual(value, validValue)));\r\n    }\r\n    /** Get the index of the last triggered option. */\r\n    _getLastTriggeredIndex() {\r\n        const index = this.options.toArray().indexOf(this._lastTriggered);\r\n        return index === -1 ? null : index;\r\n    }\r\n}\r\nCdkListbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkListbox, deps: [], target: i0.ɵɵFactoryTarget.Directive });\r\nCdkListbox.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", type: CdkListbox, isStandalone: true, selector: \"[cdkListbox]\", inputs: { id: \"id\", enabledTabIndex: [\"tabindex\", \"enabledTabIndex\"], value: [\"cdkListboxValue\", \"value\"], multiple: [\"cdkListboxMultiple\", \"multiple\"], disabled: [\"cdkListboxDisabled\", \"disabled\"], useActiveDescendant: [\"cdkListboxUseActiveDescendant\", \"useActiveDescendant\"], orientation: [\"cdkListboxOrientation\", \"orientation\"], compareWith: [\"cdkListboxCompareWith\", \"compareWith\"], navigationWrapDisabled: [\"cdkListboxNavigationWrapDisabled\", \"navigationWrapDisabled\"], navigateDisabledOptions: [\"cdkListboxNavigatesDisabledOptions\", \"navigateDisabledOptions\"] }, outputs: { valueChange: \"cdkListboxValueChange\" }, host: { attributes: { \"role\": \"listbox\" }, listeners: { \"focus\": \"_handleFocus()\", \"keydown\": \"_handleKeydown($event)\", \"focusout\": \"_handleFocusOut($event)\", \"focusin\": \"_handleFocusIn()\" }, properties: { \"id\": \"id\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"attr.aria-multiselectable\": \"multiple\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"attr.aria-orientation\": \"orientation\" }, classAttribute: \"cdk-listbox\" }, providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => CdkListbox),\r\n            multi: true,\r\n        },\r\n    ], queries: [{ propertyName: \"options\", predicate: CdkOption, descendants: true }], exportAs: [\"cdkListbox\"], ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkListbox, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[cdkListbox]',\r\n                    standalone: true,\r\n                    exportAs: 'cdkListbox',\r\n                    host: {\r\n                        'role': 'listbox',\r\n                        'class': 'cdk-listbox',\r\n                        '[id]': 'id',\r\n                        '[attr.tabindex]': '_getTabIndex()',\r\n                        '[attr.aria-disabled]': 'disabled',\r\n                        '[attr.aria-multiselectable]': 'multiple',\r\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\r\n                        '[attr.aria-orientation]': 'orientation',\r\n                        '(focus)': '_handleFocus()',\r\n                        '(keydown)': '_handleKeydown($event)',\r\n                        '(focusout)': '_handleFocusOut($event)',\r\n                        '(focusin)': '_handleFocusIn()',\r\n                    },\r\n                    providers: [\r\n                        {\r\n                            provide: NG_VALUE_ACCESSOR,\r\n                            useExisting: forwardRef(() => CdkListbox),\r\n                            multi: true,\r\n                        },\r\n                    ],\r\n                }]\r\n        }], propDecorators: { id: [{\r\n                type: Input\r\n            }], enabledTabIndex: [{\r\n                type: Input,\r\n                args: ['tabindex']\r\n            }], value: [{\r\n                type: Input,\r\n                args: ['cdkListboxValue']\r\n            }], multiple: [{\r\n                type: Input,\r\n                args: ['cdkListboxMultiple']\r\n            }], disabled: [{\r\n                type: Input,\r\n                args: ['cdkListboxDisabled']\r\n            }], useActiveDescendant: [{\r\n                type: Input,\r\n                args: ['cdkListboxUseActiveDescendant']\r\n            }], orientation: [{\r\n                type: Input,\r\n                args: ['cdkListboxOrientation']\r\n            }], compareWith: [{\r\n                type: Input,\r\n                args: ['cdkListboxCompareWith']\r\n            }], navigationWrapDisabled: [{\r\n                type: Input,\r\n                args: ['cdkListboxNavigationWrapDisabled']\r\n            }], navigateDisabledOptions: [{\r\n                type: Input,\r\n                args: ['cdkListboxNavigatesDisabledOptions']\r\n            }], valueChange: [{\r\n                type: Output,\r\n                args: ['cdkListboxValueChange']\r\n            }], options: [{\r\n                type: ContentChildren,\r\n                args: [CdkOption, { descendants: true }]\r\n            }] } });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst EXPORTED_DECLARATIONS = [CdkListbox, CdkOption];\r\nclass CdkListboxModule {\r\n}\r\nCdkListboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkListboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nCdkListboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkListboxModule, imports: [CdkListbox, CdkOption], exports: [CdkListbox, CdkOption] });\r\nCdkListboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkListboxModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.2.0-rc.0\", ngImport: i0, type: CdkListboxModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [...EXPORTED_DECLARATIONS],\r\n                    exports: [...EXPORTED_DECLARATIONS],\r\n                }]\r\n        }] });\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CdkListbox, CdkListboxModule, CdkOption };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}